FUNCTION  <SNR>61_invoke_funcrefs()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:177
Called 2 times
Total time:   0.058085
 Self time:   0.000364

count  total (s)   self (s)
    2   0.000981   0.000224   let builder = airline#builder#new(a:context)
    2   0.005402   0.000045   let err = airline#util#exec_funcrefs(a:funcrefs + s:core_funcrefs, builder, a:context)
    2              0.000003   if err == 1
    2   0.051638   0.000031     let a:context.line = builder.build()
    2              0.000013     let s:contexts[a:context.winnr] = a:context
    2              0.000012     let option = get(g:, 'airline_statusline_ontop', 0) ? '&tabline' : '&statusline'
    2              0.000028     call setwinvar(a:context.winnr, option, '%!airline#statusline('.a:context.winnr.')')
    2              0.000002   endif

FUNCTION  FugitiveExtractGitDir()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:215
Called 47 times
Total time:   0.018085
 Self time:   0.012478

count  total (s)   self (s)
   47   0.001202   0.000602   let path = s:Slash(a:path)
   47              0.000405   if path =~# '^fugitive:'
                                return matchstr(path, '\C^fugitive:\%(//\)\=\zs.\{-\}\ze\%(//\|::\|$\)')
   47              0.000131   elseif empty(path)
                                return ''
   47              0.000621   elseif isdirectory(path)
   47              0.001060     let path = fnamemodify(path, ':p:s?/$??')
                              else
                                let path = fnamemodify(path, ':p:h:s?/$??')
   47              0.000045   endif
   47              0.000758   let pre = substitute(matchstr(path, '^\a\a\+\ze:'), '^.', '\u&', '')
   47              0.000219   if len(pre) && exists('*' . pre . 'Real')
                                let path = s:Slash({pre}Real(path))
   47              0.000044   endif
   47              0.000710   let root = resolve(path)
   47              0.000124   if root !=# path
                                silent! exe (haslocaldir() ? 'lcd' : exists(':tcd') && haslocaldir(-1) ? 'tcd' : 'cd') '.'
   47              0.000043   endif
   47              0.000115   let previous = ""
   47              0.000678   let env_git_dir = len($GIT_DIR) ? s:Slash(simplify(fnamemodify(FugitiveVimPath($GIT_DIR), ':p:s?[\/]$??'))) : ''
   47   0.001526   0.000638   call s:Tree(env_git_dir)
   47              0.000178   while root !=# previous
   47              0.000820     if root =~# '\v^//%([^/]+/?)?$'
                                  break
   47              0.000047     endif
   47   0.002646   0.000737     if index(s:CeilingDirectories(), root) >= 0
                                  break
   47              0.000042     endif
   47              0.000336     if root ==# $GIT_WORK_TREE && FugitiveIsGitDir(env_git_dir)
                                  return env_git_dir
   47              0.000224     elseif has_key(s:dir_for_worktree, root)
                                  return s:dir_for_worktree[root]
   47              0.000040     endif
   47              0.000703     let dir = substitute(root, '[\/]$', '', '') . '/.git'
   47              0.000477     let type = getftype(dir)
   47   0.002867   0.000659     if type ==# 'dir' && FugitiveIsGitDir(dir)
   47              0.000103       return dir
                                elseif type ==# 'link' && FugitiveIsGitDir(dir)
                                  return resolve(dir)
                                elseif type !=# '' && filereadable(dir)
                                  let line = get(readfile(dir, '', 1), 0, '')
                                  let file_dir = s:Slash(FugitiveVimPath(matchstr(line, '^gitdir: \zs.*')))
                                  if file_dir !~# '^/\|^\a:' && FugitiveIsGitDir(root . '/' . file_dir)
                                    return simplify(root . '/' . file_dir)
                                  elseif len(file_dir) && FugitiveIsGitDir(file_dir)
                                    return file_dir
                                  endif
                                elseif FugitiveIsGitDir(root)
                                  return root
                                endif
                                let previous = root
                                let root = fnamemodify(root, ':h')
                              endwhile
                              return ''

FUNCTION  <SNR>89_Setup()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:321
Called 1 time
Total time:   0.005202
 Self time:   0.000092

count  total (s)   self (s)
    1              0.000003     if &filetype ==# ""
    1   0.004043   0.000013         call s:InitColor()
    1              0.000001     endif
                            
    1   0.000079   0.000027     if s:Filter() && g:indentLine_enabled || exists("b:indentLine_enabled") && b:indentLine_enabled
    1   0.000999   0.000017         call s:IndentLinesEnable()
    1              0.000001     endif
                            
    1   0.000066   0.000020     if s:Filter() && g:indentLine_leadingSpaceEnabled || exists("b:indentLine_leadingSpaceEnabled") && b:indentLine_leadingSpaceEnabled
                                    call s:LeadingSpaceEnable()
    1              0.000001     endif

FUNCTION  coc#client#get_channel()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:115
Called 8 times
Total time:   0.000082
 Self time:   0.000082

count  total (s)   self (s)
    8              0.000019   if s:is_vim
                                return a:client['channel']
    8              0.000007   endif
    8              0.000023   return a:client['chan_id']

FUNCTION  6()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:16
Called 2 times
Total time:   0.000050
 Self time:   0.000035

count  total (s)   self (s)
    2   0.000049   0.000033   call airline#add_inactive_statusline_func(a:name)

FUNCTION  8()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:8
Called 2 times
Total time:   0.000013
 Self time:   0.000013

count  total (s)   self (s)
    2              0.000012   call add(self._sections, ['|', a:0 ? a:1 : '%='])

FUNCTION  <SNR>97_init_buffer()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:51
Called 1 time
Total time:   0.000048
 Self time:   0.000048

count  total (s)   self (s)
    1              0.000004   let b:buffer_vcs_config = {}
    3              0.000011   for vcs in keys(s:vcs_config)
    2              0.000019     let b:buffer_vcs_config[vcs] = {     'branch': '',     'untracked': '',     'dirty': 0,   }
    3              0.000004   endfor
    1              0.000004   unlet! b:airline_head

FUNCTION  <SNR>82_GetCommandPrefix()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:207
Called 1 time
Total time:   0.000204
 Self time:   0.000027

count  total (s)   self (s)
    1   0.000203   0.000026   return 'command!'.s:StringifyOpts(a:opts, ['nargs', 'complete', 'range', 'count', 'bang', 'bar', 'register']).' '.a:name

FUNCTION  airline#util#exec_funcrefs()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:93
Called 3 times
Total time:   0.005372
 Self time:   0.000558

count  total (s)   self (s)
   17              0.000037     for Fn in a:list
   16   0.005236   0.000422       let code = call(Fn, a:000)
   16              0.000029       if code != 0
    2              0.000004         return code
   14              0.000011       endif
   15              0.000014     endfor
    1              0.000002     return 0

FUNCTION  remote#host#Require()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:33
Called 2 times
Total time:   0.338135
 Self time:   0.000175

count  total (s)   self (s)
    2              0.000011   if !has_key(s:hosts, a:name)
                                throw 'No host named "'.a:name.'" is registered'
    2              0.000002   endif
    2              0.000010   let host = s:hosts[a:name]
    2              0.000007   if !host.channel && !host.initialized
    2              0.000021     let host_info = { 'name': a:name, 'orig_name': get(host, 'orig_name', a:name) }
    2   0.338047   0.000086     let host.channel = call(host.factory, [host_info])
    2              0.000008     let host.initialized = 1
    2              0.000006   endif
    2              0.000010   return host.channel

FUNCTION  plug#begin()
    Defined: ~/.config/nvim/autoload/plug.vim:113
Called 1 time
Total time:   0.000321
 Self time:   0.000129

count  total (s)   self (s)
    1              0.000004   if a:0 > 0
    1              0.000005     let s:plug_home_org = a:1
    1   0.000094   0.000053     let home = s:path(fnamemodify(expand(a:1), ':p'))
                              elseif exists('g:plug_home')
                                let home = s:path(g:plug_home)
                              elseif !empty(&rtp)
                                let home = s:path(split(&rtp, ',')[0]) . '/plugged'
                              else
                                return s:err('Unable to determine plug home. Try calling plug#begin() with a path argument.')
    1              0.000001   endif
    1              0.000008   if fnamemodify(home, ':t') ==# 'plugin' && fnamemodify(home, ':h') ==# s:first_rtp
                                return s:err('Invalid plug home. '.home.' is a standard Vim runtime path and is not allowed.')
    1              0.000001   endif
                            
    1              0.000004   let g:plug_home = home
    1              0.000004   let g:plugs = {}
    1              0.000003   let g:plugs_order = []
    1              0.000003   let s:triggers = {}
                            
    1   0.000165   0.000014   call s:define_commands()
    1              0.000002   return 1

FUNCTION  <SNR>97_update_hg_branch()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:138
Called 47 times
Total time:   0.006577
 Self time:   0.005989

count  total (s)   self (s)
   47   0.001239   0.000651   if airline#util#has_lawrencium()
                                let cmd='LC_ALL=C hg qtop'
                                let stl=lawrencium#statusline()
                                let file=expand('%:p')
                                if !empty(stl) && get(b:, 'airline_do_mq_check', 1)
                                  if g:airline#init#vim_async
                                    noa call airline#async#get_mq_async(cmd, file)
                                  elseif has("nvim")
                                    noa call airline#async#nvim_get_mq_async(cmd, file)
                                  else
                                    " remove \n at the end of the command
                                    let output=system(cmd)[0:-2]
                                    noa call airline#async#mq_output(output, file)
                                  endif
                                endif
                                " do not do mq check anymore
                                let b:airline_do_mq_check = 0
                                if exists("b:mq") && !empty(b:mq)
                                  if stl is# 'default'
                                    " Shorten default a bit
                                    let stl='def'
                                  endif
                                  let stl.=' ['.b:mq.']'
                                endif
                                let s:vcs_config['mercurial'].branch = stl
   47              0.000048   else
   47              0.000247     let s:vcs_config['mercurial'].branch = ''
   47              0.000056   endif

FUNCTION  <SNR>49_ShouldStripWhitespaceOnSave()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:129
Called 1 time
Total time:   0.000023
 Self time:   0.000023

count  total (s)   self (s)
                                " Guess from local whitespace enabled-ness and global whitespace setting
    1              0.000007     if !exists('b:strip_whitespace_on_save') && exists('b:better_whitespace_enabled')
                                    let b:strip_whitespace_on_save = b:better_whitespace_enabled && g:strip_whitespace_on_save && &modifiable && (g:strip_max_file_size == 0 || g:strip_max_file_size >= line('$'))
    1              0.000001     endif
    1              0.000005     return get(b:, 'strip_whitespace_on_save', g:strip_whitespace_on_save)

FUNCTION  AirlineWebDevIcons()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:562
Called 2 times
Total time:   0.000218
 Self time:   0.000085

count  total (s)   self (s)
    2              0.000018   let w:airline_section_x = get(w:, 'airline_section_x', get(g:, 'airline_section_x', ''))
    2              0.000010   let w:airline_section_x .= ' %{WebDevIconsGetFileTypeSymbol()} '
    2   0.000165   0.000032   let hasFileFormatEncodingPart = airline#parts#ffenc() !=? ''
    2              0.000009   if g:webdevicons_enable_airline_statusline_fileformat_symbols && hasFileFormatEncodingPart
    2              0.000009     let w:airline_section_y = ' %{&fenc . " " . WebDevIconsGetFileFormatSymbol()} '
    2              0.000002   endif

FUNCTION  <SNR>113_get_python_executable_from_host_var()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:25
Called 1 time
Total time:   0.000087
 Self time:   0.000087

count  total (s)   self (s)
    1              0.000086   return expand(get(g:, 'python'.(a:major_version == 3 ? '3' : '').'_host_prog', ''))

FUNCTION  airline#parts#define_raw()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:27
Called 24 times
Total time:   0.000957
 Self time:   0.000349

count  total (s)   self (s)
   24   0.000942   0.000333   call airline#parts#define(a:key, { 'raw': a:raw })

FUNCTION  airline#extensions#vimtex#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim:39
Called 1 time
Total time:   0.000149
 Self time:   0.000028

count  total (s)   self (s)
    1   0.000075   0.000015   call airline#parts#define_raw('vimtex', '%{airline#extensions#vimtex#get_scope()}')
    1   0.000072   0.000011   call a:ext.add_statusline_func('airline#extensions#vimtex#apply')

FUNCTION  <SNR>100_ws_refresh()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:183
Called 1 time
Total time:   0.000027
 Self time:   0.000027

count  total (s)   self (s)
    1              0.000006   if get(b:, 'airline_ws_changedtick', 0) == b:changedtick
                                return
    1              0.000001   endif
    1              0.000004   unlet! b:airline_whitespace_check
    1              0.000004   if get(g:, 'airline_skip_empty_sections', 0)
                                exe ':AirlineRefresh!'
    1              0.000001   endif
    1              0.000005   let b:airline_ws_changedtick = b:changedtick

FUNCTION  <SNR>89_IndentLinesEnable()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:148
Called 1 time
Total time:   0.000982
 Self time:   0.000926

count  total (s)   self (s)
    1              0.000003     if g:indentLine_newVersion
    1              0.000006         if exists("b:indentLine_enabled") && b:indentLine_enabled == 0
                                        return
    1              0.000001         endif
                            
    1              0.000005         if !exists("w:indentLine_indentLineId")
    1              0.000005             let w:indentLine_indentLineId = []
    1              0.000001         endif
                            
    1   0.000072   0.000017         call s:SetConcealOption()
                            
    1              0.000003         if g:indentLine_showFirstIndentLevel
                                        call add(w:indentLine_indentLineId, matchadd('Conceal', '^ ', 0, -1, {'conceal': g:indentLine_first_char}))
    1              0.000001         endif
                            
    1              0.000007         let space = &l:shiftwidth == 0 ? &l:tabstop : &l:shiftwidth
    1              0.000005         let n = len(g:indentLine_char_list)
    1              0.000002         let level = 0
   21              0.000052         for i in range(space+1, space * g:indentLine_indentLevel + 1, space)
   20              0.000038             if n > 0
                                            let char = g:indentLine_char_list[level % n]
                                            let level += 1
   20              0.000022             else
   20              0.000058                 let char = g:indentLine_char
   20              0.000021             endif
   20              0.000500             call add(w:indentLine_indentLineId, matchadd('Conceal', '^\s\+\zs\%'.i.'v ', 0, -1, {'conceal': char}))
   21              0.000030         endfor
                            
    1              0.000002         return
                                endif
                            
                                if exists("b:indentLine_enabled") && b:indentLine_enabled
                                    return
                                else
                                    let b:indentLine_enabled = 1
                                endif
                            
                                call s:SetConcealOption()
                            
                                let g:mysyntaxfile = g:indentLine_mysyntaxfile
                            
                                let space = &l:shiftwidth == 0 ? &l:tabstop : &l:shiftwidth
                            
                                if g:indentLine_showFirstIndentLevel
                                    execute 'syntax match IndentLine /^ / containedin=ALL conceal cchar=' . g:indentLine_first_char
                                endif
                            
                                if g:indentLine_faster
                                    execute 'syntax match IndentLineSpace /^\s\+/ containedin=ALL contains=IndentLine'
                                    execute 'syntax match IndentLine / \{'.(space-1).'}\zs / contained conceal cchar=' . g:indentLine_char
                                    execute 'syntax match IndentLine /\t\zs / contained conceal cchar=' . g:indentLine_char
                                else
                                    let pattern = line('$') < g:indentLine_maxLines ? 'v' : 'c'
                                    for i in range(space+1, space * g:indentLine_indentLevel + 1, space)
                                        execute 'syntax match IndentLine /\%(^\s\+\)\@<=\%'.i.pattern.' / containedin=ALL conceal cchar=' . g:indentLine_char
                                    endfor
                                endif

FUNCTION  <SNR>104_SetDefault()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim:9
Called 8 times
Total time:   0.000135
 Self time:   0.000135

count  total (s)   self (s)
    8              0.000037   if !exists(a:var)
    8              0.000081     execute 'let ' . a:var . '=' . string(a:val)
    8              0.000008   endif

FUNCTION  airline#extensions#coc#get_error()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim:14
Called 47 times
Total time:   0.002614
 Self time:   0.000655

count  total (s)   self (s)
   47   0.002572   0.000612   return airline#extensions#coc#get('error')

FUNCTION  coc#add_extension()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc.vim:144
Called 16 times
Total time:   0.000146
 Self time:   0.000146

count  total (s)   self (s)
   16              0.000061   if a:0 == 0 | return | endif
   16              0.000070   call extend(g:coc_global_extensions, a:000)

FUNCTION  coc#util#do_autocmd()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:829
Called 9 times
Total time:   0.000212
 Self time:   0.000212

count  total (s)   self (s)
    9              0.000156   if exists('#User#'.a:name)
                                exe 'doautocmd User '.a:name
    9              0.000012   endif

FUNCTION  <SNR>113_get_python_candidates()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:29
Called 1 time
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    1              0.000015   return { 2: ['python2', 'python2.7', 'python2.6', 'python'], 3: ['python3', 'python3.8', 'python3.7', 'python3.6', 'python3.5',     'python3.4', 'python3.3', 'python'] }[a:major_version]

FUNCTION  <SNR>41_Slash()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:313
Called 95 times
Total time:   0.001113
 Self time:   0.001113

count  total (s)   self (s)
   95              0.000440   if exists('+shellslash')
                                return tr(a:path, '\', '/')
   95              0.000092   else
   95              0.000191     return a:path
                              endif

FUNCTION  airline#check_mode()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:199
Called 48 times
Total time:   0.030511
 Self time:   0.009592

count  total (s)   self (s)
   48              0.000267   if !has_key(s:contexts, a:winnr)
                                return ''
   48              0.000071   endif
   48              0.000267   let context = s:contexts[a:winnr]
                            
   48              0.000224   if get(w:, 'airline_active', 1)
   48              0.000215     let l:m = mode(1)
   48              0.000129     if l:m ==# "i"
                                  let l:mode = ['insert']
   48              0.000147     elseif l:m[0] ==# "i"
                                  let l:mode = ['insert']
   48              0.000094     elseif l:m ==# "Rv"
                                  let l:mode =['replace']
   48              0.000103     elseif l:m[0] ==# "R"
                                  let l:mode = ['replace']
   48              0.000857     elseif l:m[0] =~# '\v(v|V||s|S|)'
                                  let l:mode = ['visual']
   48              0.000092     elseif l:m ==# "t"
                                  let l:mode = ['terminal']
   48              0.000101     elseif l:m[0] ==# "c"
    1              0.000003       let l:mode = ['commandline']
   47              0.000094     elseif l:m ==# "no"   " does not work, most likely, Vim does not refresh the statusline in OP mode
                                  let l:mode = ['normal']
   47              0.000125     elseif l:m[0:1] ==# 'ni'
                                  let l:mode = ['normal']
                                  let l:m = 'ni'
   47              0.000045     else
   47              0.000167       let l:mode = ['normal']
   48              0.000051     endif
   48              0.000328     if exists("*VMInfos") && !empty(VMInfos())
                                  " Vim plugin Multiple Cursors https://github.com/mg979/vim-visual-multi
                                  let l:m = 'multi'
   48              0.000044     endif
   48              0.000418     if index(['Rv', 'no', 'ni', 'ix', 'ic', 'multi'], l:m) == -1
   48              0.000146       let l:m = l:m[0]
   48              0.000046     endif
   48              0.000340     let w:airline_current_mode = get(g:airline_mode_map, l:m, l:m)
                              else
                                let l:mode = ['inactive']
                                let w:airline_current_mode = get(g:airline_mode_map, '__')
   48              0.000046   endif
                            
   48              0.000294   if g:airline_detect_modified && &modified
                                call add(l:mode, 'modified')
   48              0.000045   endif
                            
   48              0.000115   if g:airline_detect_paste && &paste
                                call add(l:mode, 'paste')
   48              0.000040   endif
                            
   48              0.000193   if g:airline_detect_crypt && exists("+key") && !empty(&key)
                                call add(l:mode, 'crypt')
   48              0.000039   endif
                            
   48              0.000095   if g:airline_detect_spell && &spell
                                call add(l:mode, 'spell')
   48              0.000038   endif
                            
   48              0.000149   if &readonly || ! &modifiable
                                call add(l:mode, 'readonly')
   48              0.000039   endif
                            
   48              0.000308   let mode_string = join(l:mode)
   48              0.000275   if get(w:, 'airline_lastmode', '') != mode_string
    2   0.001414   0.000044     call airline#highlighter#highlight_modified_inactive(context.bufnr)
    2   0.019394   0.000051     call airline#highlighter#highlight(l:mode, context.bufnr)
    2   0.000237   0.000033     call airline#util#doautocmd('AirlineModeChanged')
    2              0.000008     let w:airline_lastmode = mode_string
   48              0.000044   endif
                            
   48              0.000093   return ''

FUNCTION  <SNR>60_set()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:35
Called 33 times
Total time:   0.000770
 Self time:   0.000770

count  total (s)   self (s)
   33              0.000135   if !exists(a:var)
   33              0.000087     if type(a:default)
   10              0.000091       execute 'let' a:var '=' string(a:default)
   23              0.000022     else
   23              0.000210       execute 'let' a:var '=' a:default
   33              0.000031     endif
   33              0.000029   endif

FUNCTION  <SNR>41_Tree()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:164
Called 94 times
Total time:   0.001724
 Self time:   0.001724

count  total (s)   self (s)
   94              0.000293   let dir = a:path
   94              0.000646   if dir =~# '/\.git$'
   47              0.000267     return len(dir) ==# 5 ? '/' : dir[0:-6]
   47              0.000099   elseif dir ==# ''
   47              0.000074     return ''
                              endif
                              if !has_key(s:worktree_for_dir, dir)
                                let s:worktree_for_dir[dir] = ''
                                let config_file = dir . '/config'
                                if filereadable(config_file)
                                  let config = readfile(config_file,'',10)
                                  call filter(config,'v:val =~# "^\\s*worktree *="')
                                  if len(config) == 1
                                    let worktree = FugitiveVimPath(matchstr(config[0], '= *\zs.*'))
                                  endif
                                elseif filereadable(dir . '/gitdir')
                                  let worktree = fnamemodify(FugitiveVimPath(readfile(dir . '/gitdir')[0]), ':h')
                                  if worktree ==# '.'
                                    unlet! worktree
                                  endif
                                endif
                                if exists('worktree')
                                  let s:worktree_for_dir[dir] = s:Slash(resolve(worktree))
                                  let s:dir_for_worktree[s:worktree_for_dir[dir]] = dir
                                endif
                              endif
                              if s:worktree_for_dir[dir] =~# '^\.'
                                return simplify(dir . '/' . s:worktree_for_dir[dir])
                              else
                                return s:worktree_for_dir[dir]
                              endif

FUNCTION  4()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:10
Called 5 times
Total time:   0.000316
 Self time:   0.000083

count  total (s)   self (s)
    5   0.000312   0.000078   call airline#add_statusline_func(a:name)

FUNCTION  coc#util#get_config_home()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:357
Called 1 time
Total time:   0.000058
 Self time:   0.000058

count  total (s)   self (s)
    1              0.000005   if !empty(get(g:, 'coc_config_home', ''))
                                  return expand(g:coc_config_home)
    1              0.000001   endif
    1              0.000006   if exists('$VIMCONFIG')
                                return resolve($VIMCONFIG)
    1              0.000001   endif
    1              0.000005   if has('nvim')
    1              0.000005     if exists('$XDG_CONFIG_HOME')
                                  return resolve($XDG_CONFIG_HOME."/nvim")
    1              0.000001     endif
    1              0.000002     if s:is_win
                                  return resolve($HOME.'/AppData/Local/nvim')
    1              0.000001     endif
    1              0.000017     return resolve($HOME.'/.config/nvim')
                              else
                                if s:is_win
                                  return resolve($HOME."/vimfiles")
                                endif
                                return resolve($HOME.'/.vim')
                              endif

FUNCTION  airline#util#append()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:49
Called 329 times
Total time:   0.005770
 Self time:   0.005770

count  total (s)   self (s)
  329              0.001302   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  329              0.000287   endif
  329              0.001653   let prefix = s:spc == "\ua0" ? s:spc : s:spc.s:spc
  329              0.001581   return empty(a:text) ? '' : prefix.g:airline_left_alt_sep.s:spc.a:text

FUNCTION  provider#Poll()
    Defined: /usr/share/nvim/runtime/autoload/provider.vim:6
Called 2 times
Total time:   0.336729
 Self time:   0.336729

count  total (s)   self (s)
    2              0.000021   let job = {'rpc': v:true, 'stderr_buffered': v:true}
    2              0.000003   try
    2              0.003270     let channel_id = jobstart(a:argv, job)
    2              0.333343     if channel_id > 0 && rpcrequest(channel_id, 'poll') ==# 'ok'
    2              0.000021       return channel_id
                                endif
                              catch
                                echomsg v:throwpoint
                                echomsg v:exception
                                for row in get(job, 'stderr', [])
                                  echomsg row
                                endfor
    2              0.000014   endtry
                              throw remote#host#LoadErrorForHost(a:orig_name, a:log_env)

FUNCTION  airline#extensions#vimtex#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/vimtex.vim:44
Called 2 times
Total time:   0.000025
 Self time:   0.000025

count  total (s)   self (s)
    2              0.000007   if exists("b:vimtex")
                                let w:airline_section_x = get(w:, 'airline_section_x', g:airline_section_x)
                                let w:airline_section_x.=s:spc.g:airline_left_alt_sep.s:spc.'%{airline#extensions#vimtex#get_scope()}'
    2              0.000002   endif

FUNCTION  airline#add_statusline_funcref()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:20
Called 6 times
Total time:   0.000162
 Self time:   0.000162

count  total (s)   self (s)
    6              0.000056   if index(g:airline_statusline_funcrefs, a:function) >= 0
                                call airline#util#warning(printf('The airline statusline funcref "%s" has already been added.', string(a:function)))
                                return
    6              0.000007   endif
    6              0.000034   call add(g:airline_statusline_funcrefs, a:function)

FUNCTION  <SNR>89_InitColor()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:35
Called 1 time
Total time:   0.004030
 Self time:   0.004030

count  total (s)   self (s)
    1              0.000002     if !g:indentLine_setColors
                                    return
    1              0.000001     endif
                            
    1              0.000003     let default_term_bg = "NONE"
    1              0.000003     let default_gui_bg  = "NONE"
    1              0.000003     if &background ==# "light"
                                    let default_term_fg = 249
                                    let default_gui_fg = "Grey70"
    1              0.000001     else
    1              0.000002         let default_term_fg = 239
    1              0.000002         let default_gui_fg = "Grey30"
    1              0.000001     endif
                            
    1              0.000003     if g:indentLine_defaultGroup != ""
                                    let default_id = synIDtrans(hlID(g:indentLine_defaultGroup))
                                    let default_term_fg = synIDattr(default_id, "fg", "cterm") == "" ? default_term_fg :  synIDattr(default_id, "fg", "cterm")
                                    let default_term_bg = synIDattr(default_id, "bg", "cterm") == "" ? default_term_bg :  synIDattr(default_id, "bg", "cterm")
                                    let default_gui_fg = synIDattr(default_id, "fg", "gui") == "" ? default_gui_fg :  synIDattr(default_id, "fg", "gui")
                                    let default_gui_bg = synIDattr(default_id, "bg", "gui") == "" ? default_gui_bg :  synIDattr(default_id, "bg", "gui")
    1              0.000001     endif
                            
    1              0.000004     if !exists("g:indentLine_color_term")
    1              0.000003         let term_color = default_term_fg
                                else
                                    let term_color = g:indentLine_color_term
    1              0.000001     endif
                            
    1              0.000003     if !exists("g:indentLine_bgcolor_term")
    1              0.000002         let term_bgcolor = default_term_bg
                                else
                                    let term_bgcolor = g:indentLine_bgcolor_term
    1              0.000001     endif
                            
    1              0.000003     if !exists("g:indentLine_color_gui")
    1              0.000003         let gui_color = default_gui_fg
                                else
                                    let gui_color = g:indentLine_color_gui
    1              0.000001     endif
                            
    1              0.000003     if !exists("g:indentLine_bgcolor_gui")
    1              0.000002         let gui_bgcolor = default_gui_bg
                                else
                                    let gui_bgcolor = g:indentLine_bgcolor_gui
    1              0.000001     endif
                            
    1              0.003856     execute "highlight Conceal cterm=NONE ctermfg=" . term_color . " ctermbg=" . term_bgcolor
    1              0.000055     execute "highlight Conceal gui=NONE guifg=" . gui_color .  " guibg=" . gui_bgcolor
                            
    1              0.000004     if &term ==# "linux"
                                    if &background ==# "light"
                                        let tty_color = exists("g:indentLine_color_tty_light") ? g:indentLine_color_tty_light : 4
                                    else
                                        let tty_color = exists("g:indentLine_color_tty_dark") ? g:indentLine_color_tty_dark : 2
                                    endif
                                    execute "highlight Conceal cterm=bold ctermfg=" . tty_color .  " ctermbg=NONE"
    1              0.000001     endif

FUNCTION  <SNR>95_hl_group_exists()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:95
Called 39 times
Total time:   0.000630
 Self time:   0.000630

count  total (s)   self (s)
   39              0.000144   if !hlexists(a:group)
                                return 0
   39              0.000235   elseif empty(synIDattr(hlID(a:group), 'fg'))
                                return 0
   39              0.000031   endif
   39              0.000051   return 1

FUNCTION  <SNR>62_RootDirectory()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:128
Called 2 times
Total time:   0.000826
 Self time:   0.000065

count  total (s)   self (s)
    2              0.000012   let root_dir = getbufvar('%', 'rootDir')
    2              0.000006   if empty(root_dir)
    1   0.000776   0.000015     let root_dir = s:SearchForRootDirectory()
    1              0.000003     if !empty(root_dir)
    1              0.000007       call setbufvar('%', 'rootDir', root_dir)
    1              0.000001     endif
    2              0.000002   endif
    2              0.000005   return root_dir

FUNCTION  airline#init#sections()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/init.vim:189
Called 1 time
Total time:   0.017372
 Self time:   0.000348

count  total (s)   self (s)
    1              0.000006   let spc = g:airline_symbols.space
    1              0.000005   if !exists('g:airline_section_a')
    1   0.001478   0.000021     let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'keymap', 'spell', 'capslock', 'xkblayout', 'iminsert'])
    1              0.000001   endif
    1              0.000004   if !exists('g:airline_section_b')
    1   0.000453   0.000019     let g:airline_section_b = airline#section#create(['hunks', 'branch'])
    1              0.000001   endif
    1              0.000004   if !exists('g:airline_section_c')
    1              0.000007     if exists("+autochdir") && &autochdir == 1
                                  let g:airline_section_c = airline#section#create(['%<', 'path', spc, 'readonly'])
    1              0.000001     else
    1   0.000786   0.000019       let g:airline_section_c = airline#section#create(['%<', 'file', spc, 'readonly', 'coc_status'])
    1              0.000001     endif
    1              0.000001   endif
    1              0.000005   if !exists('g:airline_section_gutter')
    1   0.000246   0.000017     let g:airline_section_gutter = airline#section#create(['%='])
    1              0.000001   endif
    1              0.000004   if !exists('g:airline_section_x')
    1   0.001012   0.000022     let g:airline_section_x = airline#section#create_right(['bookmark', 'tagbar', 'vista', 'gutentags', 'grepper', 'filetype'])
    1              0.000001   endif
    1              0.000004   if !exists('g:airline_section_y')
    1   0.000330   0.000021     let g:airline_section_y = airline#section#create_right(['ffenc'])
    1              0.000001   endif
    1              0.000006   if !exists('g:airline_section_z')
                                if airline#util#winwidth() > 79
                                  let g:airline_section_z = airline#section#create(['windowswap', 'obsession', '%3p%%'.spc, 'linenr', 'maxlinenr', spc.':%3v'])
                                else
                                  let g:airline_section_z = airline#section#create(['%3p%%'.spc, 'linenr',  ':%3v'])
                                endif
    1              0.000001   endif
    1              0.000005   if !exists('g:airline_section_error')
    1   0.010004   0.000027     let g:airline_section_error = airline#section#create(['ycm_error_count', 'syntastic-err', 'eclim', 'neomake_error_count', 'ale_error_count', 'lsp_error_count', 'languageclient_error_count', 'coc_error_count'])
    1              0.000001   endif
    1              0.000005   if !exists('g:airline_section_warning')
    1   0.002962   0.000102     let g:airline_section_warning = airline#section#create(['ycm_warning_count',  'syntastic-warn', 'neomake_warning_count', 'ale_warning_count', 'lsp_warning_count', 'languageclient_warning_count', 'whitespace', 'coc_warning_count'])
    1              0.000001   endif

FUNCTION  <SNR>94_wrap_accent()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/section.vim:9
Called 41 times
Total time:   0.010289
 Self time:   0.009566

count  total (s)   self (s)
   41              0.008819   if exists('a:part.accent')
    4   0.000967   0.000245     call airline#highlighter#add_accent(a:part.accent)
    4              0.000029     return '%#__accent_'.(a:part.accent).'#'.a:value.'%#__restore__#'
   37              0.000037   endif
   37              0.000082   return a:value

FUNCTION  airline#section#create()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/section.vim:74
Called 5 times
Total time:   0.014268
 Self time:   0.000073

count  total (s)   self (s)
    5   0.014263   0.000069   return s:create(a:parts, 0)

FUNCTION  airline#themes#get_highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/themes.vim:31
Called 48 times
Total time:   0.019582
 Self time:   0.006268

count  total (s)   self (s)
   48   0.019546   0.006231   return call('airline#highlighter#get_highlight', [a:group] + a:000)

FUNCTION  <SNR>107_get_accented_line()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:166
Called 16 times
Total time:   0.001354
 Self time:   0.001354

count  total (s)   self (s)
   16              0.000045   if a:self._context.active
                                " active window
   16              0.000045     let contents = []
   16              0.000185     let content_parts = split(a:contents, '__accent')
   38              0.000096     for cpart in content_parts
   22              0.000251       let accent = matchstr(cpart, '_\zs[^#]*\ze')
   22              0.000100       call add(contents, cpart)
   38              0.000046     endfor
   16              0.000100     let line = join(contents, a:group)
   16              0.000173     let line = substitute(line, '__restore__', a:group, 'g')
                              else
                                " inactive window
                                let line = substitute(a:contents, '%#__accent[^#]*#', '', 'g')
                                let line = substitute(line, '%#__restore__#', '', 'g')
   16              0.000014   endif
   16              0.000031   return line

FUNCTION  FugitiveWorkTree()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:151
Called 47 times
Total time:   0.004925
 Self time:   0.001038

count  total (s)   self (s)
   47   0.004896   0.001008   return s:Tree(FugitiveGitDir(a:0 ? a:1 : -1))

FUNCTION  airline#themes#base16#refresh()
    Defined: ~/.local/share/nvim/plugged/vim-airline-themes/autoload/airline/themes/base16.vim:77
Called 2 times
Total time:   0.011122
 Self time:   0.001210

count  total (s)   self (s)
    2              0.000049     let g:airline#themes#base16#palette = {}
                            
    2   0.003272   0.000064     let g:airline#themes#base16#palette.accents = { 'red': airline#themes#get_highlight('Constant'), }
                            
    2   0.000511   0.000048     let s:N1 = airline#themes#get_highlight2(['DiffText', 'bg'], ['DiffText', 'fg'], 'bold')
    2   0.000480   0.000045     let s:N2 = airline#themes#get_highlight2(['Visual', 'fg'], ['Visual', 'bg'])
    2   0.000630   0.000032     let s:N3 = airline#themes#get_highlight('CursorLine')
    2   0.000235   0.000042     let g:airline#themes#base16#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:N3)
                            
    2   0.000782   0.000031     let group = airline#themes#get_highlight('Statement')
    2              0.000023     let g:airline#themes#base16#palette.normal_modified = { 'airline_c': [ group[0], '', group[2], '', '' ] }
                            
    2   0.000474   0.000043     let s:I1 = airline#themes#get_highlight2(['DiffText', 'bg'], ['DiffAdded', 'fg'], 'bold')
    2   0.000598   0.000041     let s:I2 = airline#themes#get_highlight2(['DiffAdded', 'fg'], ['Normal', 'bg'])
    2              0.000005     let s:I3 = s:N3
    2   0.000200   0.000038     let g:airline#themes#base16#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s:I3)
    2              0.000011     let g:airline#themes#base16#palette.insert_modified = g:airline#themes#base16#palette.normal_modified
                            
    2   0.000430   0.000038     let s:R1 = airline#themes#get_highlight2(['DiffText', 'bg'], ['WarningMsg', 'fg'], 'bold')
    2              0.000007     let s:R2 = s:N2
    2              0.000004     let s:R3 = s:N3
    2   0.000201   0.000040     let g:airline#themes#base16#palette.replace = airline#themes#generate_color_map(s:R1, s:R2, s:R3)
    2              0.000011     let g:airline#themes#base16#palette.replace_modified = g:airline#themes#base16#palette.normal_modified
                            
    2   0.000413   0.000037     let s:V1 = airline#themes#get_highlight2(['DiffText', 'bg'], ['Constant', 'fg'], 'bold')
    2   0.000419   0.000054     let s:V2 = airline#themes#get_highlight2(['Constant', 'fg'], ['Normal', 'bg'])
    2              0.000007     let s:V3 = s:N3
    2   0.000187   0.000038     let g:airline#themes#base16#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s:V3)
    2              0.000011     let g:airline#themes#base16#palette.visual_modified = g:airline#themes#base16#palette.normal_modified
                            
                                " Use VertSplit's bg and default fg (reversed) for inactive statusline.
    2   0.000567   0.000029     let s:VS = airline#themes#get_highlight('VertSplit')
    2              0.000004     if s:improved_contrast
                                  let s:IA = [ s:VS[1], 'NONE', s:VS[2], s:cterm_lightlight_gray, 'reverse']
    2              0.000002     else
    2              0.000013       let s:IA = [ s:VS[1], 'NONE', s:VS[2], 'NONE', 'reverse']
    2              0.000002     endif
    2   0.000212   0.000045     let g:airline#themes#base16#palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, s:IA, s:IA, s:IA, s:IA)
    2              0.000014     let s:IM = [ s:VS[1], 'NONE', s:VS[2], 'NONE', 'reverse']
    2   0.000207   0.000054     let g:airline#themes#base16#palette.inactive_modified = airline#themes#generate_color_map(s:IM, s:IM, s:IM, s:IM, s:IM, s:IM)
                            
                                " Warnings
    2   0.000444   0.000036     let s:WI = airline#themes#get_highlight2(['WarningMsg', 'bg'], ['WarningMsg', 'fg'], 'bold')
    2              0.000018     let g:airline#themes#base16#palette.normal.airline_warning = [ s:WI[0], s:WI[1], s:WI[2], s:WI[3] ]
                            
    2              0.000013     let g:airline#themes#base16#palette.normal_modified.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000011     let g:airline#themes#base16#palette.insert.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000010     let g:airline#themes#base16#palette.insert_modified.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000011     let g:airline#themes#base16#palette.visual.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000010     let g:airline#themes#base16#palette.visual_modified.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000010     let g:airline#themes#base16#palette.replace.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
    2              0.000010     let g:airline#themes#base16#palette.replace_modified.airline_warning = g:airline#themes#base16#palette.normal.airline_warning
                            
                                " Errors
    2   0.000440   0.000037     let s:ER = airline#themes#get_highlight2(['ErrorMsg', 'bg'], ['ErrorMsg', 'fg'], 'bold')
    2              0.000016     let g:airline#themes#base16#palette.normal.airline_error = [ s:ER[0], s:ER[1], s:ER[2], s:ER[3] ]
                            
    2              0.000011     let g:airline#themes#base16#palette.normal_modified.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000010     let g:airline#themes#base16#palette.insert.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000009     let g:airline#themes#base16#palette.insert_modified.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000010     let g:airline#themes#base16#palette.visual.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000009     let g:airline#themes#base16#palette.visual_modified.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000009     let g:airline#themes#base16#palette.replace.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            
    2              0.000010     let g:airline#themes#base16#palette.replace_modified.airline_error = g:airline#themes#base16#palette.normal.airline_error
                            

FUNCTION  <SNR>3_define_commands()
    Defined: ~/.config/nvim/autoload/plug.vim:137
Called 1 time
Total time:   0.000151
 Self time:   0.000151

count  total (s)   self (s)
    1              0.000012   command! -nargs=+ -bar Plug call plug#(<args>)
    1              0.000074   if !executable('git')
                                return s:err('`git` executable not found. Most commands will not be available. To suppress this message, prepend `silent!` to `call plug#begin(...)`.')
    1              0.000001   endif
    1              0.000014   command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, [<f-args>])
    1              0.000010   command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [<f-args>])
    1              0.000007   command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)
    1              0.000011   command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif
    1              0.000003   command! -nargs=0 -bar PlugStatus  call s:status()
    1              0.000003   command! -nargs=0 -bar PlugDiff    call s:diff()
    1              0.000009   command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)

FUNCTION  coc#rpc#start_server()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim:6
Called 1 time
Total time:   0.009260
 Self time:   0.000631

count  total (s)   self (s)
    1              0.000010   if $NODE_ENV ==# 'test'
                                " server already started
                                let s:client = coc#client#create(s:name, [])
                                let s:client['running'] = 1
                                let s:client['chan_id'] = get(g:, 'coc_node_channel_id', 0)
                                call dictwatcheradd(g:, 'coc_node_channel_id', function('s:ChannelSet'))
                                return
    1              0.000002   endif
    1              0.000004   if empty(s:client)
    1   0.001709   0.000270     let cmd = coc#util#job_command()
    1              0.000006     if empty(cmd) | return | endif
    1   0.000083   0.000025     let $COC_VIMCONFIG = coc#util#get_config_home()
    1   0.000057   0.000017     let $COC_DATA_HOME = coc#util#get_data_home()
    1   0.000713   0.000246     let s:client = coc#client#create(s:name, cmd)
    1              0.000001   endif
    1   0.000022   0.000008   if !coc#client#is_running('coc')
    1   0.006625   0.000015     call s:client['start']()
    1              0.000001   endif

FUNCTION  airline#extensions#coc#get_warning()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim:10
Called 47 times
Total time:   0.003059
 Self time:   0.000679

count  total (s)   self (s)
   47   0.003012   0.000632   return airline#extensions#coc#get('warning')

FUNCTION  <SNR>3_glob()
    Defined: ~/.config/nvim/autoload/plug.vim:159
Called 48 times
Total time:   0.002623
 Self time:   0.002080

count  total (s)   self (s)
   48   0.002593   0.002050   return s:lines(globpath(a:from, a:pattern))

FUNCTION  <SNR>68_request()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:122
Called 4 times
Total time:   0.174439
 Self time:   0.174350

count  total (s)   self (s)
    4   0.000092   0.000054   let channel = coc#client#get_channel(self)
    4              0.000024   if empty(channel) | return '' | endif
    4              0.000006   try
    4              0.000007     if s:is_vim
                                  let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
                                  if type(res) == 1 && res ==# ''
                                    throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
                                  endif
                                  let [l:errmsg, res] =  res
                                  if !empty(l:errmsg)
                                    throw l:errmsg
                                  else
                                    return res
                                  endif
    4              0.000005     else
    4   0.173949   0.173897       return call('rpcrequest', [channel, a:method] + a:args)
                                endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                endif
    4              0.000009   endtry

FUNCTION  <SNR>78_LocalBrowse()
    Defined: /usr/share/nvim/runtime/plugin/netrwPlugin.vim:102
Called 2 times
Total time:   0.000078
 Self time:   0.000078

count  total (s)   self (s)
                              " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
                              " Otherwise, the BufEnter event gets triggered when attempts to write to
                              " the DBG buffer are made.
                            
    2              0.000008   if !exists("s:vimentered")
                               " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
                               " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
                            "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
                            "   call Dret("s:LocalBrowse")
    1              0.000001    return
    1              0.000001   endif
                            
                            "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
                            
    1              0.000006   if has("amiga")
                               " The check against '' is made for the Amiga, where the empty
                               " string is the current directory and not checking would break
                               " things such as the help command.
                            "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
                               if a:dirname != '' && isdirectory(a:dirname)
                                sil! call netrw#LocalBrowseCheck(a:dirname)
                                if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
                                 exe w:netrw_bannercnt
                                endif
                               endif
                            
    1              0.000005   elseif isdirectory(a:dirname)
                            "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
                            "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
                               sil! call netrw#LocalBrowseCheck(a:dirname)
                               if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
                                exe w:netrw_bannercnt
                               endif
                            
    1              0.000001   else
                               " not a directory, ignore it
                            "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
    1              0.000001   endif
                            
                            "  call Dret("s:LocalBrowse")

FUNCTION  <SNR>60_setCursorHold()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:367
Called 1 time
Total time:   0.000016
 Self time:   0.000016

count  total (s)   self (s)
    1              0.000003   if g:webdevicons_enable_nerdtree
    1              0.000002     augroup webdevicons_cursor_hold
    1              0.000007       autocmd CursorHold * silent! call s:CursorHoldUpdate()
    1              0.000001     augroup END
    1              0.000001   endif

FUNCTION  <SNR>50_StartHL()
    Defined: ~/.local/share/nvim/plugged/vim-cool/plugin/cool.vim:28
Called 1 time
Total time:   0.000008
 Self time:   0.000008

count  total (s)   self (s)
    1              0.000004     if !v:hlsearch || mode() isnot 'n'
    1              0.000002         return
                                endif
                                let [pos, rpos] = [winsaveview(), getpos('.')]
                                silent! exe "keepjumps go".(line2byte('.')+col('.')-(v:searchforward ? 2 : 0))
                                try
                                    silent keepjumps norm! n
                                    if getpos('.') != rpos
                                        throw 0
                                    endif
                                catch /^\%(0$\|Vim\%(\w\|:Interrupt$\)\@!\)/
                                    call <SID>StopHL()
                                    return
                                finally
                                    call winrestview(pos)
                                endtry
                                if !get(g:,'CoolTotalMatches') || !exists('*reltimestr')
                                    return
                                endif
                                exe "silent! norm! :let g:cool_char=nr2char(screenchar(screenrow(),1))\<cr>"
                                let cool_char = remove(g:,'cool_char')
                                if cool_char !~ '[/?]'
                                    return
                                endif
                                let [f, ws, now, noOf] = [0, &wrapscan, reltime(), [0,0]]
                                set nowrapscan
                                try
                                    while f < 2
                                        if reltimestr(reltime(now))[:-6] =~ '[1-9]'
                                            " time >= 100ms
                                            return
                                        endif
                                        let noOf[v:searchforward ? f : !f] += 1
                                        try
                                            silent exe "keepjumps norm! ".(f ? 'n' : 'N')
                                        catch /^Vim[^)]\+):E38[45]\D/
                                            call setpos('.',rpos)
                                            let f += 1
                                        endtry
                                    endwhile
                                finally
                                    call winrestview(pos)
                                    let &wrapscan = ws
                                endtry
                                redraw|echo cool_char.@/ 'match' noOf[0] 'of' noOf[0] + noOf[1] - 1

FUNCTION  airline#util#has_fugitive()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:143
Called 97 times
Total time:   0.001099
 Self time:   0.001099

count  total (s)   self (s)
   97              0.000358   if !exists("s:has_fugitive")
    1              0.000008     let s:has_fugitive = exists('*fugitive#head') || exists('*FugitiveHead')
   97              0.000084   endif
   97              0.000188   return s:has_fugitive

FUNCTION  airline#highlighter#add_accent()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:225
Called 4 times
Total time:   0.000027
 Self time:   0.000027

count  total (s)   self (s)
    4              0.000023   let s:accents[a:accent] = 1

FUNCTION  airline#extensions#term#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/term.vim:60
Called 1 time
Total time:   0.000099
 Self time:   0.000021

count  total (s)   self (s)
    1   0.000067   0.000011   call a:ext.add_statusline_func('airline#extensions#term#apply')
    1   0.000031   0.000009   call a:ext.add_inactive_statusline_func('airline#extensions#term#inactive_apply')

FUNCTION  airline#add_statusline_func()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:16
Called 6 times
Total time:   0.000282
 Self time:   0.000119

count  total (s)   self (s)
    6   0.000276   0.000114   call airline#add_statusline_funcref(function(a:name))

FUNCTION  provider#pythonx#DetectByModule()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:43
Called 1 time
Total time:   0.046607
 Self time:   0.000143

count  total (s)   self (s)
    1   0.000109   0.000022   let python_exe = s:get_python_executable_from_host_var(a:major_version)
                            
    1              0.000004   if !empty(python_exe)
                                return [exepath(expand(python_exe)), '']
    1              0.000001   endif
                            
    1   0.000084   0.000068   let candidates = s:get_python_candidates(a:major_version)
    1              0.000002   let errors = []
                            
    1              0.000003   for exe in candidates
    1   0.046381   0.000020     let [result, error] = provider#pythonx#CheckForModule(exe, a:module, a:major_version)
    1              0.000005     if result
    1              0.000004       return [exe, error]
                                endif
                                " Accumulate errors in case we don't find any suitable Python executable.
                                call add(errors, error)
                              endfor
                            
                              " No suitable Python executable found.
                              return ['', 'provider/pythonx: Could not load Python '.a:major_version.":\n".join(errors, "\n")]

FUNCTION  airline#parts#filetype()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:102
Called 47 times
Total time:   0.001517
 Self time:   0.000813

count  total (s)   self (s)
   47   0.001472   0.000767   return (airline#util#winwidth() < 90 && strlen(&filetype) > 3) ? matchstr(&filetype, '...'). (&encoding is? 'utf-8' ? '…' : '>') : &filetype

FUNCTION  <SNR>52_FocusGainedHandler()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:241
Called 1 time
Total time:   0.000054
 Self time:   0.000054

count  total (s)   self (s)
    1              0.000020   if exists("s:timer") && a:timer == s:timer
    1              0.000009     augroup airline
    1              0.000019       au FocusGained * call s:on_focus_gained()
    1              0.000002     augroup END
    1              0.000001   endif

FUNCTION  airline#parts#iminsert()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:82
Called 47 times
Total time:   0.000520
 Self time:   0.000520

count  total (s)   self (s)
   47              0.000211   if g:airline_detect_iminsert && &iminsert && exists('b:keymap_name')
                                return toupper(b:keymap_name)
   47              0.000042   endif
   47              0.000063   return ''

FUNCTION  <SNR>49_ShouldHighlight()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:120
Called 2 times
Total time:   0.000061
 Self time:   0.000061

count  total (s)   self (s)
                                " Guess from the filetype if a) not locally decided, b) globally enabled, c) there is enough information
    2              0.000029     if !exists('b:better_whitespace_enabled') && g:better_whitespace_enabled == 1 && !(empty(&buftype) && empty(&filetype))
                                    let b:better_whitespace_enabled = &buftype != 'nofile' && &buftype != 'popup' && index(g:better_whitespace_filetypes_blacklist, &ft) == -1
    2              0.000003     endif
    2              0.000012     return get(b:, 'better_whitespace_enabled', g:better_whitespace_enabled)

FUNCTION  airline#extensions#term#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/term.vim:10
Called 2 times
Total time:   0.000064
 Self time:   0.000064

count  total (s)   self (s)
    2              0.000014   if &buftype == 'terminal' || bufname('%')[0] == '!'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.s:section_a.spc)
                                call a:1.add_section('airline_b', '')
                                call a:1.add_section('airline_term', spc.s:termname())
                                call a:1.split()
                                call a:1.add_section('airline_y', '')
                                call a:1.add_section('airline_z', spc.airline#section#create_right(['linenr', 'maxlinenr']))
                                return 1
    2              0.000002   endif

FUNCTION  <SNR>95_exec_separator()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:189
Called 18 times
Total time:   0.045083
 Self time:   0.001402

count  total (s)   self (s)
   18              0.000053   if pumvisible()
                                return
   18              0.000015   endif
   18              0.000095   let group = a:from.'_to_'.a:to.a:suffix
   18   0.004206   0.000277   let l:from = airline#themes#get_highlight(a:from.a:suffix)
   18   0.009633   0.000271   let l:to = airline#themes#get_highlight(a:to.a:suffix)
   18              0.000030   if a:inverse
    6              0.000038     let colors = [ l:from[1], l:to[1], l:from[3], l:to[3] ]
   12              0.000010   else
   12              0.000072     let colors = [ l:to[1], l:from[1], l:to[3], l:from[3] ]
   18              0.000015   endif
   18              0.000075   let a:dict[group] = colors
   18   0.030697   0.000308   call airline#highlighter#exec(group, colors)

FUNCTION  <SNR>49_ClearHighlighting()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:181
Called 2 times
Total time:   0.000037
 Self time:   0.000037

count  total (s)   self (s)
    2              0.000033         silent! call matchdelete(get(s:, 'match_id', -1))

FUNCTION  <SNR>60_DevIconsGetArtifactFix()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:522
Called 94 times
Total time:   0.001363
 Self time:   0.001363

count  total (s)   self (s)
   94              0.000284   if g:DevIconsAppendArtifactFix == 1
                                let artifactFix = g:DevIconsArtifactFixChar
   94              0.000086   else
   94              0.000248     let artifactFix = ''
   94              0.000091   endif
                            
   94              0.000211   return artifactFix

FUNCTION  coc#rpc#request()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim:92
Called 4 times
Total time:   0.174630
 Self time:   0.000136

count  total (s)   self (s)
    4   0.000103   0.000048   if !coc#rpc#ready()
                                return ''
    4              0.000004   endif
    4   0.174510   0.000071   return s:client['request'](a:method, a:args)

FUNCTION  <SNR>79_GetManifestPath()
    Defined: /usr/share/nvim/runtime/plugin/rplugin.vim:7
Called 1 time
Total time:   0.000059
 Self time:   0.000059

count  total (s)   self (s)
    1              0.000003   let manifest_base = ''
                            
    1              0.000011   if exists('$NVIM_RPLUGIN_MANIFEST')
                                return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
    1              0.000001   endif
                            
    1              0.000008   let dest = stdpath('data')
    1              0.000004   if !empty(dest)
    1              0.000008     if !isdirectory(dest)
                                  call mkdir(dest, 'p', 0700)
    1              0.000001     endif
    1              0.000003     let manifest_base = dest
    1              0.000001   endif
                            
    1              0.000004   return manifest_base.'/rplugin.vim'

FUNCTION  <SNR>3_path()
    Defined: ~/.config/nvim/autoload/plug.vim:358
Called 1 time
Total time:   0.000041
 Self time:   0.000013

count  total (s)   self (s)
    1   0.000040   0.000012     return s:trim(a:path)

FUNCTION  <SNR>3_infer_properties()
    Defined: ~/.config/nvim/autoload/plug.vim:585
Called 44 times
Total time:   0.007269
 Self time:   0.003203

count  total (s)   self (s)
   44              0.000147   let repo = a:repo
   44   0.000809   0.000483   if s:is_local_plug(repo)
                                return { 'dir': s:dirpath(expand(repo)) }
   44              0.000047   else
   44              0.000150     if repo =~ ':'
                                  let uri = repo
   44              0.000044     else
   44              0.000150       if repo !~ '/'
                                    throw printf('Invalid argument: %s (implicit `vim-scripts'' expansion is deprecated)', repo)
   44              0.000044       endif
   44              0.000243       let fmt = get(g:, 'plug_url_format', 'https://git::@github.com/%s.git')
   44              0.000241       let uri = printf(fmt, repo)
   44              0.000043     endif
   44   0.004410   0.000670     return { 'dir': s:dirpath(g:plug_home.'/'.a:name), 'uri': uri }
                              endif

FUNCTION  <SNR>42_CreateDelimMapFromCms()
    Defined: ~/.local/share/nvim/plugged/nerdcommenter/plugin/NERD_commenter.vim:567
Called 2 times
Total time:   0.000165
 Self time:   0.000165

count  total (s)   self (s)
    2              0.000016     if &filetype ==# '' && exists('g:NERDDefaultDelims')
                                    let delims = g:NERDDefaultDelims
                                    for i in ['left', 'leftAlt', 'right', 'rightAlt']
                                        if !has_key(delims, i)
                                            let delims[i] = ''
                                        endif
                                    endfor
                                    return delims
    2              0.000002     endif
    2              0.000114     return { 'left': substitute(&commentstring, '\([^ \t]*\)\s*%s.*', '\1', ''), 'right': substitute(&commentstring, '.*%s\s*\(.*\)', '\1', 'g'), 'nested': 0, 'leftAlt': '', 'rightAlt': '', 'nestedAlt': 0}

FUNCTION  airline#extensions#coc#get()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim:18
Called 94 times
Total time:   0.004339
 Self time:   0.004339

count  total (s)   self (s)
   94              0.000495   if !exists(':CocCommand')
                                return ''
   94              0.000088   endif
   94              0.000489   let _backup = get(g:, 'coc_stl_format', '')
   94              0.000380   let is_err = (a:type  is# 'error')
   94              0.000160   if is_err
   47              0.000325     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_err', '%E{[%e(#%fe)]}')
   47              0.000045   else
   47              0.000341     let g:coc_stl_format = get(g:, 'airline#extensions#coc#stl_format_warn', '%W{[%w(#%fw)]}')
   94              0.000093   endif
   94              0.000667   let info = get(b:, 'coc_diagnostic_info', {})
   94              0.000432   if empty(info) | return '' | endif
                            
                            
                              let cnt = get(info, a:type, 0)
                              if !empty(_backup)
                                let g:coc_stl_format = _backup
                              endif
                            
                              if empty(cnt)
                                return ''
                              else
                                return (is_err ? s:error_symbol : s:warning_symbol).cnt
                              endif

FUNCTION  <SNR>3_to_a()
    Defined: ~/.config/nvim/autoload/plug.vim:151
Called 30 times
Total time:   0.000197
 Self time:   0.000197

count  total (s)   self (s)
   30              0.000169   return type(a:v) == s:TYPE.list ? a:v : [a:v]

FUNCTION  <SNR>62_IsDirectory()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:54
Called 3 times
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    3              0.000012   return a:pattern[-1:] == '/'

FUNCTION  <SNR>89_IndentLinesDisable()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:209
Called 1 time
Total time:   0.000060
 Self time:   0.000039

count  total (s)   self (s)
    1              0.000003     if g:indentLine_newVersion
    1              0.000006         if exists("w:indentLine_indentLineId") && ! empty(w:indentLine_indentLineId)
                                        for id in w:indentLine_indentLineId
                                            try
                                                call matchdelete(id)
                                            catch /^Vim\%((\a\+)\)\=:E80[23]/
                                            endtry
                                        endfor
                                        let w:indentLine_indentLineId = []
    1              0.000001         endif
                            
    1   0.000031   0.000011         call s:ResetConcealOption()
    1              0.000001         return
                                endif
                            
                                let b:indentLine_enabled = 0
                                try
                                    syntax clear IndentLine
                                    syntax clear IndentLineSpace
                                catch /^Vim\%((\a\+)\)\=:E28/	" catch error E28
                                endtry

FUNCTION  provider#python3#Call()
    Defined: /usr/share/nvim/runtime/autoload/provider/python3.vim:26
Called 1 time
Total time:   0.157807
 Self time:   0.006395

count  total (s)   self (s)
    1              0.000003   if s:err != ''
                                return
    1              0.000001   endif
    1              0.000004   if !exists('s:host')
    1              0.000009     let s:rpcrequest = function('rpcrequest')
                            
                                " Ensure that we can load the Python3 host before bootstrapping
    1              0.000001     try
    1   0.151433   0.000021       let s:host = remote#host#Require('legacy-python3-provider')
                                catch
                                  let s:err = v:exception
                                  echohl WarningMsg
                                  echomsg v:exception
                                  echohl None
                                  return
    1              0.000002     endtry
    1              0.000001   endif
    1              0.006331   return call(s:rpcrequest, insert(insert(a:args, 'python_'.a:method), s:host))

FUNCTION  <SNR>52_on_cursor_moved()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:91
Called 1 time
Total time:   0.000036
 Self time:   0.000025

count  total (s)   self (s)
    1              0.000007   if winnr() != s:active_winnr || !exists('w:airline_active')
                                call s:on_window_changed('CursorMoved')
    1              0.000001   endif
    1   0.000022   0.000011   call airline#update_tabline()

FUNCTION  semshi#init()
    Defined: ~/.local/share/nvim/plugged/semshi/plugin/semshi.vim:106
Called 1 time
Total time:   0.000137
 Self time:   0.000058

count  total (s)   self (s)
    1              0.000005     if g:semshi#no_default_builtin_highlight
    1   0.000086   0.000016         call s:disable_builtin_highlights()
    1              0.000001     endif
    1              0.000002     if g:semshi#simplify_markup
    1   0.000022   0.000012         call s:simplify_markup()
    1              0.000001     endif
                            
    1              0.000009     autocmd FileType * call s:filetype_changed()
    1              0.000008     autocmd BufWipeout * call SemshiBufWipeout(+expand('<abuf>'))

FUNCTION  <SNR>3_rtp()
    Defined: ~/.config/nvim/autoload/plug.vim:354
Called 73 times
Total time:   0.002385
 Self time:   0.001029

count  total (s)   self (s)
   73   0.002339   0.000984     return s:dirpath(a:spec.dir . get(a:spec, 'rtp', ''))

FUNCTION  airline#mode_changed()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:279
Called 2 times
Total time:   0.000081
 Self time:   0.000061

count  total (s)   self (s)
                              " airline#visual_active
                              " Boolean: for when to get visual wordcount
                              " needed for the wordcount extension
    2              0.000031   let g:airline#visual_active = (mode() =~? '[vs]')
    2   0.000042   0.000023   call airline#update_tabline()

FUNCTION  15()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:62
Called 2 times
Total time:   0.051607
 Self time:   0.002997

count  total (s)   self (s)
    2              0.000005   let side = 1
    2              0.000004   let line = ''
    2              0.000003   let i = 0
    2              0.000008   let length = len(self._sections)
    2              0.000004   let split = 0
    2              0.000004   let is_empty = 0
    2              0.000005   let prev_group = ''
                            
   20              0.000044   while i < length
   18              0.000063     let section = self._sections[i]
   18              0.000048     let group = section[0]
   18              0.000052     let contents = section[1]
   18              0.000042     let pgroup = prev_group
   18   0.000629   0.000304     let prev_group = airline#builder#get_prev_group(self._sections, i)
   18              0.000074     if group ==# 'airline_c' && &buftype ==# 'terminal' && self._context.active
                                  let group = 'airline_term'
   18              0.000092     elseif group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let group = 'airline_c'. self._context.bufnr
   18              0.000090     elseif prev_group ==# 'airline_c' && !self._context.active && has_key(self._context, 'bufnr')
                                  let prev_group = 'airline_c'. self._context.bufnr
   18              0.000017     endif
   18              0.000026     if is_empty
                                  let prev_group = pgroup
   18              0.000014     endif
   18   0.000695   0.000275     let is_empty = s:section_is_empty(self, contents)
                            
   18              0.000025     if is_empty
                                  " need to fix highlighting groups, since we
                                  " have skipped a section, we actually need
                                  " the previous previous group and so the
                                  " seperator goes from the previous previous group
                                  " to the current group
                                  let pgroup = group
   18              0.000014     endif
                            
   18              0.000034     if group == ''
                                  let line .= contents
   18              0.000034     elseif group == '|'
    2              0.000003       let side = 0
    2              0.000010       let line .= contents
    2              0.000003       let split = 1
   16              0.000013     else
   16              0.000029       if prev_group == ''
    2              0.000009         let line .= '%#'.group.'#'
   14              0.000019       elseif split
    2              0.000003         if !is_empty
    2   0.007488   0.000044           let line .= s:get_transitioned_seperator(self, prev_group, group, side)
    2              0.000002         endif
    2              0.000004         let split = 0
   12              0.000010       else
   12              0.000019         if !is_empty
   12   0.039306   0.000240           let line .= s:get_seperator(self, prev_group, group, side)
   12              0.000013         endif
   16              0.000014       endif
   16   0.001764   0.000411       let line .= is_empty ? '' : s:get_accented_line(self, group, contents)
   18              0.000016     endif
                            
   18              0.000045     let i = i + 1
   20              0.000025   endwhile
                            
    2              0.000005   if !self._context.active
                                "let line = substitute(line, '%#airline_c#', '%#airline_c'.self._context.bufnr.'#', '')
                                let line = substitute(line, '%#.\{-}\ze#', '\0_inactive', 'g')
    2              0.000002   endif
    2              0.000012   return line

FUNCTION  airline#extensions#quickfix#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim:23
Called 1 time
Total time:   0.000122
 Self time:   0.000025

count  total (s)   self (s)
    1   0.000083   0.000013   call a:ext.add_statusline_func('airline#extensions#quickfix#apply')
    1   0.000038   0.000011   call a:ext.add_inactive_statusline_func('airline#extensions#quickfix#inactive_qf_window')

FUNCTION  containedinlist#GetContainedinlist()
    Defined: ~/.local/share/nvim/plugged/semantic-highlight.vim/autoload/containedinlist.vim:9
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000003 	return s:containedinlist

FUNCTION  airline#highlighter#add_separator()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:220
Called 12 times
Total time:   0.039932
 Self time:   0.000324

count  total (s)   self (s)
   12              0.000097   let s:separators[a:from.a:to] = [a:from, a:to, a:inverse]
   12   0.039823   0.000215   call <sid>exec_separator({}, a:from, a:to, a:inverse, '')

FUNCTION  coc#rpc#started()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim:27
Called 1 time
Total time:   0.000006
 Self time:   0.000006

count  total (s)   self (s)
    1              0.000005   return !empty(s:client)

FUNCTION  airline#extensions#po#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/po.vim:51
Called 2 times
Total time:   0.000042
 Self time:   0.000042

count  total (s)   self (s)
    2              0.000025   if &ft ==# 'po'
                                call airline#extensions#prepend_to_section('z', '%{airline#extensions#po#stats()}')
                                " Also reset the cache variable, if a window has been split, e.g. the winwidth changed
                                autocmd airline BufWritePost * unlet! b:airline_po_stats
                                autocmd airline WinEnter * call airline#extensions#po#on_winenter()
    2              0.000002   endif

FUNCTION  <SNR>79_LoadRemotePlugins()
    Defined: /usr/share/nvim/runtime/plugin/rplugin.vim:56
Called 1 time
Total time:   0.006235
 Self time:   0.000085

count  total (s)   self (s)
    1   0.000122   0.000016   let g:loaded_remote_plugins = s:GetManifest()
    1              0.000009   if filereadable(g:loaded_remote_plugins)
    1   0.006100   0.000057     execute 'source' fnameescape(g:loaded_remote_plugins)
    1              0.000001   endif

FUNCTION  airline#util#winwidth()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:19
Called 485 times
Total time:   0.007955
 Self time:   0.007955

count  total (s)   self (s)
  485              0.002312   let nr = get(a:000, 0, 0)
  485              0.002132   if get(g:, 'airline_statusline_ontop', 0)
                                return &columns
  485              0.000474   else
  485              0.001492     return winwidth(nr)
                              endif

FUNCTION  airline#util#doautocmd()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:176
Called 5 times
Total time:   0.000288
 Self time:   0.000117

count  total (s)   self (s)
    5   0.000283   0.000112   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)

FUNCTION  illuminate#on_cursor_moved()
    Defined: ~/.local/share/nvim/plugged/vim-illuminate/autoload/illuminate.vim:12
Called 1 time
Total time:   0.000057
 Self time:   0.000022

count  total (s)   self (s)
    1   0.000054   0.000019   if !s:should_illuminate_file()
    1              0.000001     return
                              endif
                            
                              if (s:previous_match !=# s:get_cur_word())
                                call s:remove_illumination()
                              else
                                return
                              endif
                            
                              " Any delay at or below 17 milliseconds gets counted as no delay
                              if !has('timers') || g:Illuminate_delay <= 17
                                call s:illuminate()
                                return
                              endif
                            
                              if exists('s:timer_id') && s:timer_id > -1
                                call timer_stop(s:timer_id)
                              endif
                            
                              let s:timer_id = timer_start(g:Illuminate_delay, function('s:illuminate'))

FUNCTION  remote#define#AutocmdOnHost()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:90
Called 1 time
Total time:   0.000172
 Self time:   0.000100

count  total (s)   self (s)
    1   0.000035   0.000013   let group = s:GetNextAutocmdGroup()
    1              0.000007   let forward = '"doau '.group.' '.a:name.' ".' . 'fnameescape(expand("<amatch>"))'
    1              0.000004   let a:opts.group = group
    1   0.000100   0.000050   let bootstrap_def = s:GetAutocmdPrefix(a:name, a:opts) .' call remote#define#AutocmdBootstrap("'.a:host.'"' .                                ', "'.a:method.'"' .                                ', '.string(a:sync) .                                ', "'.a:name.'"' .                                ', '.string(a:opts).'' .                                ', "'.escape(forward, '"').'"' .                                ')'
    1              0.000024   exe bootstrap_def

FUNCTION  <SNR>110_can_diffoff()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:4810
Called 1 time
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    1              0.000013   return getwinvar(bufwinnr(a:buf), '&diff') && !empty(getwinvar(bufwinnr(a:buf), 'fugitive_diff_restore'))

FUNCTION  remote#host#Register()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:6
Called 5 times
Total time:   0.000126
 Self time:   0.000126

count  total (s)   self (s)
    5              0.000050   let s:hosts[a:name] = {'factory': a:factory, 'channel': 0, 'initialized': 0}
    5              0.000022   let s:plugin_patterns[a:name] = a:pattern
    5              0.000025   if type(a:factory) == type(1) && a:factory
                                " Passed a channel directly
                                let s:hosts[a:name].channel = a:factory
    5              0.000005   endif

FUNCTION  <SNR>62_ChangeDirectory()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:41
Called 2 times
Total time:   0.000051
 Self time:   0.000051

count  total (s)   self (s)
    2              0.000012   if a:directory !=# getcwd()
                                let cmd = g:rooter_use_lcd == 1 ? 'lcd' : 'cd'
                                execute ':'.cmd fnameescape(a:directory)
                                if !g:rooter_silent_chdir
                                  echo 'cwd: '.a:directory
                                endif
                                if exists('#User#RooterChDir')
                                  execute 'doautocmd' s:nomodeline 'User RooterChDir'
                                endif
    2              0.000002   endif

FUNCTION  <SNR>49_WhitespaceInit()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:95
Called 1 time
Total time:   0.000077
 Self time:   0.000077

count  total (s)   self (s)
                                " Check if the user has already defined highlighting for this group
    1              0.000028     if hlexists('ExtraWhitespace') == 0 || empty(synIDattr(synIDtrans(hlID('ExtraWhitespace')), 'bg'))
    1              0.000040         execute 'highlight ExtraWhitespace ctermbg = '.g:better_whitespace_ctermcolor. ' guibg = '.g:better_whitespace_guicolor
    1              0.000002     endif
    1              0.000005     let s:better_whitespace_initialized = 1

FUNCTION  FugitiveIsGitDir()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:155
Called 47 times
Total time:   0.002208
 Self time:   0.002208

count  total (s)   self (s)
   47              0.000641   let path = substitute(a:path, '[\/]$', '', '') . '/'
   47              0.001494   return len(a:path) && getfsize(path.'HEAD') > 10 && ( isdirectory(path.'objects') && isdirectory(path.'refs') || getftype(path.'commondir') ==# 'file')

FUNCTION  <SNR>58_HexCode()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:162
Called 2 times
Total time:   0.000455
 Self time:   0.000455

count  total (s)   self (s)
                              " finds RGB: #00f #0000ff and RGBA: #00f8 #0000ff88 (or ARGB: #800f #880000ff)
    2              0.000017   if has("gui_running")
                                let rgb_bg = s:RgbBgColor()
    2              0.000002   else
                                " translucent colors would display incorrectly, so ignore the alpha value
    2              0.000005     let rgb_bg = []
    2              0.000002   endif
    2              0.000007   let ret = []
    2              0.000005   let place = 0
    2              0.000009   let colorpat = '#[0-9A-Fa-f]\{3\}\>\|#[0-9A-Fa-f]\{6\}\>\|#[0-9A-Fa-f]\{8\}\>\|#[0-9A-Fa-f]\{4\}\>'
    2              0.000004   while 1
    2              0.000045     let foundcolor = matchstr(a:str, colorpat, place)
    2              0.000006     if foundcolor == ''
    2              0.000003       break
                                endif
                                let place = matchend(a:str, colorpat, place)
                                let pat = foundcolor . '\>'
                                let colorlen = len(foundcolor)
                                if get(g:, 'colorizer_hex_alpha_first') == 1
                                  if colorlen == 4 || colorlen == 5
                                    let ha = tolower(foundcolor[1])
                                    let hr = tolower(foundcolor[2])
                                    let hg = tolower(foundcolor[3])
                                    let hb = tolower(foundcolor[4])
                                    let foundcolor = substitute(foundcolor, '[[:xdigit:]]', '&&', 'g')
                                  else
                                    let ha = tolower(foundcolor[1:2])
                                    let hr = tolower(foundcolor[3:4])
                                    let hg = tolower(foundcolor[5:6])
                                    let hb = tolower(foundcolor[7:8])
                                  endif
                                  if len(foundcolor) == 9
                                    let alpha      = foundcolor[1:2]
                                    let foundcolor = '#'.foundcolor[3:8]
                                  else
                                    let alpha = 'ff'
                                  endif
                                  if empty(rgb_bg)
                                    if colorlen == 5
                                      let pat = printf('\c#\x\zs%s%s%s\ze\>', hr,hg,hb)
                                    elseif colorlen == 9
                                      let pat = printf('\c#\x\x\zs%s%s%s\ze\>', hr,hg,hb)
                                    endif
                                  endif
                                else
                                  if colorlen == 4 || colorlen == 5
                                    let hr = tolower(foundcolor[1])
                                    let hg = tolower(foundcolor[2])
                                    let hb = tolower(foundcolor[3])
                                    let ha = tolower(foundcolor[4])
                                    let foundcolor = substitute(foundcolor, '[[:xdigit:]]', '&&', 'g')
                                  else
                                    let hr = tolower(foundcolor[1:2])
                                    let hg = tolower(foundcolor[3:4])
                                    let hb = tolower(foundcolor[5:6])
                                    let ha = tolower(foundcolor[7:8])
                                  endif
                                  if len(foundcolor) == 9
                                    let alpha      = foundcolor[7:8]
                                    let foundcolor = foundcolor[0:6]
                                  else
                                    let alpha = 'ff'
                                  endif
                                  if empty(rgb_bg)
                                    if colorlen == 5
                                      let pat = printf('\c#%s%s%s\ze\x\>', hr,hg,hb)
                                    elseif colorlen == 9
                                      let pat = printf('\c#%s%s%s\ze\x\x\>', hr,hg,hb)
                                    endif
                                  endif
                                endif
                                if empty(rgb_bg) || tolower(alpha) == 'ff'
                                  call add(ret, [foundcolor, pat])
                                else
                                  let rgba    = s:Hexa2Rgba(foundcolor, alpha)
                                  let rgb     = s:Rgba2Rgb(rgba[0], rgba[1], rgba[2], rgba[3], 0, rgb_bg)
                                  let l:color = printf('#%02x%02x%02x', rgb[0], rgb[1], rgb[2])
                                  call add(ret, [l:color, pat])
                                endif
    2              0.000009   endwhile
    2              0.000005   return ret

FUNCTION  <SNR>108_build_sections()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim:35
Called 4 times
Total time:   0.003345
 Self time:   0.000448

count  total (s)   self (s)
   20              0.000046   for key in a:keys
   16              0.000071     if (key == 'warning' || key == 'error') && !a:context.active
                                  continue
   16              0.000013     endif
   16   0.003119   0.000221     call s:add_section(a:builder, a:context, key)
   20              0.000026   endfor

FUNCTION  airline#extensions#keymap#status()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim:10
Called 47 times
Total time:   0.000918
 Self time:   0.000918

count  total (s)   self (s)
   47              0.000437   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
   47              0.000407     return printf('%s', (!empty(&keymap) ? (g:airline_symbols.keymap . ' '. &keymap) : ''))
                              else
                                return ''
                              endif

FUNCTION  airline#extensions#coc#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim:50
Called 1 time
Total time:   0.000184
 Self time:   0.000050

count  total (s)   self (s)
    1   0.000065   0.000016   call airline#parts#define_function('coc_error_count', 'airline#extensions#coc#get_error')
    1   0.000060   0.000015   call airline#parts#define_function('coc_warning_count', 'airline#extensions#coc#get_warning')
    1   0.000056   0.000017   call airline#parts#define_function('coc_status', 'airline#extensions#coc#get_status')

FUNCTION  10()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:17
Called 16 times
Total time:   0.000110
 Self time:   0.000110

count  total (s)   self (s)
   16              0.000098   call add(self._sections, [a:group, a:contents])

FUNCTION  <SNR>63_defs()
    Defined: ~/.local/share/nvim/plugged/fzf.vim/plugin/fzf.vim:28
Called 1 time
Total time:   0.001050
 Self time:   0.001050

count  total (s)   self (s)
    1              0.000007   let prefix = get(g:, 'fzf_command_prefix', '')
    1              0.000008   if prefix =~# '^[^A-Z]'
                                echoerr 'g:fzf_command_prefix must start with an uppercase letter'
                                return
    1              0.000001   endif
   23              0.000047   for command in a:commands
   22              0.000286     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')
   22              0.000098     if 2 != exists(name)
   20              0.000516       execute substitute(command, '\ze\C[A-Z]', prefix, '')
   22              0.000023     endif
   23              0.000026   endfor

FUNCTION  <SNR>109_should_illuminate_file()
    Defined: ~/.local/share/nvim/plugged/vim-illuminate/autoload/illuminate.vim:118
Called 1 time
Total time:   0.000035
 Self time:   0.000035

count  total (s)   self (s)
    1              0.000006   if !exists('g:Illuminate_ftblacklist')
                                " Blacklist empty filetype by default
    1              0.000005     let g:Illuminate_ftblacklist=['']
    1              0.000001   endif
    1              0.000004   if !exists('g:Illuminate_ftwhitelist')
    1              0.000003     let g:Illuminate_ftwhitelist=[]
    1              0.000001   endif
                            
    1              0.000011   return index(g:Illuminate_ftblacklist, &filetype) < 0 && (empty(g:Illuminate_ftwhitelist) || index(g:Illuminate_ftwhitelist, &filetype) >= 0)

FUNCTION  coc#util#get_data_home()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:380
Called 3 times
Total time:   0.000150
 Self time:   0.000150

count  total (s)   self (s)
    3              0.000019   if !empty(get(g:, 'coc_data_home', ''))
                                return resolve(expand(g:coc_data_home))
    3              0.000003   endif
    3              0.000017   if exists('$XDG_CONFIG_HOME')
                                return resolve($XDG_CONFIG_HOME."/coc")
    3              0.000003   endif
    3              0.000007   if s:is_win
                                return resolve($HOME.'/AppData/Local/coc')
    3              0.000003   endif
    3              0.000062   return resolve($HOME.'/.config/coc')

FUNCTION  provider#pythonx#Detect()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:38
Called 1 time
Total time:   0.046639
 Self time:   0.000032

count  total (s)   self (s)
    1   0.046638   0.000030   return provider#pythonx#DetectByModule('neovim', a:major_version)

FUNCTION  <SNR>49_SetupAutoCommands()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:327
Called 1 time
Total time:   0.000708
 Self time:   0.000464

count  total (s)   self (s)
    1              0.000008     augroup better_whitespace
                                    " Reset all auto commands in group
    1              0.000308         autocmd!
                            
    1   0.000057   0.000022         if <SID>ShouldHighlight()
    1              0.000003             if s:better_whitespace_initialized == 0
    1   0.000088   0.000011                 call <SID>WhitespaceInit()
    1              0.000001             endif
                            
                                        " Highlight extraneous whitespace at the end of lines, but not the current line in insert mode.
    1   0.000126   0.000018             call <SID>HighlightEOLWhitespace()
    1              0.000017             autocmd CursorMovedI,InsertEnter * call <SID>HighlightEOLWhitespaceExceptCurrentLine()
    1              0.000009             autocmd InsertLeave,BufReadPost * call <SID>HighlightEOLWhitespace()
                            
    1              0.000003             if g:current_line_whitespace_disabled_soft == 0
                                            " Using syntax: clear whitespace highlighting when leaving buffer
    1              0.000008                 autocmd BufWinLeave * if expand("<afile>") == expand("%") | call <SID>ClearHighlighting() | endif
                            
                                            " Do not highlight whitespace on current line in insert mode
    1              0.000005                 autocmd CursorMovedI * call <SID>HighlightEOLWhitespaceExceptCurrentLine()
                            
                                            " Do not highlight whitespace on current line in normal mode?
    1              0.000003                 if g:current_line_whitespace_disabled_hard == 1
                                                autocmd CursorMoved * call <SID>HighlightEOLWhitespaceExceptCurrentLine()
    1              0.000001                 endif
    1              0.000001             endif
                            
                                    elseif s:better_whitespace_initialized == 1
                                        " Clear highlighting if it disabled, as it might have just been toggled
                                        call <SID>ClearHighlighting()
    1              0.000001         endif
                            
                                    " Strip whitespace on save if enabled.
    1   0.000039   0.000015         if <SID>ShouldStripWhitespaceOnSave()
                                        autocmd BufWritePre * call <SID>StripWhitespaceOnSave(v:cmdbang)
    1              0.000001         endif
                            
    1              0.000001     augroup END

FUNCTION  <SNR>97_display_git_branch()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:115
Called 1 time
Total time:   0.000100
 Self time:   0.000059

count  total (s)   self (s)
                              " disable FocusGained autocommand, might cause loops because system() causes
                              " a refresh, which causes a system() command again #2029
    1   0.000023   0.000009   call airline#util#ignore_next_focusgain()
    1              0.000003   let name = b:buffer_vcs_config['git'].branch
    1              0.000001   try
    1   0.000042   0.000014     let commit = matchstr(FugitiveParse()[0], '^\x\+')
                            
    1              0.000003     if has_key(s:names, commit)
                                  let name = get(s:names, commit)."(".name.")"
    1              0.000002     elseif !empty(commit)
                                  let ref = fugitive#repo().git_chomp('describe', '--all', '--exact-match', commit)
                                  if ref !~ "^fatal: no tag exactly matches"
                                    let name = s:format_name(substitute(ref, '\v\C^%(heads/|remotes/|tags/)=','',''))."(".name.")"
                                  else
                                    let name = matchstr(commit, '.\{'.s:sha1size.'}')."(".name.")"
                                  endif
    1              0.000001     endif
                              catch
    1              0.000001   endtry
    1              0.000002   return name

FUNCTION  <SNR>89_LeadingSpaceDisable()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:368
Called 1 time
Total time:   0.000023
 Self time:   0.000023

count  total (s)   self (s)
    1              0.000002     if g:indentLine_newVersion
    1              0.000005         if exists("w:indentLine_leadingSpaceId") && ! empty(w:indentLine_leadingSpaceId)
                                        for id in w:indentLine_leadingSpaceId
                                            try
                                                call matchdelete(id)
                                            catch /^Vim\%((\a\+)\)\=:E80[23]/
                                            endtry
                                        endfor
                                        let w:indentLine_leadingSpaceId = []
    1              0.000001         endif
                            
    1              0.000001         return
                                endif
                            
                                let b:indentLine_leadingSpaceEnabled = 0
                                try
                                    syntax clear IndentLineLeadingSpace
                                catch /^Vim\%((\a\+)\)\=:E28/   " catch error E28
                                endtry

FUNCTION  airline#section#create_left()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/section.vim:78
Called 2 times
Total time:   0.002844
 Self time:   0.000035

count  total (s)   self (s)
    2   0.002842   0.000034   return s:create(a:parts, 1)

FUNCTION  airline#extensions#default#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim:79
Called 2 times
Total time:   0.003722
 Self time:   0.000217

count  total (s)   self (s)
    2              0.000009   let winnr = a:context.winnr
    2              0.000006   let active = a:context.active
                            
    2   0.000042   0.000029   if airline#util#getwinvar(winnr, 'airline_render_left', active || (!active && !g:airline_inactive_collapse))
    2   0.001019   0.000035     call s:build_sections(a:builder, a:context, s:layout[0])
                              else
                                let text = s:get_section(winnr, 'c')
                                if empty(text)
                                  let text = ' %f%m '
                                endif
                                call a:builder.add_section('airline_c'.(a:context.bufnr), text)
    2              0.000002   endif
                            
    2   0.000175   0.000040   call a:builder.split(s:get_section(winnr, 'gutter', '', ''))
                            
    2   0.000035   0.000023   if airline#util#getwinvar(winnr, 'airline_render_right', 1)
    2   0.002393   0.000031     call s:build_sections(a:builder, a:context, s:layout[1])
    2              0.000002   endif
                            
    2              0.000003   return 1

FUNCTION  airline#util#stl_disabled()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:185
Called 5 times
Total time:   0.000297
 Self time:   0.000209

count  total (s)   self (s)
                              " setting the statusline is disabled,
                              " either globally, per window, or per buffer
                              " w:airline_disabled is deprecated!
    5   0.000282   0.000194   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline#util#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)

FUNCTION  <SNR>3_source()
    Defined: ~/.config/nvim/autoload/plug.vim:163
Called 9 times
Total time:   0.006511
 Self time:   0.001643

count  total (s)   self (s)
    9              0.000029   let found = 0
   27              0.000068   for pattern in a:000
   34   0.001889   0.000254     for vim in s:glob(a:from, pattern)
   16   0.004130   0.000897       execute 'source' s:esc(vim)
   16              0.000087       let found = 1
   34              0.000042     endfor
   27              0.000034   endfor
    9              0.000018   return found

FUNCTION  FugitiveVimPath()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:301
Called 47 times
Total time:   0.000864
 Self time:   0.000864

count  total (s)   self (s)
   47              0.000215   if exists('+shellslash') && !&shellslash
                                return tr(a:path, '/', '\')
   47              0.000329   else
   47              0.000105     return a:path
                              endif

FUNCTION  airline#highlighter#get_highlight2()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:89
Called 27 times
Total time:   0.005229
 Self time:   0.001213

count  total (s)   self (s)
   27   0.002375   0.000426   let fg = s:get_syn(a:fg[0], a:fg[1])
   27   0.002002   0.000388   let bg = s:get_syn(a:bg[0], a:bg[1])
   27   0.000820   0.000368   return s:get_array(fg, bg, a:000)

FUNCTION  <SNR>71_simplify_markup()
    Defined: ~/.local/share/nvim/plugged/semshi/plugin/semshi.vim:24
Called 1 time
Total time:   0.000010
 Self time:   0.000010

count  total (s)   self (s)
    1              0.000005     autocmd FileType python call s:simplify_markup_extra()
                            
                                " For python-syntax plugin
    1              0.000003     let g:python_highlight_operators = 0

FUNCTION  airline#extensions#fugitiveline#bufname()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim:15
Called 47 times
Total time:   0.003957
 Self time:   0.003578

count  total (s)   self (s)
   47              0.000231   if !exists('b:fugitive_name')
    1              0.000003     let b:fugitive_name = ''
    1              0.000001     try
    1              0.000011       if bufname('%') =~? '^fugitive:' && exists('*FugitiveReal')
                                    let b:fugitive_name = FugitiveReal(bufname('%'))
    1              0.000005       elseif exists('b:git_dir') && exists('*fugitive#repo')
                                    if get(b:, 'fugitive_type', '') is# 'blob'
                                      let b:fugitive_name = fugitive#repo().translate(FugitivePath(@%, ''))
                                    endif
    1              0.000004       elseif exists('b:git_dir') && !exists('*fugitive#repo')
                                    let buffer = fugitive#buffer()
                                    if buffer.type('blob')
                                      let b:fugitive_name = buffer.repo().translate(buffer.path('/'))
                                    endif
    1              0.000001       endif
                                catch
    1              0.000001     endtry
   47              0.000044   endif
                            
   47   0.000976   0.000597   let fmod = s:ModifierFlags()
   47              0.000154   if empty(b:fugitive_name)
   47              0.000551     return fnamemodify(bufname('%'), fmod)
                              else
                                return fnamemodify(b:fugitive_name, fmod). " [git]"
                              endif

FUNCTION  <SNR>58_ClearMatches()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:401
Called 1 time
Total time:   0.000029
 Self time:   0.000029

count  total (s)   self (s)
    1              0.000004   if !exists('w:colormatches')
                                return
    1              0.000001   endif
    1              0.000005   for i in values(w:colormatches)
                                try
                                  call matchdelete(i)
                                catch /.*/
                                  " matches have been cleared in other ways, e.g. user has called clearmatches()
                                endtry
    1              0.000001   endfor
    1              0.000005   unlet w:colormatches

FUNCTION  airline#util#wrap()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:42
Called 423 times
Total time:   0.006382
 Self time:   0.004964

count  total (s)   self (s)
  423   0.004003   0.002585   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  423              0.000412   endif
  423              0.000809   return a:text

FUNCTION  remote#host#IsRunning()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:49
Called 2 times
Total time:   0.000026
 Self time:   0.000026

count  total (s)   self (s)
    2              0.000010   if !has_key(s:hosts, a:name)
                                throw 'No host named "'.a:name.'" is registered'
    2              0.000002   endif
    2              0.000008   return s:hosts[a:name].channel != 0

FUNCTION  coc#client#is_running()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:211
Called 1 time
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    1              0.000004   let client = get(s:clients, a:name, v:null)
    1              0.000004   if empty(client) | return 0 | endif
    1              0.000004   if !client['running'] | return 0 | endif
                              if s:is_vim
                                let status = job_status(ch_getjob(client['channel']))
                                return status ==# 'run'
                              else
                                let chan_id = client['chan_id']
                                let [code] = jobwait([chan_id], 10)
                                return code == -1
                              endif

FUNCTION  <SNR>71_disable_builtin_highlights()
    Defined: ~/.local/share/nvim/plugged/semshi/plugin/semshi.vim:42
Called 1 time
Total time:   0.000070
 Self time:   0.000070

count  total (s)   self (s)
    1              0.000010     autocmd FileType python call s:remove_builtin_extra()
    1              0.000004     let g:python_no_builtin_highlight = 1
    1              0.000010     hi link pythonBuiltin NONE
    1              0.000005     let g:python_no_exception_highlight = 1
    1              0.000008     hi link pythonExceptions NONE
    1              0.000007     hi link pythonAttribute NONE
    1              0.000007     hi link pythonDecoratorName NONE
                            
                                " For python-syntax plugin
    1              0.000003     let g:python_highlight_class_vars = 0
    1              0.000002     let g:python_highlight_builtins = 0
    1              0.000003     let g:python_highlight_exceptions = 0
    1              0.000007     hi link pythonDottedName NONE

FUNCTION  FugitiveGitDir()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:11
Called 94 times
Total time:   0.023308
 Self time:   0.004721

count  total (s)   self (s)
   94              0.000565   if !a:0 || type(a:1) == type(0) && a:1 < 0
   47              0.000177     if exists('g:fugitive_event')
                                  return g:fugitive_event
   47              0.000048     endif
   47              0.000221     let dir = get(b:, 'git_dir', '')
   47              0.000313     if empty(dir) && (empty(bufname('')) || &buftype =~# '^\%(nofile\|acwrite\|quickfix\|prompt\)$')
   47   0.018980   0.000895       return FugitiveExtractGitDir(getcwd())
                                endif
                                return dir
   47              0.000172   elseif type(a:1) == type(0)
                                return getbufvar(a:1, 'git_dir')
   47              0.000156   elseif type(a:1) == type('')
   47   0.001373   0.000871     return substitute(s:Slash(a:1), '/$', '', '')
                              else
                                return ''
                              endif

FUNCTION  <SNR>3_assoc()
    Defined: ~/.config/nvim/autoload/plug.vim:174
Called 19 times
Total time:   0.000195
 Self time:   0.000195

count  total (s)   self (s)
   19              0.000180   let a:dict[a:key] = add(get(a:dict, a:key, []), a:val)

FUNCTION  <SNR>3_lines()
    Defined: ~/.config/nvim/autoload/plug.vim:680
Called 48 times
Total time:   0.000543
 Self time:   0.000543

count  total (s)   self (s)
   48              0.000507   return split(a:msg, "[\r\n]")

FUNCTION  <SNR>49_HighlightEOLWhitespace()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:163
Called 1 time
Total time:   0.000108
 Self time:   0.000059

count  total (s)   self (s)
    1   0.000040   0.000017         call <SID>ClearHighlighting()
    1   0.000038   0.000012         if <SID>ShouldHighlight()
    1              0.000027             let s:match_id = matchadd('ExtraWhitespace', s:eol_whitespace_pattern, 10, get(s:, 'match_id', -1))
    1              0.000001         endif

FUNCTION  <SNR>100_check_mixed_indent()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:15
Called 2 times
Total time:   0.000094
 Self time:   0.000094

count  total (s)   self (s)
    2              0.000016   let indent_algo = get(g:, 'airline#extensions#whitespace#mixed_indent_algo', 0)
    2              0.000005   if indent_algo == 1
                                " [<tab>]<space><tab>
                                " spaces before or between tabs are not allowed
                                let t_s_t = '(^\t* +\t\s*\S)'
                                " <tab>(<space> x count)
                                " count of spaces at the end of tabs should be less than tabstop value
                                let t_l_s = '(^\t+ {' . &ts . ',}' . '\S)'
                                return search('\v' . t_s_t . '|' . t_l_s, 'nw')
    2              0.000005   elseif indent_algo == 2
                                return search('\v(^\t* +\t\s*\S)', 'nw')
    2              0.000002   else
    2              0.000032     return search('\v(^\t+ +)|(^ +\t+)', 'nw')
                              endif

FUNCTION  <SNR>107_get_seperator()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:158
Called 12 times
Total time:   0.039066
 Self time:   0.000396

count  total (s)   self (s)
   12   0.005599   0.000177   if airline#builder#should_change_group(a:prev_group, a:group)
   10   0.033431   0.000182     return s:get_transitioned_seperator(a:self, a:prev_group, a:group, a:side)
    2              0.000001   else
    2              0.000008     return a:side ? a:self._context.left_alt_sep : a:self._context.right_alt_sep
                              endif

FUNCTION  <SNR>95_get_array()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:56
Called 200 times
Total time:   0.002996
 Self time:   0.002996

count  total (s)   self (s)
  200              0.001176   let opts=empty(a:opts) ? '' : join(a:opts, ',')
  200              0.001584   return g:airline_gui_mode ==# 'gui' ? [ a:fg, a:bg, '', '', opts ] : [ '', '', a:fg, a:bg, opts ]

FUNCTION  <SNR>60_CursorHoldUpdate()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:377
Called 1 time
Total time:   0.000017
 Self time:   0.000017

count  total (s)   self (s)
    1              0.000004   if g:NERDTreeUpdateOnCursorHold != 1
                                return
    1              0.000001   endif
                            
    1              0.000006   if !exists('g:NERDTree') || !g:NERDTree.IsOpen()
    1              0.000001     return
                              endif
                            
                              " Do not update when a special buffer is selected
                              if !empty(&l:buftype)
                                return
                              endif
                            
                              " winnr need to make focus go to opened file
                              " CursorToTreeWin needed to avoid error on opening file
                              let l:winnr = winnr()
                              let l:altwinnr = winnr('#')
                            
                              call g:NERDTree.CursorToTreeWin()
                              call b:NERDTree.root.refreshFlags()
                              call NERDTreeRender()
                            
                              exec l:altwinnr . 'wincmd w'
                              exec l:winnr . 'wincmd w'

FUNCTION  airline#parts#define_function()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:19
Called 14 times
Total time:   0.000676
 Self time:   0.000242

count  total (s)   self (s)
   14   0.000661   0.000227   call airline#parts#define(a:key, { 'function': a:name })

FUNCTION  airline#builder#get_prev_group()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:37
Called 18 times
Total time:   0.000325
 Self time:   0.000325

count  total (s)   self (s)
   18              0.000060   let x = a:i - 1
   20              0.000041   while x >= 0
   18              0.000061     let group = a:sections[x][0]
   18              0.000057     if group != '' && group != '|'
   16              0.000031       return group
    2              0.000002     endif
    2              0.000004     let x = x - 1
    4              0.000005   endwhile
    2              0.000003   return ''

FUNCTION  remote#define#FunctionOnHost()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:132
Called 8 times
Total time:   0.000697
 Self time:   0.000497

count  total (s)   self (s)
    8   0.000315   0.000115   let group = s:GetNextAutocmdGroup()
    8              0.000368   exe 'autocmd! '.group.' FuncUndefined '.a:name .' call remote#define#FunctionBootstrap("'.a:host.'"' .                                 ', "'.a:method.'"' .                                 ', '.string(a:sync) .                                 ', "'.a:name.'"' .                                 ', '.string(a:opts) .                                 ', "'.group.'"' .                                 ')'

FUNCTION  airline#extensions#whitespace#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:173
Called 1 time
Total time:   0.000482
 Self time:   0.000414

count  total (s)   self (s)
    1   0.000091   0.000023   call airline#parts#define_function('whitespace', 'airline#extensions#whitespace#check')
                            
    1              0.000004   unlet! b:airline_whitespace_check
    1              0.000009   augroup airline_whitespace
    1              0.000350     autocmd!
    1              0.000021     autocmd CursorHold,BufWritePost * call <sid>ws_refresh()
    1              0.000002   augroup END

FUNCTION  <SNR>82_AddEval()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:274
Called 1 time
Total time:   0.000024
 Self time:   0.000024

count  total (s)   self (s)
    1              0.000006   if has_key(a:opts, 'eval')
                                if type(a:opts.eval) != type('') || a:opts.eval == ''
                                  throw "Eval option must be a non-empty string"
                                endif
                                " evaluate an expression and pass as argument
                                call add(a:rpcargs, 'eval("'.escape(a:opts.eval, '"').'")')
    1              0.000001   endif

FUNCTION  <SNR>89_SetConcealOption()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:96
Called 1 time
Total time:   0.000055
 Self time:   0.000055

count  total (s)   self (s)
    1              0.000003     if !g:indentLine_setConceal
                                    return
    1              0.000001     endif
    1              0.000006     if !(exists("b:indentLine_ConcealOptionSet") && b:indentLine_ConcealOptionSet)
    1              0.000004         let b:indentLine_ConcealOptionSet = 1
    1              0.000006         let b:indentLine_original_concealcursor = &l:concealcursor
    1              0.000005         let b:indentLine_original_conceallevel = &l:conceallevel
    1              0.000013         let &l:concealcursor = exists("g:indentLine_concealcursor") ? g:indentLine_concealcursor : "inc"
    1              0.000010         let &l:conceallevel = exists("g:indentLine_conceallevel") ? g:indentLine_conceallevel : "2"
    1              0.000001     endif

FUNCTION  <SNR>90_is_excluded_window()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:110
Called 2 times
Total time:   0.000158
 Self time:   0.000158

count  total (s)   self (s)
    2              0.000008   for matchft in g:airline_exclude_filetypes
                                if matchft ==# &ft
                                  return 1
                                endif
    2              0.000003   endfor
                            
    8              0.000016   for matchw in g:airline_exclude_filenames
    6              0.000066     if matchstr(expand('%'), matchw) ==# matchw
                                  return 1
    6              0.000005     endif
    8              0.000008   endfor
                            
    2              0.000007   if g:airline_exclude_preview && &previewwindow
                                return 1
    2              0.000002   endif
                            
    2              0.000003   return 0

FUNCTION  airline#util#getwinvar()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:82
Called 36 times
Total time:   0.000221
 Self time:   0.000221

count  total (s)   self (s)
   36              0.000192     return getwinvar(a:winnr, a:key, a:def)

FUNCTION  airline#extensions#whitespace#check()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:62
Called 47 times
Total time:   0.013202
 Self time:   0.010203

count  total (s)   self (s)
   47              0.000330   let max_lines = get(g:, 'airline#extensions#whitespace#max_lines', 20000)
   47              0.000496   if &readonly || !&modifiable || !s:enabled || line('$') > max_lines || get(b:, 'airline_whitespace_disabled', 0)
                                return ''
   47              0.000045   endif
   47              0.000838   let skip_check_ft = extend(s:skip_check_ft, get(g:, 'airline#extensions#whitespace#skip_indent_check_ft', {}), 'force')
                            
   47              0.000226   if !exists('b:airline_whitespace_check')
    2              0.000008     let b:airline_whitespace_check = ''
    2              0.000020     let checks = get(b:, 'airline_whitespace_checks', get(g:, 'airline#extensions#whitespace#checks', s:default_checks))
                            
    2              0.000005     let trailing = 0
    2              0.000004     let check = 'trailing'
    2              0.000037     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2              0.000003       try
    2              0.000010         let regexp = get(g:, 'airline#extensions#whitespace#trailing_regexp', '\s$')
    2              0.000027         let trailing = search(regexp, 'nw')
                                  catch
                                    call airline#util#warning(printf('Whitespace: error occurred evaluating "%s"', regexp))
                                    echomsg v:exception
                                    return ''
    2              0.000003       endtry
    2              0.000002     endif
                            
    2              0.000004     let mixed = 0
    2              0.000004     let check = 'indent'
    2              0.000026     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2   0.000132   0.000038       let mixed = s:check_mixed_indent()
    2              0.000002     endif
                            
    2              0.000006     let mixed_file = ''
    2              0.000005     let check = 'mixed-indent-file'
    2              0.000026     if index(checks, check) > -1 && index(get(skip_check_ft, &ft, []), check) < 0
    2   0.000150   0.000037       let mixed_file = s:check_mixed_indent_file()
    2              0.000002     endif
                            
    2              0.000004     let long = 0
    2              0.000009     if index(checks, 'long') > -1 && &tw > 0
                                  let long = search('\%>'.&tw.'v.\+', 'nw')
    2              0.000002     endif
                            
    2              0.000005     let conflicts = 0
    2              0.000007     if index(checks, 'conflicts') > -1
    2   0.000159   0.000031       let conflicts = s:conflict_marker()
    2              0.000002     endif
                            
    2              0.000016     if trailing != 0 || mixed != 0 || long != 0 || !empty(mixed_file) || conflicts != 0
                                  let b:airline_whitespace_check = s:symbol
                                  if strlen(s:symbol) > 0
                                    let space = (g:airline_symbols.space)
                                  else
                                    let space = ''
                                  endif
                            
                                  if s:show_message
                                    if trailing != 0
                                      let trailing_fmt = get(g:, 'airline#extensions#whitespace#trailing_format', '[%s]trailing')
                                      let b:airline_whitespace_check .= space.printf(trailing_fmt, trailing)
                                    endif
                                    if mixed != 0
                                      let mixed_indent_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_format', '[%s]mixed-indent')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_fmt, mixed)
                                    endif
                                    if long != 0
                                      let long_fmt = get(g:, 'airline#extensions#whitespace#long_format', '[%s]long')
                                      let b:airline_whitespace_check .= space.printf(long_fmt, long)
                                    endif
                                    if !empty(mixed_file)
                                      let mixed_indent_file_fmt = get(g:, 'airline#extensions#whitespace#mixed_indent_file_format', '[%s]mix-indent-file')
                                      let b:airline_whitespace_check .= space.printf(mixed_indent_file_fmt, mixed_file)
                                    endif
                                    if conflicts != 0
                                      let conflicts_fmt = get(g:, 'airline#extensions#whitespace#conflicts_format', '[%s]conflicts')
                                      let b:airline_whitespace_check .= space.printf(conflicts_fmt, conflicts)
                                    endif
                                  endif
    2              0.000002     endif
   47              0.000045   endif
   47   0.003359   0.000695   return airline#util#shorten(b:airline_whitespace_check, 120, 9)

FUNCTION  provider#pythonx#Require()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:8
Called 2 times
Total time:   0.337960
 Self time:   0.000711

count  total (s)   self (s)
    2              0.000011   let ver = (a:host.orig_name ==# 'python') ? 2 : 3
                            
                              " Python host arguments
    2   0.000038   0.000030   let prog = (ver == '2' ?  provider#python#Prog() : provider#python3#Prog())
    2              0.000014   let args = [prog, '-c', 'import sys; sys.path = list(filter(lambda x: x != "", sys.path)); import neovim; neovim.start_host()']
                            
                            
                              " Collect registered Python plugins into args
    2   0.000338   0.000032   let python_plugins = remote#host#PluginsForHost(a:host.name)
    4              0.000013   for plugin in python_plugins
    2              0.000012     call add(args, plugin.path)
    4              0.000006   endfor
                            
    2   0.337500   0.000564   return provider#Poll(args, a:host.orig_name, '$NVIM_PYTHON_LOG_FILE')

FUNCTION  <SNR>67_variables()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:315
Called 1 time
Total time:   0.000231
 Self time:   0.000231

count  total (s)   self (s)
    1              0.000013   let info = getbufinfo({'bufnr':a:bufnr, 'variables': 1})
    1              0.000018   let variables = copy(info[0]['variables'])
   16              0.000036   for key in keys(variables)
   15              0.000067     if key !~# '\v^coc'
   15              0.000048       unlet variables[key]
   15              0.000015     endif
   16              0.000017   endfor
    1              0.000003   return variables

FUNCTION  airline#themes#get_highlight2()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/themes.vim:35
Called 27 times
Total time:   0.005834
 Self time:   0.000605

count  total (s)   self (s)
   27   0.005813   0.000584   return call('airline#highlighter#get_highlight2', [a:fg, a:bg] + a:000)

FUNCTION  coc#_watch()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc.vim:149
Called 1 time
Total time:   0.000044
 Self time:   0.000044

count  total (s)   self (s)
    1              0.000012   if s:is_vim | return | endif
    1              0.000005   if index(s:watched_keys, a:key) == -1
    1              0.000004     call add(s:watched_keys, a:key)
    1              0.000019     call dictwatcheradd(g:, a:key, function('s:GlobalChange'))
    1              0.000001   endif

FUNCTION  <SNR>89_DisableOnDiff()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:123
Called 1 time
Total time:   0.000012
 Self time:   0.000012

count  total (s)   self (s)
    1              0.000003     if &diff
                                    call s:IndentLinesDisable()
                                    call s:LeadingSpaceDisable()
    1              0.000001     endif

FUNCTION  <SNR>110_Tree()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:279
Called 47 times
Total time:   0.005552
 Self time:   0.000627

count  total (s)   self (s)
   47   0.005522   0.000597   return a:0 ? FugitiveWorkTree(a:1) : FugitiveWorkTree()

FUNCTION  <SNR>98_ModifierFlags()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim:11
Called 47 times
Total time:   0.000379
 Self time:   0.000379

count  total (s)   self (s)
   47              0.000313   return (exists("+autochdir") && &autochdir) ? ':p' : ':.'

FUNCTION  airline#themes#patch()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/themes.vim:39
Called 1 time
Total time:   0.000650
 Self time:   0.000650

count  total (s)   self (s)
   12              0.000040   for mode in keys(a:palette)
   11              0.000023     if mode == 'accents'
    1              0.000002       continue
   10              0.000007     endif
   10              0.000041     if !has_key(a:palette[mode], 'airline_warning')
    2              0.000014       let a:palette[mode]['airline_warning'] = [ '#000000', '#df5f00', 232, 166 ]
   10              0.000007     endif
   10              0.000045     if !has_key(a:palette[mode], 'airline_error')
    2              0.000011       let a:palette[mode]['airline_error'] = [ '#000000', '#990000', 232, 160 ]
   10              0.000008     endif
   10              0.000039     if !has_key(a:palette[mode], 'airline_term')
    7              0.000036       let a:palette[mode]['airline_term'] = [ '#9cffd3', '#202020', 85, 232]
   10              0.000008     endif
   11              0.000011   endfor
                            
    1              0.000007   let a:palette.accents = get(a:palette, 'accents', {})
    1              0.000004   let a:palette.accents.none = [ '', '', '', '', '' ]
    1              0.000004   let a:palette.accents.bold = [ '', '', '', '', 'bold' ]
    1              0.000004   let a:palette.accents.italic = [ '', '', '', '', 'italic' ]
                            
    1              0.000004   if !has_key(a:palette.accents, 'red')
                                let a:palette.accents.red = [ '#ff0000' , '' , 160 , '' ]
    1              0.000001   endif
    1              0.000003   if !has_key(a:palette.accents, 'green')
    1              0.000005     let a:palette.accents.green = [ '#008700' , '' , 22  , '' ]
    1              0.000001   endif
    1              0.000003   if !has_key(a:palette.accents, 'blue')
    1              0.000004     let a:palette.accents.blue = [ '#005fff' , '' , 27  , '' ]
    1              0.000001   endif
    1              0.000003   if !has_key(a:palette.accents, 'yellow')
    1              0.000004     let a:palette.accents.yellow = [ '#dfff00' , '' , 190 , '' ]
    1              0.000001   endif
    1              0.000003   if !has_key(a:palette.accents, 'orange')
    1              0.000003     let a:palette.accents.orange = [ '#df5f00' , '' , 166 , '' ]
    1              0.000001   endif
    1              0.000003   if !has_key(a:palette.accents, 'purple')
    1              0.000004     let a:palette.accents.purple = [ '#af00df' , '' , 128 , '' ]
    1              0.000001   endif

FUNCTION  <SNR>3_loaded_names()
    Defined: ~/.config/nvim/autoload/plug.vim:297
Called 1 time
Total time:   0.000096
 Self time:   0.000096

count  total (s)   self (s)
    1              0.000096   return filter(copy(g:plugs_order), 'get(s:loaded, v:val, 0)')

FUNCTION  <SNR>53_check_defined()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/init.vim:6
Called 18 times
Total time:   0.000265
 Self time:   0.000265

count  total (s)   self (s)
   18              0.000073   if !exists(a:variable)
   14              0.000146     let {a:variable} = a:default
   18              0.000017   endif

FUNCTION  airline#extensions#hunks#get_raw_hunks()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:86
Called 47 times
Total time:   0.152099
 Self time:   0.002489

count  total (s)   self (s)
   47              0.000327   if !exists('b:source_func') || get(b:, 'source_func', '') is# 's:get_hunks_empty'
    1              0.000005     if get(g:, 'loaded_signify') && sy#buffer_is_active()
                                  let b:source_func = 's:get_hunks_signify'
    1              0.000005     elseif exists('*GitGutterGetHunkSummary')
                                  let b:source_func = 's:get_hunks_gitgutter'
    1              0.000004     elseif exists('*changes#GetStats')
                                  let b:source_func = 's:get_hunks_changes'
    1              0.000005     elseif exists('*quickfixsigns#vcsdiff#GetHunkSummary')
                                  let b:source_func = 'quickfixsigns#vcsdiff#GetHunkSummary'
    1   0.149073   0.000016     elseif s:coc_git_enabled()
    1              0.000004       let b:source_func = 's:get_hunks_coc'
                                else
                                  let b:source_func = 's:get_hunks_empty'
    1              0.000001     endif
   47              0.000038   endif
   47   0.001325   0.000773   return {b:source_func}()

FUNCTION  remote#define#CommandOnHost()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:1
Called 1 time
Total time:   0.000367
 Self time:   0.000163

count  total (s)   self (s)
    1              0.000003   let prefix = ''
                            
    1              0.000004   if has_key(a:opts, 'range')
                                if a:opts.range == '' || a:opts.range == '%'
                                  " -range or -range=%, pass the line range in a list
                                  let prefix = '<line1>,<line2>'
                                elseif matchstr(a:opts.range, '\d') != ''
                                  " -range=N, pass the count
                                  let prefix = '<count>'
                                endif
    1              0.000004   elseif has_key(a:opts, 'count')
                                let prefix = '<count>'
    1              0.000001   endif
                            
    1              0.000005   let forward_args = [prefix.a:name]
                            
    1              0.000003   if has_key(a:opts, 'bang')
                                call add(forward_args, '<bang>')
    1              0.000001   endif
                            
    1              0.000003   if has_key(a:opts, 'register')
                                call add(forward_args, ' <register>')
    1              0.000001   endif
                            
    1              0.000003   if has_key(a:opts, 'nargs')
    1              0.000005     call add(forward_args, ' <args>')
    1              0.000001   endif
                            
    1   0.000304   0.000100   exe s:GetCommandPrefix(a:name, a:opts) .' call remote#define#CommandBootstrap("'.a:host.'"' .                                ', "'.a:method.'"' .                                ', '.string(a:sync) .                                ', "'.a:name.'"' .                                ', '.string(a:opts).'' .                                ', "'.join(forward_args, '').'"' .                                ')'

FUNCTION  <SNR>3_split_rtp()
    Defined: ~/.config/nvim/autoload/plug.vim:2512
Called 2 times
Total time:   0.000348
 Self time:   0.000348

count  total (s)   self (s)
    2              0.000344   return split(&rtp, '\\\@<!,')

FUNCTION  <SNR>110_Slash()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:104
Called 141 times
Total time:   0.001596
 Self time:   0.001596

count  total (s)   self (s)
  141              0.000597   if exists('+shellslash')
                                return tr(a:path, '\', '/')
  141              0.000145   else
  141              0.000275     return a:path
                              endif

FUNCTION  airline#highlighter#load_theme()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:205
Called 1 time
Total time:   0.100856
 Self time:   0.000093

count  total (s)   self (s)
    1              0.000003   if pumvisible()
                                return
    1              0.000001   endif
    1              0.000012   for winnr in filter(range(1, winnr('$')), 'v:val != winnr()')
                                call airline#highlighter#highlight_modified_inactive(winbufnr(winnr))
    1              0.000001   endfor
    1   0.053865   0.000022   call airline#highlighter#highlight(['inactive'])
    1              0.000011   if getbufvar( bufnr('%'), '&modified'  )
                                call airline#highlighter#highlight(['normal', 'modified'])
    1              0.000001   else
    1   0.046946   0.000027     call airline#highlighter#highlight(['normal'])
    1              0.000001   endif

FUNCTION  airline#util#themes()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:180
Called 1 time
Total time:   0.024475
 Self time:   0.024475

count  total (s)   self (s)
    1              0.024005   let files = split(globpath(&rtp, 'autoload/airline/themes/'.a:match.'*.vim'), "\n")
    1              0.000467   return sort(map(files, 'fnamemodify(v:val, ":t:r")') + ('random' =~ a:match ? ['random'] : []))

FUNCTION  <SNR>60_setDictionaries()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:157
Called 1 time
Total time:   0.002622
 Self time:   0.002622

count  total (s)   self (s)
                            
    1              0.000128   let s:file_node_extensions = { 'styl'     : '', 'sass'     : '', 'scss'     : '', 'htm'      : '', 'html'     : '', 'slim'     : '', 'ejs'      : '', 'css'      : '', 'less'     : '', 'md'       : '', 'mdx'      : '', 'markdown' : '', 'rmd'      : '', 'json'     : '', 'js'       : '', 'mjs'      : '', 'jsx'      : '', 'rb'       : '', 'php'      : '', 'py'       : '', 'pyc'      : '', 'pyo'      : '', 'pyd'      : '', 'coffee'   : '', 'mustache' : '', 'hbs'      : '', 'conf'     : '', 'ini'      : '', 'yml'      : '', 'yaml'     : '', 'toml'     : '', 'bat'      : '', 'jpg'      : '', 'jpeg'     : '', 'bmp'      : '', 'png'      : '', 'webp'     : '', 'gif'      : '', 'ico'      : '', 'twig'     : '', 'cpp'      : '', 'c++'      : '', 'cxx'      : '', 'cc'       : '', 'cp'       : '', 'c'        : '', 'cs'       : '', 'h'        : '', 'hh'       : '', 'hpp'      : '', 'hxx'      : '', 'hs'       : '', 'lhs'      : '', 'lua'      : '', 'java'     : '', 'sh'       : '', 'fish'     : '', 'bash'     : '', 'zsh'      : '', 'ksh'      : '', 'csh'      : '', 'awk'      : '', 'ps1'      : '', 'ml'       : 'λ', 'mli'      : 'λ', 'diff'     : '', 'db'       : '', 'sql'      : '', 'dump'     : '', 'clj'      : '', 'cljc'     : '', 'cljs'     : '', 'edn'      : '', 'scala'    : '', 'go'       : '', 'dart'     : '', 'xul'      : '', 'sln'      : '', 'suo'      : '', 'pl'       : '', 'pm'       : '', 't'        : '', 'rss'      : '', 'f#'       : '', 'fsscript' : '', 'fsx'      : '', 'fs'       : '', 'fsi'      : '', 'rs'       : '', 'rlib'     : '', 'd'        : '', 'erl'      : '', 'hrl'      : '', 'ex'       : '', 'exs'      : '', 'eex'      : '', 'leex'     : '', 'vim'      : '', 'ai'       : '', 'psd'      : '', 'psb'      : '', 'ts'       : '', 'tsx'      : '', 'jl'       : '', 'pp'       : '', 'vue'      : '﵂', 'elm'      : '', 'swift'    : '', 'xcplayground' : ''}
                            
    1              0.000046   let s:file_node_exact_matches = { 'exact-match-case-sensitive-1.txt' : '1', 'exact-match-case-sensitive-2'     : '2', 'gruntfile.coffee'                 : '', 'gruntfile.js'                     : '', 'gruntfile.ls'                     : '', 'gulpfile.coffee'                  : '', 'gulpfile.js'                      : '', 'gulpfile.ls'                      : '', 'mix.lock'                         : '', 'dropbox'                          : '', '.ds_store'                        : '', '.gitconfig'                       : '', '.gitignore'                       : '', '.gitlab-ci.yml'                   : '', '.bashrc'                          : '', '.zshrc'                           : '', '.vimrc'                           : '', '.gvimrc'                          : '', '_vimrc'                           : '', '_gvimrc'                          : '', '.bashprofile'                     : '', 'favicon.ico'                      : '', 'license'                          : '', 'node_modules'                     : '', 'react.jsx'                        : '', 'procfile'                         : '', 'dockerfile'                       : '', 'docker-compose.yml'               : '', 'makefile'                         : '', 'cmakelists.txt'                   : ''}
                            
    1              0.000017   let s:file_node_pattern_matches = { '.*jquery.*\.js$'       : '', '.*angular.*\.js$'      : '', '.*backbone.*\.js$'     : '', '.*require.*\.js$'      : '', '.*materialize.*\.js$'  : '', '.*materialize.*\.css$' : '', '.*mootools.*\.js$'     : '', '.*vimrc.*'             : '', 'Vagrantfile$'          : ''}
                            
    1              0.000007   if !exists('g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols')
    1              0.000005     let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
    1              0.000001   endif
                            
    1              0.000005   if !exists('g:WebDevIconsUnicodeDecorateFileNodesExactSymbols')
                                " do not remove: exact-match-case-sensitive-*
    1              0.000004     let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}
    1              0.000001   endif
                            
    1              0.000005   if !exists('g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols')
    1              0.000005     let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}
    1              0.000001   endif
                            
                              " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)
  110              0.000377   for [key, val] in items(s:file_node_extensions)
  109              0.000499     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)
  109              0.000551       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val
  109              0.000136     endif
  110              0.000111   endfor
                            
                              " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)
   31              0.000097   for [key, val] in items(s:file_node_exact_matches)
   30              0.000139     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)
   30              0.000152       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val
   30              0.000029     endif
   31              0.000032   endfor
                            
                              " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)
   10              0.000032   for [key, val] in items(s:file_node_pattern_matches)
    9              0.000041     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)
    9              0.000058       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val
    9              0.000008     endif
   10              0.000010   endfor
                            

FUNCTION  airline#update_statusline_inactive()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:156
Called 2 times
Total time:   0.000208
 Self time:   0.000099

count  total (s)   self (s)
    2   0.000130   0.000021   if airline#util#stl_disabled(winnr())
                                return
    2              0.000002   endif
    2              0.000006   for nr in a:range
                                if airline#util#stl_disabled(nr)
                                  continue
                                endif
                                call setwinvar(nr, 'airline_active', 0)
                                let context = { 'winnr': nr, 'active': 0, 'bufnr': winbufnr(nr) }
                                if get(g:, 'airline_inactive_alt_sep', 0)
                                  call extend(context, { 'left_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_alt_sep }, 'keep')
                                endif
                                call s:invoke_funcrefs(context, s:inactive_funcrefs)
    2              0.000005   endfor

FUNCTION  remote#host#RegisterClone()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:19
Called 1 time
Total time:   0.000039
 Self time:   0.000039

count  total (s)   self (s)
    1              0.000008   if !has_key(s:hosts, a:orig_name)
                                throw 'No host named "'.a:orig_name.'" is registered'
    1              0.000001   endif
    1              0.000010   let Factory = s:hosts[a:orig_name].factory
    1              0.000012   let s:hosts[a:name] = { 'factory': Factory, 'channel': 0, 'initialized': 0, 'orig_name': a:orig_name }

FUNCTION  <SNR>65_AddAnsiGroups()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:112
Called 1 time
Total time:   0.010894
 Self time:   0.010894

count  total (s)   self (s)
    1              0.000007   let color_map = {}
    1              0.000008   let colors = ['#282828', '#cc241d', '#98971a', '#d79921', '#458588', '#b16286', '#689d6a', '#a89984', '#928374']
    1              0.000007   let names = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'grey']
   10              0.000024   for i in range(0, len(names) - 1)
    9              0.000027     let name = names[i]
    9              0.000034     if exists('g:terminal_ansi_colors')
                                  let color_map[name] = get(g:terminal_ansi_colors, i, colors[i])
    9              0.000008     else
    9              0.000070       let color_map[name] = get(g:, 'terminal_color_'.i, colors[i])
    9              0.000009     endif
   10              0.000011   endfor
   10              0.000024   for name in keys(color_map)
    9              0.000065     let foreground = toupper(name[0]).name[1:]
    9              0.000035     let foregroundColor = color_map[name]
   90              0.000193     for key in keys(color_map)
   81              0.000456       let background = toupper(key[0]).key[1:]
   81              0.000284       let backgroundColor = color_map[key]
   81              0.008904       exe 'hi default CocList'.foreground.background.' guifg='.foregroundColor.' guibg='.backgroundColor
   90              0.000102     endfor
    9              0.000010     try
    9              0.000162       exe 'hi default CocListFg'.foreground. ' guifg='.foregroundColor. ' ctermfg='.foreground
    9              0.000158       exe 'hi default CocListBg'.foreground. ' guibg='.foregroundColor. ' ctermbg='.foreground
                                catch /.*/
                                  " ignore invalid color
    9              0.000033     endtry
   10              0.000012   endfor

FUNCTION  airline#extensions#load()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:134
Called 1 time
Total time:   0.046864
 Self time:   0.025415

count  total (s)   self (s)
    1              0.000006   let s:loaded_ext = []
                            
    1              0.000006   if exists('g:airline_extensions')
                                for ext in g:airline_extensions
                                  try
                                    call airline#extensions#{ext}#init(s:ext)
                                  catch /^Vim\%((\a\+)\)\=:E117/	" E117, function does not exist
                                    call airline#util#warning("Extension '".ext."' not installed, ignoring!")
                                    continue
                                  endtry
                                  call add(s:loaded_ext, ext)
                                endfor
                                return
    1              0.000001   endif
                            
    1   0.000568   0.000234   call airline#extensions#quickfix#init(s:ext)
    1              0.000004   call add(s:loaded_ext, 'quickfix')
                            
    1              0.000005   if get(g:, 'loaded_unite', 0)
                                call airline#extensions#unite#init(s:ext)
                                call add(s:loaded_ext, 'unite')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'loaded_denite', 0)
                                call airline#extensions#denite#init(s:ext)
                                call add(s:loaded_ext, 'denite')
    1              0.000001   endif
                            
    1              0.000006   if get(g:, 'loaded_gina', 0) && get(g:, 'airline#extensions#gina#enabled', 1)
                                call airline#extensions#gina#init(s:ext)
                                call add(s:loaded_ext, 'gina')
    1              0.000001   endif
                            
    1              0.000010   if exists(':NetrwSettings')
    1   0.000448   0.000220     call airline#extensions#netrw#init(s:ext)
    1              0.000004     call add(s:loaded_ext, 'netrw')
    1              0.000001   endif
                            
    1              0.000018   if (has("terminal") || has('nvim')) && get(g:, 'airline#extensions#term#enabled', 1)
    1   0.002550   0.000223     call airline#extensions#term#init(s:ext)
    1              0.000004     call add(s:loaded_ext, 'term')
    1              0.000001   endif
                            
    1              0.000006   if get(g:, 'airline#extensions#ycm#enabled', 0) && exists('g:loaded_youcompleteme')
                                call airline#extensions#ycm#init(s:ext)
                                call add(s:loaded_ext, 'ycm')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'loaded_vimfiler', 0)
                                let g:vimfiler_force_overwrite_statusline = 0
    1              0.000001   endif
                            
    1              0.000003   if get(g:, 'loaded_ctrlp', 0)
                                call airline#extensions#ctrlp#init(s:ext)
                                call add(s:loaded_ext, 'ctrlp')
    1              0.000001   endif
                            
    1              0.000003   if get(g:, 'loaded_localsearch', 0)
                                call airline#extensions#localsearch#init(s:ext)
                                call add(s:loaded_ext, 'localsearch')
    1              0.000001   endif
                            
    1              0.000003   if get(g:, 'CtrlSpaceLoaded', 0)
                                call airline#extensions#ctrlspace#init(s:ext)
                                call add(s:loaded_ext, 'ctrlspace')
    1              0.000001   endif
                            
    1              0.000003   if get(g:, 'command_t_loaded', 0)
                                call airline#extensions#commandt#init(s:ext)
                                call add(s:loaded_ext, 'commandt')
    1              0.000001   endif
                            
    1              0.000010   if exists(':UndotreeToggle')
                                call airline#extensions#undotree#init(s:ext)
                                call add(s:loaded_ext, 'undotree')
    1              0.000001   endif
                            
    1              0.000017   if get(g:, 'airline#extensions#hunks#enabled', 1) && (exists('g:loaded_signify') || exists('g:loaded_gitgutter') || exists('g:loaded_changes') || exists('g:loaded_quickfixsigns') || exists(':CocCommand'))
    1   0.000654   0.000204     call airline#extensions#hunks#init(s:ext)
    1              0.000004     call add(s:loaded_ext, 'hunks')
    1              0.000001   endif
                            
    1              0.000007   if get(g:, 'airline#extensions#vimagit#enabled', 1) && (exists('g:loaded_magit'))
                                call airline#extensions#vimagit#init(s:ext)
                                call add(s:loaded_ext, 'vimagit')
    1              0.000001   endif
                            
    1              0.000008   if get(g:, 'airline#extensions#tagbar#enabled', 1) && exists(':TagbarToggle')
                                call airline#extensions#tagbar#init(s:ext)
                                call add(s:loaded_ext, 'tagbar')
    1              0.000001   endif
                            
    1              0.000007   if get(g:, 'airline#extensions#vista#enabled', 1) && exists(':Vista')
                                call airline#extensions#vista#init(s:ext)
                                call add(s:loaded_ext, 'vista')
    1              0.000001   endif
                            
    1              0.000007   if get(g:, 'airline#extensions#bookmark#enabled', 1) && exists(':BookmarkToggle')
                                call airline#extensions#bookmark#init(s:ext)
                                call add(s:loaded_ext, 'bookmark')
    1              0.000001   endif
                            
    1              0.000009   if get(g:, 'airline#extensions#csv#enabled', 1) && (get(g:, 'loaded_csv', 0) || exists(':Table'))
                                call airline#extensions#csv#init(s:ext)
                                call add(s:loaded_ext, 'csv')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'airline#extensions#zoomwintab#enabled', 0)
                                call airline#extensions#zoomwintab#init(s:ext)
                                call add(s:loaded_ext, 'zoomwintab')
    1              0.000001   endif
                            
    1              0.000004   if exists(':VimShell')
                                let s:filetype_regex_overrides['^int-'] = ['vimshell','%{substitute(&ft, "int-", "", "")}']
    1              0.000001   endif
                            
    1   0.000039   0.000021   if get(g:, 'airline#extensions#branch#enabled', 1) && ( airline#util#has_fugitive() || airline#util#has_gina() || airline#util#has_lawrencium() || airline#util#has_vcscommand() || airline#util#has_custom_scm())
    1   0.001038   0.000202     call airline#extensions#branch#init(s:ext)
    1              0.000005     call add(s:loaded_ext, 'branch')
    1              0.000001   endif
                            
    1              0.000009   if get(g:, 'airline#extensions#bufferline#enabled', 1) && exists('*bufferline#get_status_string')
                                call airline#extensions#bufferline#init(s:ext)
                                call add(s:loaded_ext, 'bufferline')
    1              0.000001   endif
                            
    1   0.000036   0.000022   if get(g:, 'airline#extensions#fugitiveline#enabled', 1) && airline#util#has_fugitive() && index(s:loaded_ext, 'bufferline') == -1
    1   0.000484   0.000218     call airline#extensions#fugitiveline#init(s:ext)
    1              0.000004     call add(s:loaded_ext, 'fugitiveline')
    1              0.000001   endif
                            
                              " NOTE: This means that if both virtualenv and poetv are enabled and
                              " available, poetv silently takes precedence and the virtualenv
                              " extension won't be initialized. Since both extensions currently just
                              " add a virtualenv identifier section to the airline, this seems
                              " acceptable.
    1              0.000010   if (get(g:, 'airline#extensions#poetv#enabled', 1) && (exists(':PoetvActivate')))
                                call airline#extensions#poetv#init(s:ext)
                                call add(s:loaded_ext, 'poetv')
    1              0.000008   elseif (get(g:, 'airline#extensions#virtualenv#enabled', 1) && (exists(':VirtualEnvList')))
                                call airline#extensions#virtualenv#init(s:ext)
                                call add(s:loaded_ext, 'virtualenv')
    1              0.000014   elseif (get(g:, 'airline#extensions#poetv#enabled', 1) && (isdirectory($VIRTUAL_ENV)))
                                call airline#extensions#poetv#init(s:ext)
                                call add(s:loaded_ext, 'poetv')
    1              0.000001   endif
                            
    1              0.000007   if (get(g:, 'airline#extensions#eclim#enabled', 1) && exists(':ProjectCreate'))
                                call airline#extensions#eclim#init(s:ext)
                                call add(s:loaded_ext, 'eclim')
    1              0.000001   endif
                            
    1              0.000005   if get(g:, 'airline#extensions#syntastic#enabled', 1) && exists(':SyntasticCheck')
                                call airline#extensions#syntastic#init(s:ext)
                                call add(s:loaded_ext, 'syntastic')
    1              0.000001   endif
                            
    1              0.000007   if (get(g:, 'airline#extensions#ale#enabled', 1) && exists(':ALELint'))
                                call airline#extensions#ale#init(s:ext)
                                call add(s:loaded_ext, 'ale')
    1              0.000001   endif
                            
    1              0.000007   if (get(g:, 'airline#extensions#lsp#enabled', 1) && exists(':LspDeclaration'))
                                call airline#extensions#lsp#init(s:ext)
                                call add(s:loaded_ext, 'lsp')
    1              0.000001   endif
                            
    1              0.000006   if (get(g:, 'airline#extensions#coc#enabled', 1) && exists(':CocCommand'))
    1   0.000583   0.000199     call airline#extensions#coc#init(s:ext)
    1              0.000005     call add(s:loaded_ext, 'coc')
    1              0.000001   endif
                            
    1              0.000010   if (get(g:, 'airline#extensions#languageclient#enabled', 1) && exists(':LanguageClientStart'))
                                call airline#extensions#languageclient#init(s:ext)
                                call add(s:loaded_ext, 'languageclient')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'airline#extensions#whitespace#enabled', 1)
    1   0.011140   0.000226     call airline#extensions#whitespace#init(s:ext)
    1              0.000009     call add(s:loaded_ext, 'whitespace')
    1              0.000001   endif
                            
    1              0.000017   if (get(g:, 'airline#extensions#neomake#enabled', 1) && exists(':Neomake'))
                                call airline#extensions#neomake#init(s:ext)
                                call add(s:loaded_ext, 'neomake')
    1              0.000001   endif
                            
    1              0.000092   if get(g:, 'airline#extensions#po#enabled', 1) && executable('msgfmt')
    1   0.000599   0.000254     call airline#extensions#po#init(s:ext)
    1              0.000005     call add(s:loaded_ext, 'po')
    1              0.000001   endif
                            
    1              0.000005   if get(g:, 'airline#extensions#wordcount#enabled', 1)
                                call airline#extensions#wordcount#init(s:ext)
                                call add(s:loaded_ext, 'wordcount')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'airline#extensions#tabline#enabled', 0)
                                call airline#extensions#tabline#init(s:ext)
                                call add(s:loaded_ext, 'tabline')
    1              0.000001   endif
                            
    1              0.000014   if get(g:, 'airline#extensions#tmuxline#enabled', 1) && exists(':Tmuxline')
                                call airline#extensions#tmuxline#init(s:ext)
                                call add(s:loaded_ext, 'tmuxline')
    1              0.000001   endif
                            
    1              0.000012   if get(g:, 'airline#extensions#promptline#enabled', 1) && exists(':PromptlineSnapshot') && len(get(g:, 'airline#extensions#promptline#snapshot_file', ''))
                                call airline#extensions#promptline#init(s:ext)
                                call add(s:loaded_ext, 'promptline')
    1              0.000002   endif
                            
    1              0.000011   if get(g:, 'airline#extensions#nrrwrgn#enabled', 1) && exists(':NR') == 2
                                  call airline#extensions#nrrwrgn#init(s:ext)
                                call add(s:loaded_ext, 'nrrwrgn')
    1              0.000001   endif
                            
    1              0.000008   if get(g:, 'airline#extensions#unicode#enabled', 1) && exists(':UnicodeTable') == 2
                                  call airline#extensions#unicode#init(s:ext)
                                call add(s:loaded_ext, 'unicode')
    1              0.000001   endif
                            
    1              0.000010   if (get(g:, 'airline#extensions#capslock#enabled', 1) && exists('*CapsLockStatusline'))
                                call airline#extensions#capslock#init(s:ext)
                                call add(s:loaded_ext, 'capslock')
    1              0.000001   endif
                            
    1              0.000008   if (get(g:, 'airline#extensions#gutentags#enabled', 1) && get(g:, 'loaded_gutentags', 0))
                                call airline#extensions#gutentags#init(s:ext)
                                call add(s:loaded_ext, 'gutentags')
    1              0.000001   endif
                            
    1              0.000008   if (get(g:, 'airline#extensions#grepper#enabled', 1) && get(g:, 'loaded_grepper', 0))
                                call airline#extensions#grepper#init(s:ext)
                                call add(s:loaded_ext, 'grepper')
    1              0.000002   endif
                            
    1              0.000008   if (get(g:, 'airline#extensions#xkblayout#enabled', 1) && exists('g:XkbSwitchLib'))
                                call airline#extensions#xkblayout#init(s:ext)
                                call add(s:loaded_ext, 'xkblayout')
    1              0.000001   endif
                            
    1              0.000011   if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
    1   0.000676   0.000325     call airline#extensions#keymap#init(s:ext)
    1              0.000006     call add(s:loaded_ext, 'keymap')
    1              0.000001   endif
                            
    1              0.000009   if (get(g:, 'airline#extensions#windowswap#enabled', 1) && get(g:, 'loaded_windowswap', 0))
                                call airline#extensions#windowswap#init(s:ext)
                                call add(s:loaded_ext, 'windowswap')
    1              0.000001   endif
                            
    1              0.000008   if (get(g:, 'airline#extensions#obsession#enabled', 1) && exists('*ObsessionStatus'))
                                call airline#extensions#obsession#init(s:ext)
                                call add(s:loaded_ext, 'obsession')
    1              0.000001   endif
                            
    1              0.000004   if get(g:, 'airline#extensions#vimtex#enabled', 1)
    1   0.004776   0.000407     runtime autoload/vimtex.vim
    1              0.000006     if exists('*vimtex#init')
    1   0.000841   0.000229       call airline#extensions#vimtex#init(s:ext)
    1              0.000005       call add(s:loaded_ext, 'vimtex')
    1              0.000001     endif
    1              0.000001   endif
                            
    1              0.000005   if (get(g:, 'airline#extensions#cursormode#enabled', 0))
                                call airline#extensions#cursormode#init(s:ext)
                                call add(s:loaded_ext, 'cursormode')
    1              0.000001   endif
                            
    1              0.000004   if !get(g:, 'airline#extensions#disable_rtp_load', 0)
                                " load all other extensions, which are not part of the default distribution.
                                " (autoload/airline/extensions/*.vim outside of our s:script_path).
   51              0.017931     for file in split(globpath(&rtp, "autoload/airline/extensions/*.vim"), "\n")
                                  " we have to check both resolved and unresolved paths, since it's possible
                                  " that they might not get resolved properly (see #187)
   50              0.002409       if stridx(tolower(resolve(fnamemodify(file, ':p'))), s:script_path) < 0 && stridx(tolower(fnamemodify(file, ':p')), s:script_path) < 0
                                    let name = fnamemodify(file, ':t:r')
                                    if !get(g:, 'airline#extensions#'.name.'#enabled', 1) || index(s:loaded_ext, name) > -1
                                      continue
                                    endif
                                    try
                                      call airline#extensions#{name}#init(s:ext)
                                      " mark as external
                                      call add(s:loaded_ext, name.'*')
                                    catch
                                    endtry
   50              0.000045       endif
   51              0.000055     endfor
    1              0.000002   endif

FUNCTION  <SNR>3_escrtp()
    Defined: ~/.config/nvim/autoload/plug.vim:387
Called 2 times
Total time:   0.000017
 Self time:   0.000017

count  total (s)   self (s)
    2              0.000015   return escape(a:path, ' ,')

FUNCTION  FugitiveHead()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:128
Called 47 times
Total time:   0.080679
 Self time:   0.001785

count  total (s)   self (s)
   47   0.020857   0.000601   let dir = FugitiveGitDir(a:0 > 1 ? a:2 : -1)
   47              0.000133   if empty(dir)
                                return ''
   47              0.000046   endif
   47   0.059493   0.000855   return fugitive#Head(a:0 ? a:1 : 0, dir)

FUNCTION  airline#highlighter#highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:243
Called 4 times
Total time:   0.120106
 Self time:   0.010282

count  total (s)   self (s)
    4              0.000017   let bufnr = a:0 ? a:1 : ''
    4              0.000023   let p = g:airline#themes#{g:airline_theme}#palette
                            
                              " draw the base mode, followed by any overrides
    4              0.000047   let mapped = map(a:modes, 'v:val == a:modes[0] ? v:val : a:modes[0]."_".v:val')
    4              0.000017   let suffix = a:modes[0] == 'inactive' ? '_inactive' : ''
    4              0.000012   let airline_grouplist = []
    4              0.000022   let buffers_in_tabpage = sort(tabpagebuflist())
    4              0.000014   if exists("*uniq")
    4              0.000017     let buffers_in_tabpage = uniq(buffers_in_tabpage)
    4              0.000003   endif
                              " mapped might be something like ['normal', 'normal_modified']
                              " if a group is in both modes available, only define the second
                              " that is how this was done previously overwrite the previous definition
    8              0.000025   for mode in reverse(mapped)
    4              0.000032     if exists('g:airline#themes#{g:airline_theme}#palette[mode]')
    3              0.000017       let dict = g:airline#themes#{g:airline_theme}#palette[mode]
   30              0.000091       for kvp in items(dict)
   27              0.000090         let mode_colors = kvp[1]
   27              0.000069         let name = kvp[0]
   27              0.000123         if name is# 'airline_c' && !empty(bufnr) && suffix is# '_inactive'
                                      let name = 'airline_c'.bufnr
   27              0.000024         endif
                                    " do not re-create highlighting for buffers that are no longer visible
                                    " in the current tabpage
   27              0.000349         if name =~# 'airline_c\d\+'
                                      let bnr = matchstr(name, 'airline_c\zs\d\+') + 0
                                      if bnr > 0 && index(buffers_in_tabpage, bnr) == -1
                                        continue
                                      endif
   27              0.000247         elseif (name =~# '_to_') || (name[0:10] is# 'airline_tab' && !empty(suffix))
                                      " group will be redefined below at exec_separator
                                      " or is not needed for tabline with '_inactive' suffix
                                      " since active flag is 1 for builder)
                                      continue
   27              0.000022         endif
   27   0.000799   0.000433         if s:group_not_done(airline_grouplist, name.suffix)
   27   0.053735   0.000479           call airline#highlighter#exec(name.suffix, mode_colors)
   27              0.000026         endif
                            
   27              0.000099         if !has_key(p, 'accents') 
                                      " work around a broken installation
                                      " shouldn't actually happen, p should always contain accents
                                      continue
   27              0.000028         endif
                            
   81              0.000253         for accent in keys(s:accents)
   54              0.000221           if !has_key(p.accents, accent)
                                        continue
   54              0.000046           endif
   54              0.000282           let colors = copy(mode_colors)
   54              0.000215           if p.accents[accent][0] != ''
                                        let colors[0] = p.accents[accent][0]
   54              0.000045           endif
   54              0.000168           if p.accents[accent][2] != ''
   27              0.000111             let colors[2] = p.accents[accent][2]
   54              0.000045           endif
   54              0.000154           if len(colors) >= 5
   54              0.000290             let colors[4] = get(p.accents[accent], 4, '')
                                      else
                                        call add(colors, get(p.accents[accent], 4, ''))
   54              0.000047           endif
   54   0.001760   0.001050           if s:group_not_done(airline_grouplist, name.suffix.'_'.accent)
   54   0.051012   0.000995             call airline#highlighter#exec(name.suffix.'_'.accent, colors)
   54              0.000054           endif
   81              0.000087         endfor
   30              0.000032       endfor
                            
    3              0.000010       if empty(s:separators)
                                    " nothing to be done
    2              0.000005         continue
    1              0.000001       endif
                                  " TODO: optimize this
    7              0.000024       for sep in items(s:separators)
                                    " we cannot check, that the group already exists, else the separators
                                    " might not be correctly defined. But perhaps we can skip above groups
                                    " that match the '_to_' name, because they would be redefined here...
    6   0.005610   0.000135         call <sid>exec_separator(dict, sep[1][0], sep[1][1], sep[1][2], suffix)
    7              0.000009       endfor
    2              0.000002     endif
    6              0.000015   endfor

FUNCTION  coc#rpc#ready()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim:31
Called 8 times
Total time:   0.000129
 Self time:   0.000129

count  total (s)   self (s)
    8              0.000075   if empty(s:client) || s:client['running'] == 0
                                return 0
    8              0.000008   endif
    8              0.000014   return 1

FUNCTION  <SNR>60_getDistro()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:94
Called 47 times
Total time:   0.089340
 Self time:   0.000608

count  total (s)   self (s)
   47              0.000210   if exists('s:distro')
   46              0.000107     return s:distro
    1              0.000002   endif
                            
    1              0.000095   if executable('lsb_release')
    1   0.088786   0.000053     let s:lsb = system('lsb_release -i')
    1              0.000027     if s:lsb =~# 'Arch'
                                  let s:distro = ''
    1              0.000008     elseif s:lsb =~# 'Ubuntu'
    1              0.000003       let s:distro = ''
                                elseif s:lsb =~# 'Cent'
                                  let s:distro = ''
                                elseif s:lsb =~# 'Debian'
                                  let s:distro = ''
                                elseif s:lsb =~# 'Dock'
                                  let s:distro = ''
                                else
                                  let s:distro = ''
    1              0.000001     endif
    1              0.000005     return s:distro
                              endif
                            
                              let s:distro = ''
                              return s:distro

FUNCTION  airline#extensions#keymap#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/keymap.vim:18
Called 1 time
Total time:   0.000093
 Self time:   0.000022

count  total (s)   self (s)
    1   0.000092   0.000020   call airline#parts#define_function('keymap', 'airline#extensions#keymap#status')

FUNCTION  airline#section#create_right()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/section.vim:82
Called 2 times
Total time:   0.001299
 Self time:   0.000028

count  total (s)   self (s)
    2   0.001297   0.000027   return s:create(a:parts, -1)

FUNCTION  airline#parts#ffenc()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:108
Called 2 times
Total time:   0.000133
 Self time:   0.000133

count  total (s)   self (s)
    2              0.000011   let expected = get(g:, 'airline#parts#ffenc#skip_expected_string', '')
    2              0.000011   let bomb     = &l:bomb ? '[BOM]' : ''
    2              0.000046   let ff       = strlen(&ff) ? '['.&ff.']' : ''
    2              0.000020   if expected is# &fenc.bomb.ff
                                return ''
    2              0.000002   else
    2              0.000034     return &fenc.bomb.ff
                              endif

FUNCTION  airline#util#ignore_buf()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:136
Called 47 times
Total time:   0.001732
 Self time:   0.001732

count  total (s)   self (s)
   47              0.000660   let pat = '\c\v'. get(g:, 'airline#ignore_bufadd_pat', ''). get(g:, 'airline#extensions#tabline#ignore_bufadd_pat',  '!|defx|gundo|nerd_tree|startify|tagbar|term://|undotree|vimfiler')
   47              0.001000   return match(a:name, pat) > -1

FUNCTION  <SNR>77_Highlight_Matching_Pair()
    Defined: /usr/share/nvim/runtime/plugin/matchparen.vim:39
Called 1 time
Total time:   0.000121
 Self time:   0.000121

count  total (s)   self (s)
                              " Remove any previous match.
    1              0.000005   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
    1              0.000001   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
    1              0.000005   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
    1              0.000001   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
    1              0.000004   let c_lnum = line('.')
    1              0.000003   let c_col = col('.')
    1              0.000002   let before = 0
                            
    1              0.000005   let text = getline(c_lnum)
    1              0.000018   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
    1              0.000003   if empty(matches)
                                let [c_before, c] = ['', '']
    1              0.000001   else
    1              0.000007     let [c_before, c] = matches[1:2]
    1              0.000001   endif
    1              0.000018   let plist = split(&matchpairs, '.\zs[:,]')
    1              0.000005   let i = index(plist, c)
    1              0.000002   if i < 0
                                " not found, in Insert mode try character before the cursor
    1              0.000004     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
    1              0.000001     endif
    1              0.000002     if i < 0
                                  " not found, nothing to do
    1              0.000001       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
                                let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  <SNR>62_ChangeDirectoryForBuffer()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:58
Called 2 times
Total time:   0.000047
 Self time:   0.000047

count  total (s)   self (s)
    2              0.000019   let patterns = split(g:rooter_targets, ',')
                            
    2              0.000013   if isdirectory(s:fd)
    2              0.000011     return index(patterns, '/') != -1
                              endif
                            
                              if filereadable(s:fd) && empty(&buftype)
                                if exists('*glob2regpat')
                                  for p in patterns
                                    if p !=# '/' && s:fd =~# glob2regpat(p)
                                      return 1
                                    endif
                                  endfor
                                else
                                  return 1
                                endif
                              endif
                            
                              return 0

FUNCTION  <SNR>3_dirpath()
    Defined: ~/.config/nvim/autoload/plug.vim:362
Called 118 times
Total time:   0.005113
 Self time:   0.005113

count  total (s)   self (s)
  118              0.005027     return substitute(a:path, '[/\\]*$', '/', '')

FUNCTION  WebDevIconsGetFileTypeSymbol()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:471
Called 47 times
Total time:   0.015024
 Self time:   0.014320

count  total (s)   self (s)
   47              0.000111   if a:0 == 0
   47              0.000384     let fileNodeExtension = expand('%:e')
   47              0.000243     let fileNode = expand('%:t')
   47              0.000113     let isDirectory = 0
                              else
                                let fileNodeExtension = fnamemodify(a:1, ':e')
                                let fileNode = fnamemodify(a:1, ':t')
                                if a:0 > 1
                                  let isDirectory = a:2
                                else
                                  let isDirectory = 0
                                endif
   47              0.000039   endif
                            
   47              0.000148   if isDirectory == 0 || g:DevIconsEnableFolderPatternMatching
                            
   47              0.000210     let symbol = g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol
   47              0.000222     let fileNodeExtension = tolower(fileNodeExtension)
   47              0.000173     let fileNode = tolower(fileNode)
                            
  470              0.002158     for [pattern, glyph] in items(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols)
  423              0.004027       if match(fileNode, pattern) != -1
                                    let symbol = glyph
                                    break
  423              0.000359       endif
  470              0.000645     endfor
                            
   47              0.000199     if symbol == g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol
   47              0.000243       if has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, fileNode)
                                    let symbol = g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[fileNode]
   47              0.000452       elseif ((isDirectory == 1 && g:DevIconsEnableFolderExtensionPatternMatching) || isDirectory == 0) && has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, fileNodeExtension)
                                    let symbol = g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[fileNodeExtension]
   47              0.000090       elseif isDirectory == 1
                                    let symbol = g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol
   47              0.000045       endif
   47              0.000045     endif
                            
                              else
                                let symbol = g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol
   47              0.000042   endif
                            
   47   0.001566   0.000862   let artifactFix = s:DevIconsGetArtifactFix()
                            
   47              0.000148   return symbol . artifactFix
                            

FUNCTION  coc#util#job_command()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:191
Called 1 time
Total time:   0.000215
 Self time:   0.000215

count  total (s)   self (s)
    1              0.000097   let node = expand(get(g:, 'coc_node_path', 'node'))
    1              0.000039   if !executable(node)
                                echohl Error | echom '[coc.nvim] "'.node.'" is not executable, checkout https://nodejs.org/en/download/' | echohl None
                                return
    1              0.000001   endif
    1              0.000005   let bundle = s:root.'/build/index.js'
    1              0.000047   if filereadable(bundle) && !get(g:, 'coc_force_debug', 0)
    1              0.000014     return [node] + get(g:, 'coc_node_args', ['--no-warnings']) + [s:root.'/build/index.js']
                              endif
                              let file = s:root.'/lib/attach.js'
                              if !filereadable(file)
                                if !filereadable(bundle)
                                  echohl Error | echom '[coc.nvim] javascript file not found, please compile the code or use release branch.' | echohl None
                                else
                                  echohl Error | echom '[coc.nvim] compiled javascript file not found, remove let g:coc_force_debug = 1 in your vimrc.' | echohl None
                                endif
                                return
                              endif
                              return [node] + get(g:, 'coc_node_args', ['--no-warnings']) + [s:root.'/bin/server.js']

FUNCTION  <SNR>42_CreateMaps()
    Defined: ~/.local/share/nvim/plugged/nerdcommenter/plugin/NERD_commenter.vim:3154
Called 18 times
Total time:   0.017332
 Self time:   0.017332

count  total (s)   self (s)
                                " Build up a map command like
                                " 'noremap <silent> <plug>NERDCommenterComment :call NERDComment("n", "Comment")'
   18              0.000082     let plug = '<plug>NERDCommenter' . a:target
   18              0.000091     let plug_start = 'noremap <silent> ' . plug . ' :call NERDComment("'
   18              0.000071     let plug_end = '", "' . a:target . '")<cr>'
                                " Build up a menu command like
                                " 'menu <silent> comment.Comment<Tab>\\cc <plug>NERDCommenterComment'
   18              0.000147     let menuRoot = get(['', 'comment', '&comment', '&Plugin.&comment'], g:NERDMenuMode, '')
   18              0.000135     let menu_command = 'menu <silent> ' . menuRoot . '.' . escape(a:desc, ' ')
   18              0.000052     if strlen(a:combo)
   13              0.000076         let leader = exists('g:mapleader') ? g:mapleader : '\'
   13              0.000090         let menu_command .= '<Tab>' . escape(leader, '\') . a:combo
   18              0.000020     endif
   18              0.000113     let menu_command .= ' ' . (strlen(a:combo) ? plug : a:target)
                                " Execute the commands built above for each requested mode.
   46              0.000271     for mode in (a:modes ==# '') ? [''] : split(a:modes, '\zs')
   28              0.000091         if strlen(a:combo)
   23              0.000556             execute mode . plug_start . mode . plug_end
   23              0.000374             if g:NERDCreateDefaultMappings && !hasmapto(plug, mode)
   23              0.000461                 execute mode . 'map <leader>' . a:combo . ' ' . plug
   23              0.000024             endif
   28              0.000025         endif
                                    " Check if the user wants the menu to be displayed.
   28              0.000066         if g:NERDMenuMode !=# 0
   28              0.013870             execute mode . menu_command
   28              0.000044         endif
   46              0.000065     endfor

FUNCTION  airline#update_tabline()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:273
Called 3 times
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
    3              0.000014   if get(g:, 'airline_statusline_ontop', 0)
                                call airline#extensions#tabline#redraw()
    3              0.000003   endif

FUNCTION  CocActionAsync()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:32
Called 1 time
Total time:   0.000286
 Self time:   0.000027

count  total (s)   self (s)
    1   0.000284   0.000025   return s:AsyncRequest('CocAction', a:000)

FUNCTION  airline#parts#get()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:49
Called 135 times
Total time:   0.000942
 Self time:   0.000942

count  total (s)   self (s)
  135              0.000834   return get(s:parts, a:key, {})

FUNCTION  airline#load_theme()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:39
Called 1 time
Total time:   0.152789
 Self time:   0.000124

count  total (s)   self (s)
    1              0.000007   let g:airline_theme = get(g:, 'airline_theme', 'dark')
    1              0.000009   if exists('*airline#themes#{g:airline_theme}#refresh')
    1   0.006631   0.000017     call airline#themes#{g:airline_theme}#refresh()
    1              0.000001   endif
                            
    1              0.000006   let palette = g:airline#themes#{g:airline_theme}#palette
    1   0.000665   0.000015   call airline#themes#patch(palette)
                            
    1              0.000004   if exists('g:airline_theme_patch_func')
                                let Fn = function(g:airline_theme_patch_func)
                                call Fn(palette)
    1              0.000001   endif
                            
    1   0.100874   0.000018   call airline#highlighter#load_theme()
    1   0.000060   0.000021   call airline#extensions#load_theme()
    1   0.044520   0.000014   call airline#update_statusline()

FUNCTION  airline#parts#paste()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:63
Called 47 times
Total time:   0.000247
 Self time:   0.000247

count  total (s)   self (s)
   47              0.000206   return g:airline_detect_paste && &paste ? g:airline_symbols.paste : ''

FUNCTION  PoppyInit()
    Defined: ~/.local/share/nvim/plugged/poppy.vim/plugin/poppy.vim:46
Called 1 time
Total time:   0.000095
 Self time:   0.000032

count  total (s)   self (s)
    1   0.000094   0.000031   let s:pos = getpos('.')[1:2] | let w:poppies = get(w:,'poppies',[]) | silent! call filter(w:poppies,'matchdelete(v:val)>0') | call s:highpat()

FUNCTION  airline#update_statusline()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:127
Called 2 times
Total time:   0.058630
 Self time:   0.000219

count  total (s)   self (s)
    2   0.000144   0.000025   if airline#util#stl_disabled(winnr())
                                return
    2              0.000002   endif
    2              0.000022   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
                              " create inactive statusline
    2   0.000240   0.000032   call airline#update_statusline_inactive(range)
                            
    2              0.000008   unlet! w:airline_render_left w:airline_render_right
    2              0.000041   exe 'unlet! ' 'w:airline_section_'. join(s:sections, ' w:airline_section_')
                            
                              " Now create the active statusline
    2              0.000006   let w:airline_active = 1
    2              0.000017   let context = { 'winnr': winnr(), 'active': 1, 'bufnr': winbufnr(winnr()) }
    2   0.058137   0.000052   call s:invoke_funcrefs(context, g:airline_statusline_funcrefs)

FUNCTION  <SNR>78_VimEnter()
    Defined: /usr/share/nvim/runtime/plugin/netrwPlugin.vim:152
Called 1 time
Total time:   0.000115
 Self time:   0.000051

count  total (s)   self (s)
                            "  call Dfunc("s:VimEnter(dirname<".a:dirname.">) expand(%)<".expand("%").">")
    1              0.000004   let curwin       = winnr()
    1              0.000003   let s:vimentered = 1
    1   0.000097   0.000033   windo call s:LocalBrowse(expand("%:p"))
    1              0.000008   exe curwin."wincmd w"
                            "  call Dret("s:VimEnter")

FUNCTION  <SNR>52_airline_toggle()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:115
Called 1 time
Total time:   0.004456
 Self time:   0.003980

count  total (s)   self (s)
    1              0.000006   if exists("#airline")
                                augroup airline
                                  au!
                                augroup END
                                augroup! airline
                            
                                if exists("s:stl")
                                  let &stl = s:stl
                                endif
                                if exists("s:tal")
                                  let [&tal, &showtabline] = s:tal
                                endif
                                call airline#highlighter#reset_hlcache()
                            
                                call airline#util#doautocmd('AirlineToggledOff')
    1              0.000001   else
    1              0.000006     let s:stl = &statusline
    1              0.000005     let s:tal = [&tabline, &showtabline]
    1              0.000002     augroup airline
    1              0.000067       autocmd!
                            
    1              0.000012       autocmd CmdwinEnter * call airline#add_statusline_func('airline#cmdwinenter') | call <sid>on_window_changed('CmdwinEnter')
    1              0.000007       autocmd CmdwinLeave * call airline#remove_statusline_func('airline#cmdwinenter')
                            
    1              0.000010       autocmd GUIEnter,ColorScheme * call <sid>on_colorscheme_changed()
    1              0.000005       if exists("##OptionSet")
                                    " Make sure that g_airline_gui_mode is refreshed
    1              0.000012         autocmd OptionSet termguicolors call <sid>on_colorscheme_changed()
    1              0.000001       endif
                                  " Set all statuslines to inactive
    1              0.000006       autocmd FocusLost * call airline#update_statusline_focuslost()
                                  " Refresh airline for :syntax off
    1              0.003354       autocmd SourcePre */syntax/syntax.vim call airline#extensions#tabline#buffers#invalidate()
    1              0.000020       autocmd VimEnter * call <sid>do_vim_enter()
    1              0.000008       autocmd WinEnter * call <sid>on_window_changed('WinEnter')
    1              0.000006       autocmd FileType * call <sid>on_window_changed('FileType')
    1              0.000006       autocmd BufWinEnter * call <sid>on_window_changed('BufWinEnter')
    1              0.000006       autocmd BufUnload * call <sid>on_window_changed('BufUnload')
    1              0.000010       if exists('##CompleteDone')
    1              0.000006         autocmd CompleteDone * call <sid>on_window_changed('CompleteDone')
    1              0.000001       endif
                                  " non-trivial number of external plugins use eventignore=all, so we need to account for that
    1              0.000006       autocmd CursorMoved * call <sid>on_cursor_moved()
                            
    1              0.000006       autocmd VimResized * call <sid>on_focus_gained()
    1              0.000007       if exists('*timer_start') && exists('*funcref')
                                    " do not trigger FocusGained on startup, it might erase the intro screen (see #1817)
                                    " needs funcref() (needs 7.4.2137) and timers (7.4.1578)
    1              0.000014         let Handler=funcref('<sid>FocusGainedHandler')
    1              0.000014         let s:timer=timer_start(5000, Handler)
                                  else
                                    autocmd FocusGained * call <sid>on_focus_gained()
    1              0.000002       endif
                            
    1              0.000005       if exists("##TerminalOpen")
                                    " Using the same function with the TermOpen autocommand
                                    " breaks for Neovim see #1828, looks like a neovim bug.
                                    autocmd TerminalOpen * :call airline#load_theme() " reload current theme for Terminal, forces the terminal extension to be loaded
    1              0.000001       endif
    1              0.000007       autocmd TabEnter * :unlet! w:airline_lastmode | let w:airline_active=1
    1              0.000019       autocmd BufWritePost */autoload/airline/themes/*.vim exec 'source '.split(globpath(&rtp, 'autoload/airline/themes/'.g:airline_theme.'.vim', 1), "\n")[0] | call airline#load_theme()
    1              0.000010       autocmd User AirlineModeChanged nested call airline#mode_changed()
                            
    1              0.000005       if get(g:, 'airline_statusline_ontop', 0)
                                    " Force update of tabline more often
                                    autocmd InsertEnter,InsertLeave,CursorMovedI * :call airline#update_tabline()
    1              0.000001       endif
    1              0.000002     augroup END
                            
    1   0.000681   0.000235     if !airline#util#stl_disabled(winnr())
    1              0.000004       if &laststatus < 2
                                    set laststatus=2
    1              0.000001       endif
    1              0.000001     endif
    1              0.000002     if s:airline_initialized
                                  call s:on_window_changed('Init')
    1              0.000001     endif
                            
    1   0.000042   0.000012     call airline#util#doautocmd('AirlineToggledOn')
    1              0.000001   endif

FUNCTION  <SNR>49_InitVariable()
    Defined: ~/.local/share/nvim/plugged/vim-better-whitespace/plugin/better-whitespace.vim:14
Called 16 times
Total time:   0.000120
 Self time:   0.000120

count  total (s)   self (s)
   16              0.000108     let g:[a:var] = get(g:, a:var, a:value)

FUNCTION  Base16hi()
    Defined: ~/dev/others/base16/vim/colors/base16-gruvbox-dark-hard.vim:152
Called 184 times
Total time:   0.047203
 Self time:   0.047203

count  total (s)   self (s)
  184              0.000859   let l:attr = get(a:, 1, "")
  184              0.000663   let l:guisp = get(a:, 2, "")
                            
  184              0.000357   if a:guifg != ""
  172              0.002382     exec "hi " . a:group . " guifg=#" . a:guifg
  184              0.000174   endif
  184              0.000370   if a:guibg != ""
   46              0.000728     exec "hi " . a:group . " guibg=#" . a:guibg
  184              0.000148   endif
  184              0.000355   if a:ctermfg != ""
  172              0.009608     exec "hi " . a:group . " ctermfg=" . a:ctermfg
  184              0.000158   endif
  184              0.000356   if a:ctermbg != ""
   45              0.022084     exec "hi " . a:group . " ctermbg=" . a:ctermbg
  184              0.000154   endif
  184              0.000323   if l:attr != ""
   28              0.005363     exec "hi " . a:group . " gui=" . l:attr . " cterm=" . l:attr
  184              0.000153   endif
  184              0.000338   if l:guisp != ""
    4              0.000056     exec "hi " . a:group . " guisp=#" . l:guisp
  184              0.000133   endif

FUNCTION  fugitive#CommonDir()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:254
Called 47 times
Total time:   0.002101
 Self time:   0.002101

count  total (s)   self (s)
   47              0.000145   if empty(a:dir)
                                return ''
   47              0.000043   endif
   47              0.000218   if !has_key(s:commondirs, a:dir)
    1              0.000023     if getfsize(a:dir . '/HEAD') < 10
                                  let s:commondirs[a:dir] = ''
    1              0.000017     elseif filereadable(a:dir . '/commondir')
                                  let cdir = get(readfile(a:dir . '/commondir', 1), 0, '')
                                  if cdir =~# '^/\|^\a:/'
                                    let s:commondirs[a:dir] = s:Slash(FugitiveVimPath(cdir))
                                  else
                                    let s:commondirs[a:dir] = simplify(a:dir . '/' . cdir)
                                  endif
    1              0.000001     else
    1              0.000006       let s:commondirs[a:dir] = a:dir
    1              0.000001     endif
   47              0.000037   endif
   47              0.000176   return s:commondirs[a:dir]

FUNCTION  airline#parts#readonly()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:89
Called 47 times
Total time:   0.003259
 Self time:   0.001527

count  total (s)   self (s)
                              " only consider regular buffers (e.g. ones that represent actual files,
                              " but not special ones like e.g. NERDTree)
   47   0.002518   0.000786   if !empty(&buftype) || airline#util#ignore_buf(bufname('%'))
                                return ''
   47              0.000046   endif
   47              0.000188   if &readonly && !filereadable(bufname('%'))
                                return '[noperm]'
   47              0.000045   else
   47              0.000153     return &readonly ? g:airline_symbols.readonly : ''
                              endif

FUNCTION  blacklist#GetBlacklist()
    Defined: ~/.local/share/nvim/plugged/semantic-highlight.vim/autoload/blacklist.vim:587
Called 1 time
Total time:   0.000005
 Self time:   0.000005

count  total (s)   self (s)
    1              0.000004 	return s:blacklist

FUNCTION  remote#host#PluginsForHost()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:177
Called 4 times
Total time:   0.000343
 Self time:   0.000343

count  total (s)   self (s)
    4              0.000296   if !has_key(s:plugins_for_host, a:host)
    2              0.000010     let s:plugins_for_host[a:host] = []
    4              0.000005   end
    4              0.000017   return s:plugins_for_host[a:host]

FUNCTION  fugitive#Head()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:495
Called 47 times
Total time:   0.048139
 Self time:   0.010833

count  total (s)   self (s)
   47              0.000257   let dir = a:0 > 1 ? a:2 : s:Dir()
   47              0.000120   if empty(dir)
                                return ''
   47              0.000042   endif
   47   0.044724   0.007419   let file = fugitive#Find('.git/HEAD', dir)
   47              0.000460   let ftime = getftime(file)
   47              0.000105   if ftime == -1
                                return ''
   47              0.000362   elseif ftime != get(s:head_cache, dir, [-1])[0]
    1              0.000035     let s:head_cache[dir] = [ftime, readfile(file)[0]]
   47              0.000044   endif
   47              0.000204   let head = s:head_cache[dir][1]
   47              0.000378   if head =~# '^ref: '
   47              0.000928     return substitute(head, '\C^ref: \%(refs/\%(heads/\|remotes/\|tags/\)\=\)\=', '', '')
                              elseif head =~# '^\x\{40,\}$'
                                let len = a:0 ? a:1 : 0
                                return len < 0 ? head : len ? head[0:len-1] : ''
                              else
                                return ''
                              endif

FUNCTION  <SNR>60_setSyntax()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:353
Called 1 time
Total time:   0.000105
 Self time:   0.000105

count  total (s)   self (s)
    1              0.000005   if g:webdevicons_enable_nerdtree == 1 && g:webdevicons_conceal_nerdtree_brackets == 1
    1              0.000003     augroup webdevicons_conceal_nerdtree_brackets
    1              0.000065       au!
    1              0.000013       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
    1              0.000005       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
    1              0.000004       autocmd FileType nerdtree setlocal conceallevel=3
    1              0.000004       autocmd FileType nerdtree setlocal concealcursor=nvic
    1              0.000001     augroup END
    1              0.000001   endif

FUNCTION  provider#pythonx#CheckForModule()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:79
Called 1 time
Total time:   0.046362
 Self time:   0.000188

count  total (s)   self (s)
    1              0.000052   let prog_path = exepath(a:prog)
    1              0.000003   if prog_path ==# ''
                                return [0, a:prog . ' not found in search path or not executable.']
    1              0.000001   endif
                            
    1              0.000003   let min_version = (a:major_version == 2) ? '2.6' : '3.3'
                            
                              " Try to load module, and output Python version.
                              " Exit codes:
                              "   0  module can be loaded.
                              "   2  module cannot be loaded.
                              "   Otherwise something else went wrong (e.g. 1 or 127).
    1   0.046201   0.000027   let [prog_exitcode, prog_version] = s:import_module(a:prog, a:module)
                            
    1              0.000006   if prog_exitcode == 2 || prog_exitcode == 0
                                " Check version only for expected return codes.
    1              0.000033     if prog_version !~ '^' . a:major_version
                                  return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python ' . a:major_version . '.']
    1              0.000011     elseif prog_version =~ '^' . a:major_version && prog_version < min_version
                                  return [0, prog_path . ' is Python ' . prog_version . ' and cannot provide Python >= ' . min_version . '.']
    1              0.000002     endif
    1              0.000001   endif
                            
    1              0.000002   if prog_exitcode == 2
                                return [0, prog_path.' does not have the "' . a:module . '" module. :help provider-python']
    1              0.000002   elseif prog_exitcode == 127
                                " This can happen with pyenv's shims.
                                return [0, prog_path . ' does not exist: ' . prog_version]
    1              0.000002   elseif prog_exitcode
                                return [0, 'Checking ' . prog_path . ' caused an unknown error. ' . '(' . prog_exitcode . ', output: ' . prog_version . ')' . ' Report this at https://github.com/neovim/neovim']
    1              0.000001   endif
                            
    1              0.000005   return [1, '']

FUNCTION  airline#builder#should_change_group()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:130
Called 12 times
Total time:   0.005421
 Self time:   0.000863

count  total (s)   self (s)
   12              0.000040   if a:group1 == a:group2
                                return 0
   12              0.000010   endif
   12   0.002738   0.000420   let color1 = airline#highlighter#get_highlight(a:group1)
   12   0.002454   0.000214   let color2 = airline#highlighter#get_highlight(a:group2)
   12              0.000027   if g:airline_gui_mode ==# 'gui'
                                return color1[1] != color2[1] || color1[0] != color2[0]
   12              0.000010   else
   12              0.000054     return color1[3] != color2[3] || color1[2] != color2[2]
                              endif

FUNCTION  <SNR>45_readCache()
    Defined: ~/.local/share/nvim/plugged/semantic-highlight.vim/plugin/semhl.vim:48
Called 2 times
Total time:   0.000180
 Self time:   0.000180

count  total (s)   self (s)
    2              0.000033 	if !filereadable(g:semanticPersistCacheLocation)
                            		return []
    2              0.000004 	endif
                            
    2              0.000008 	let l:localCache = {}
    2              0.000064 	let s:cacheList = readfile(g:semanticPersistCacheLocation)
    2              0.000010 	for s:cacheListItem in s:cacheList
                            		let s:cacheListItemList = eval(s:cacheListItem)
                            		let l:localCache[s:cacheListItemList[0]] = s:cacheListItemList[1]
    2              0.000004 	endfor
                            
    2              0.000009 	if exists("s:cacheListItem")
                            		unlet s:cacheListItem s:cacheList
    2              0.000002 	endif
                            
    2              0.000005 	return l:localCache

FUNCTION  airline#highlighter#exec()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:104
Called 101 times
Total time:   0.134920
 Self time:   0.092393

count  total (s)   self (s)
  101              0.000259   if pumvisible()
                                return
  101              0.000087   endif
  101              0.000278   let colors = a:colors
  101              0.000177   if s:is_win32term
                                let colors[2] = s:gui2cui(get(colors, 0, ''), get(colors, 2, ''))
                                let colors[3] = s:gui2cui(get(colors, 1, ''), get(colors, 3, ''))
  101              0.000087   endif
  101   0.025309   0.001588   let old_hi = airline#highlighter#get_highlight(a:group)
  101              0.000323   if len(colors) == 4
   24              0.000093     call add(colors, '')
  101              0.000084   endif
  101              0.000219   if g:airline_gui_mode ==# 'gui'
                                let new_hi = [colors[0], colors[1], '', '', colors[4]]
  101              0.000089   else
  101              0.000982     let new_hi = ['', '', printf("%s", colors[2]), printf("%s", colors[3]), colors[4]]
  101              0.000093   endif
  101   0.006642   0.001338   let colors = s:CheckDefined(colors)
  101   0.002001   0.001372   if old_hi != new_hi || !s:hl_group_exists(a:group)
   62   0.013946   0.001074     let cmd = printf('hi %s%s', a:group, s:GetHiCmd(colors))
   62              0.078723     exe cmd
   62              0.000381     if has_key(s:hl_groups, a:group)
   62              0.000296       let s:hl_groups[a:group] = colors
   62              0.000063     endif
  101              0.000078   endif

FUNCTION  <SNR>48_highpat()
    Defined: ~/.local/share/nvim/plugged/poppy.vim/plugin/poppy.vim:6
Called 1 time
Total time:   0.000063
 Self time:   0.000063

count  total (s)   self (s)
    1              0.000004   let s:synid_cache = {}
    1              0.000004   let stoplinebottom = line('w$')
    1              0.000003   let stoplinetop = line('w0')
    1              0.000009   let s:poppyhigh = deepcopy(g:poppyhigh)
    1              0.000008   let inc = get(g:,'poppy_point_enable') && getline('.')[col('.')-1] =~ '[[({]' ? 'c' : ''
    1              0.000031   call searchpair('\m[[({]','','noop',inc.(len(g:poppyhigh) > 1 ? 'r' : '').'nbW',"getline('.')[col('.')-1] == 'n' ||" ."s:SynAt(line('.'),col('.')) =~? 'regex\\|comment\\|string' ||" ."s:endpart(".stoplinebottom.")",stoplinetop,30)

FUNCTION  <SNR>42_SetUpForNewFiletype()
    Defined: ~/.local/share/nvim/plugged/nerdcommenter/plugin/NERD_commenter.vim:526
Called 2 times
Total time:   0.000446
 Self time:   0.000281

count  total (s)   self (s)
    2              0.000008     let filetype = a:filetype
                            
                                "for compound filetypes, if we don't know how to handle the full filetype
                                "then break it down and use the first part that we know how to handle
    2              0.000015     if filetype =~# '\.' && !has_key(s:delimiterMap, filetype)
                                    let filetypes = split(a:filetype, '\.')
                                    for i in filetypes
                                        if has_key(s:delimiterMap, i)
                                            let filetype = i
                                            break
                                        endif
                                    endfor
    2              0.000002     endif
                            
    2              0.000008     let b:NERDSexyComMarker = ''
                            
    2              0.000010     if has_key(s:delimiterMap, filetype)
                                    let b:NERDCommenterDelims = s:delimiterMap[filetype]
                                    for i in ['left', 'leftAlt', 'right', 'rightAlt']
                                        if !has_key(b:NERDCommenterDelims, i)
                                            let b:NERDCommenterDelims[i] = ''
                                        endif
                                    endfor
                                    for i in ['nested', 'nestedAlt']
                                        if !has_key(b:NERDCommenterDelims, i)
                                            let b:NERDCommenterDelims[i] = 0
                                        endif
                                    endfor
                                    " if g:NERD_<filetype>_alt_style is defined, use the alternate style
                                    let b:NERDCommenterFirstInit = getbufvar(1,'NERDCommenterFirstInit')
                                    if exists('g:NERDAltDelims_'.filetype) && eval('g:NERDAltDelims_'.filetype) && !b:NERDCommenterFirstInit
                                        call s:SwitchToAlternativeDelimiters(0)
                                        let b:NERDCommenterFirstInit = 1
                                    endif
    2              0.000002     else
    2   0.000270   0.000105         let b:NERDCommenterDelims = s:CreateDelimMapFromCms()
    2              0.000003     endif
                            

FUNCTION  <SNR>89_ResetConcealOption()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:110
Called 1 time
Total time:   0.000020
 Self time:   0.000020

count  total (s)   self (s)
    1              0.000006     if exists("b:indentLine_ConcealOptionSet") && b:indentLine_ConcealOptionSet
                                    if exists("b:indentLine_original_concealcursor")
                                        let &l:concealcursor = b:indentLine_original_concealcursor
                                    endif
                                    if exists("b:indentLine_original_conceallevel")
                                        let &l:conceallevel = b:indentLine_original_conceallevel
                                    endif
                                    let b:indentLine_ConcealOptionSet = 0
    1              0.000001     endif

FUNCTION  <SNR>79_GetManifest()
    Defined: /usr/share/nvim/runtime/plugin/rplugin.vim:42
Called 1 time
Total time:   0.000107
 Self time:   0.000048

count  total (s)   self (s)
    1   0.000073   0.000014   let manifest = s:GetManifestPath()
    1              0.000012   if !filereadable(manifest)
                                " Check if an old manifest file exists and move it to the new location.
                                for old_manifest in s:GetOldManifestPaths()
                                  if filereadable(old_manifest)
                                    call rename(old_manifest, manifest)
                                    break
                                  endif
                                endfor
    1              0.000001   endif
    1              0.000002   return manifest

FUNCTION  provider#python3#Prog()
    Defined: /usr/share/nvim/runtime/autoload/provider/python3.vim:13
Called 2 times
Total time:   0.000007
 Self time:   0.000007

count  total (s)   self (s)
    2              0.000006   return s:prog

FUNCTION  <SNR>95_CheckDefined()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:132
Called 101 times
Total time:   0.005303
 Self time:   0.005303

count  total (s)   self (s)
                              " Checks, whether the definition of the colors is valid and is not empty or NONE
                              " e.g. if the colors would expand to this:
                              " hi airline_c ctermfg=NONE ctermbg=NONE
                              " that means to clear that highlighting group, therefore, fallback to Normal
                              " highlighting group for the cterm values
                            
                              " This only works, if the Normal highlighting group is actually defined, so
                              " return early, if it has been cleared
  101              0.000533   if !exists("g:airline#highlighter#normal_fg_hi")
    1              0.000014     let g:airline#highlighter#normal_fg_hi = synIDattr(synIDtrans(hlID('Normal')), 'fg', 'cterm')
  101              0.000088   endif
  101              0.000596   if empty(g:airline#highlighter#normal_fg_hi) || g:airline#highlighter#normal_fg_hi < 0
                                return a:colors
  101              0.000079   endif
                            
  273              0.000666   for val in a:colors
  273              0.000917     if !empty(val) && val !=# 'NONE'
  101              0.000205       return a:colors
  172              0.000140     endif
  172              0.000189   endfor
                              " this adds the bold attribute to the term argument of the :hi command,
                              " but at least this makes sure, the group will be defined
                              let fg = g:airline#highlighter#normal_fg_hi
                              let bg = synIDattr(synIDtrans(hlID('Normal')), 'bg', 'cterm')
                              if bg < 0
                                " in case there is no background color defined for Normal
                                let bg = a:colors[3]
                              endif
                              return a:colors[0:1] + [fg, bg] + [a:colors[4]]

FUNCTION  <SNR>110_add_methods()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:686
Called 5 times
Total time:   0.002387
 Self time:   0.000412

count  total (s)   self (s)
   21              0.000050   for name in a:method_names
   16   0.002271   0.000296     let s:{a:namespace}_prototype[name] = s:function('s:'.a:namespace.'_'.name)
   21              0.000029   endfor

FUNCTION  remote#define#request()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:194
Called 1 time
Total time:   0.000432
 Self time:   0.000432

count  total (s)   self (s)
    1              0.000010   let s:busy[a:chan] = get(s:busy, a:chan, 0)+1
    1              0.000383   let val = call('rpcrequest', [a:chan]+a:000)
    1              0.000008   let s:busy[a:chan] -= 1
    1              0.000004   if s:busy[a:chan] == 0
    1              0.000009     for msg in get(s:pending_notifications, a:chan, [])
                                  call call('rpcnotify', [a:chan] + msg)
    1              0.000002     endfor
    1              0.000006     let s:pending_notifications[a:chan] = []
    1              0.000001   endif
    1              0.000002   return val

FUNCTION  coc#util#extension_root()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:799
Called 2 times
Total time:   0.000242
 Self time:   0.000132

count  total (s)   self (s)
    2              0.000036   if !empty($COC_TEST)
                                return s:root.'/src/__tests__/extensions'
    2              0.000004   endif
    2              0.000015   if !empty(get(g:, 'coc_extension_root', ''))
                                echohl WarningMsg | echon "g:coc_extension_root variable is deprecated, use g:coc_data_home as parent folder of extensions." | echohl None
                                return resolve(expand(g:coc_extension_root))
    2              0.000002   endif
    2   0.000147   0.000037   return coc#util#get_data_home().'/extensions'

FUNCTION  <SNR>3_reorg_rtp()
    Defined: ~/.config/nvim/autoload/plug.vim:402
Called 1 time
Total time:   0.002542
 Self time:   0.001369

count  total (s)   self (s)
    1              0.000005   if !empty(s:first_rtp)
    1              0.000024     execute 'set rtp-='.s:first_rtp
    1              0.000019     execute 'set rtp-='.s:last_rtp
    1              0.000001   endif
                            
                              " &rtp is modified from outside
    1              0.000005   if exists('s:prtp') && s:prtp !=# &rtp
                                call s:remove_rtp()
                                unlet! s:middle
    1              0.000001   endif
                            
    1              0.000010   let s:middle = get(s:, 'middle', &rtp)
    1   0.001495   0.000322   let rtps     = map(s:loaded_names(), 's:rtp(g:plugs[v:val])')
    1              0.000478   let afters   = filter(map(copy(rtps), 'globpath(v:val, "after")'), '!empty(v:val)')
    1              0.000221   let rtp      = join(map(rtps, 'escape(v:val, ",")'), ',') . ','.s:middle.',' . join(map(afters, 'escape(v:val, ",")'), ',')
    1              0.000133   let &rtp     = substitute(substitute(rtp, ',,*', ',', 'g'), '^,\|,$', '', 'g')
    1              0.000013   let s:prtp   = &rtp
                            
    1              0.000004   if !empty(s:first_rtp)
    1              0.000066     execute 'set rtp^='.s:first_rtp
    1              0.000052     execute 'set rtp+='.s:last_rtp
    1              0.000001   endif

FUNCTION  <SNR>97_format_name()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:77
Called 1 time
Total time:   0.000003
 Self time:   0.000003

count  total (s)   self (s)
    1              0.000002     return a:name

FUNCTION  airline#parts#define_text()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:23
Called 6 times
Total time:   0.000382
 Self time:   0.000081

count  total (s)   self (s)
    6   0.000378   0.000077   call airline#parts#define(a:key, { 'text': a:text })

FUNCTION  <SNR>58_RgbaColor()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:278
Called 2 times
Total time:   0.000260
 Self time:   0.000260

count  total (s)   self (s)
    2              0.000013   if has("gui_running")
                                let rgb_bg = s:RgbBgColor()
    2              0.000002   else
                                " translucent colors would display incorrectly, so ignore the alpha value
    2              0.000005     let rgb_bg = []
    2              0.000002   endif
    2              0.000004   let ret = []
    2              0.000004   let place = 0
    2              0.000005   let percent = 0
    2              0.000009   let colorpat = '\<rgba(\v\s*(\d+(\%)?)\s*,\s*(\d+%(\2))\s*,\s*(\d+%(\2))\s*,\s*(-?[.[:digit:]]+)\s*\)'
    2              0.000003   while 1
    2              0.000043     let foundcolor = matchlist(a:str, colorpat, place)
    2              0.000006     if empty(foundcolor)
    2              0.000036       break
                                endif
                                if foundcolor[2] == '%'
                                  let percent = 1
                                endif
                                let rgb = s:Rgba2Rgb(foundcolor[1], foundcolor[3], foundcolor[4], foundcolor[5], percent, rgb_bg)
                                if empty(rgb)
                                  break
                                endif
                                let place = matchend(a:str, colorpat, place)
                                if empty(rgb_bg)
                                  let pat = printf('\<rgba(\v\s*%s\s*,\s*%s\s*,\s*%s\s*,\ze\s*(-?[.[:digit:]]+)\s*\)', foundcolor[1], foundcolor[3], foundcolor[4])
                                else
                                  let pat = printf('\<rgba(\v\s*%s\s*,\s*%s\s*,\s*%s\s*,\s*%s0*\s*\)', foundcolor[1], foundcolor[3], foundcolor[4], foundcolor[5])
                                endif
                                if percent
                                  let pat = substitute(pat, '%', '\\%', 'g')
                                endif
                                let l:color = printf('#%02x%02x%02x', rgb[0], rgb[1], rgb[2])
                                call add(ret, [l:color, pat])
    2              0.000004   endwhile
    2              0.000004   return ret

FUNCTION  <SNR>100_conflict_marker()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:50
Called 2 times
Total time:   0.000127
 Self time:   0.000127

count  total (s)   self (s)
                              " Checks for git conflict markers
    2              0.000007   let annotation = '\%([0-9A-Za-z_.:]\+\)\?'
    2              0.000018   if &ft is# 'rst'
                                " rst filetypes use '=======' as header
                                let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(>\{7\} '.annotation.'\)\)$'
    2              0.000002   else
    2              0.000017     let pattern = '^\%(\%(<\{7} '.annotation. '\)\|\%(=\{7\}\)\|\%(>\{7\} '.annotation.'\)\)$'
    2              0.000002   endif
    2              0.000067   return search(pattern, 'nw')

FUNCTION  plug#()
    Defined: ~/.config/nvim/autoload/plug.vim:549
Called 44 times
Total time:   0.013206
 Self time:   0.003990

count  total (s)   self (s)
   44              0.000101   if a:0 > 1
                                return s:err('Invalid number of arguments (1..2)')
   44              0.000045   endif
                            
   44              0.000051   try
   44   0.001052   0.000450     let repo = s:trim(a:repo)
   44   0.001789   0.000444     let opts = a:0 == 1 ? s:parse_options(a:1) : s:base_spec
   44              0.000520     let name = get(opts, 'as', fnamemodify(repo, ':t:s?\.git$??'))
   44   0.008156   0.000887     let spec = extend(s:infer_properties(name, repo), opts)
   44              0.000189     if !has_key(g:plugs, name)
   44              0.000199       call add(g:plugs_order, name)
   44              0.000044     endif
   44              0.000182     let g:plugs[name] = spec
   44              0.000275     let s:loaded[name] = get(s:loaded, name, 0)
                              catch
                                return s:err(v:exception)
   44              0.000058   endtry

FUNCTION  <SNR>82_StringifyOpts()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:259
Called 1 time
Total time:   0.000177
 Self time:   0.000177

count  total (s)   self (s)
    1              0.000003   let rv = []
    8              0.000015   for key in a:keys
    7              0.000024     if has_key(a:opts, key)
    2              0.000010       call add(rv, ' -'.key)
    2              0.000007       let val = a:opts[key]
    2              0.000011       if type(val) != type('') || val != ''
    2              0.000009         call add(rv, '='.val)
    2              0.000002       endif
    7              0.000006     endif
    8              0.000009   endfor
    1              0.000007   return join(rv, '')

FUNCTION  <SNR>65_Autocmd()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:159
Called 5 times
Total time:   0.000387
 Self time:   0.000076

count  total (s)   self (s)
    5              0.000027   if !get(g:,'coc_workspace_initialized', 0)
    3              0.000005     return
    2              0.000002   endif
    2   0.000343   0.000032   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTION  <SNR>41_CeilingDirectories()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:198
Called 47 times
Total time:   0.001909
 Self time:   0.001909

count  total (s)   self (s)
   47              0.000240   if !exists('s:ceiling_directories')
    1              0.000004     let s:ceiling_directories = []
    1              0.000002     let resolve = 1
    2              0.000019     for dir in split($GIT_CEILING_DIRECTORIES, has('win32') ? ';' : ':', 1)
    1              0.000003       if empty(dir)
    1              0.000002         let resolve = 0
                                  elseif resolve
                                    call add(s:ceiling_directories, resolve(dir))
                                  else
                                    call add(s:ceiling_directories, dir)
    1              0.000001       endif
    2              0.000003     endfor
   47              0.000043   endif
   47              0.000319   return s:ceiling_directories + get(g:, 'ceiling_directories', [])

FUNCTION  airline#switch_theme()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:59
Called 1 time
Total time:   0.202873
 Self time:   0.000758

count  total (s)   self (s)
    1              0.000006   let silent = get(a:000, '0', 0)
                              " get all available themes
    1   0.024502   0.000027   let themes = airline#util#themes('')
    1              0.000004   let err = 0
    1              0.000002   try
    1              0.000006     if index(themes, a:name) == -1
                                  " Theme not available
                                  if !silent
                                    call airline#util#warning(printf('The specified theme "%s" cannot be found.', a:name))
                                  endif
                                  throw "not-found"
                                  let err = 1
    1              0.000002     else
    1   0.005050   0.000206       exe "ru autoload/airline/themes/". a:name. ".vim"
    1              0.000004       let g:airline_theme = a:name
    1              0.000001     endif
                              catch /^Vim/
                                " catch only Vim errors, not "not-found"
                                call airline#util#warning(printf('There is an error in theme "%s".', a:name))
                                if &vbs
                                  call airline#util#warning(v:exception)
                                endif
                                let err = 1
    1              0.000002   endtry
                            
    1              0.000002   if err
                                if exists('g:airline_theme')
                                  return
                                else
                                  let g:airline_theme = 'dark'
                                endif
    1              0.000001   endif
                            
    1              0.000003   unlet! w:airline_lastmode
    1   0.152805   0.000016   call airline#load_theme()
                            
    1   0.000052   0.000019   call airline#util#doautocmd('AirlineAfterTheme')
                            
                              " this is required to prevent clobbering the startup info message, i don't know why...
    1   0.019991   0.000018   call airline#check_mode(winnr())

FUNCTION  <SNR>108_get_section()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim:20
Called 22 times
Total time:   0.001837
 Self time:   0.001447

count  total (s)   self (s)
   22              0.000099   if has_key(s:section_truncate_width, a:key)
   16   0.000472   0.000220     if airline#util#winwidth(a:winnr) < s:section_truncate_width[a:key]
                                  return ''
   16              0.000014     endif
   22              0.000017   endif
   22              0.000068   let spc = g:airline_symbols.space
   22              0.000127   if !exists('g:airline_section_{a:key}')
                                return ''
   22              0.000017   endif
   22   0.000522   0.000384   let text = airline#util#getwinvar(a:winnr, 'airline_section_'.a:key, g:airline_section_{a:key})
   22              0.000220   let [prefix, suffix] = [get(a:000, 0, '%('.spc), get(a:000, 1, spc.'%)')]
   22              0.000138   return empty(text) ? '' : prefix.text.suffix

FUNCTION  <SNR>110_function()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:17
Called 16 times
Total time:   0.001975
 Self time:   0.001975

count  total (s)   self (s)
   16              0.001960   return function(substitute(a:name,'^s:',matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_'),''))

FUNCTION  <SNR>58_RgbColor()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:246
Called 2 times
Total time:   0.000179
 Self time:   0.000179

count  total (s)   self (s)
    2              0.000006   let ret = []
    2              0.000004   let place = 0
    2              0.000008   let colorpat = '\<rgb(\v\s*(\d+(\%)?)\s*,\s*(\d+%(\2))\s*,\s*(\d+%(\2))\s*\)'
    2              0.000004   while 1
    2              0.000042     let foundcolor = matchlist(a:str, colorpat, place)
    2              0.000007     if empty(foundcolor)
    2              0.000003       break
                                endif
                                let place = matchend(a:str, colorpat, place)
                                if foundcolor[2] == '%'
                                  let r = foundcolor[1] * 255 / 100
                                  let g = foundcolor[3] * 255 / 100
                                  let b = foundcolor[4] * 255 / 100
                                else
                                  let r = foundcolor[1]
                                  let g = foundcolor[3]
                                  let b = foundcolor[4]
                                endif
                                if r > 255 || g > 255 || b > 255
                                  break
                                endif
                                let pat = printf('\<rgb(\v\s*%s\s*,\s*%s\s*,\s*%s\s*\)', foundcolor[1], foundcolor[3], foundcolor[4])
                                if foundcolor[2] == '%'
                                  let pat = substitute(pat, '%', '\\%', 'g')
                                endif
                                let l:color = printf('#%02x%02x%02x', r, g, b)
                                call add(ret, [l:color, pat])
    2              0.000004   endwhile
    2              0.000004   return ret

FUNCTION  coc#util#getpid()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:649
Called 1 time
Total time:   0.000013
 Self time:   0.000013

count  total (s)   self (s)
    1              0.000007   if !has('win32unix')
    1              0.000005     return getpid()
                              endif
                            
                              let cmd = 'cat /proc/' . getpid() . '/winpid'
                              return substitute(system(cmd), '\v\n', '', 'gi')

FUNCTION  <SNR>62_FindAncestor()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:83
Called 2 times
Total time:   0.000704
 Self time:   0.000690

count  total (s)   self (s)
    2              0.000021   let fd_dir = isdirectory(s:fd) ? s:fd : fnamemodify(s:fd, ':h')
    2              0.000012   let fd_dir_escaped = escape(fd_dir, ' ')
                            
    2   0.000035   0.000025   if s:IsDirectory(a:pattern)
    1              0.000100     let match = finddir(a:pattern, fd_dir_escaped.';')
    1              0.000001   else
    1              0.000015     let [_suffixesadd, &suffixesadd] = [&suffixesadd, '']
    1              0.000406     let match = findfile(a:pattern, fd_dir_escaped.';')
    1              0.000006     let &suffixesadd = _suffixesadd
    2              0.000003   endif
                            
    2              0.000006   if empty(match)
    1              0.000002     return ''
    1              0.000001   endif
                            
    1   0.000017   0.000012   if s:IsDirectory(a:pattern)
                                " If the directory we found (`match`) is part of the file's path
                                " it is the project root and we return it.
                                "
                                " Compare with trailing path separators to avoid false positives.
    1              0.000026     if stridx(fnamemodify(fd_dir, ':p'), fnamemodify(match, ':p')) == 0
                                  return fnamemodify(match, ':p:h')
                            
                                " Else the directory we found (`match`) is a subdirectory of the
                                " project root, so return match's parent.
    1              0.000001     else
    1              0.000015       return fnamemodify(match, ':p:h:h')
                                endif
                            
                              else
                                return fnamemodify(match, ':p:h')
                              endif

FUNCTION  <SNR>95_group_not_done()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:25
Called 81 times
Total time:   0.001076
 Self time:   0.001076

count  total (s)   self (s)
   81              0.000434   if index(a:list, a:name) == -1
   81              0.000372     call add(a:list, a:name)
   81              0.000144     return 1
                              else
                                if &vbs
                                  echomsg printf("airline: group: %s already done, skipping", a:name)
                                endif
                                return 0
                              endif

FUNCTION  <SNR>95_get_syn()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:37
Called 400 times
Total time:   0.020796
 Self time:   0.020796

count  total (s)   self (s)
  400              0.001799   if !exists("g:airline_gui_mode")
                                let g:airline_gui_mode = airline#init#gui_mode()
  400              0.000350   endif
  400              0.000852   let color = ''
  400              0.002618   if hlexists(a:group)
  278              0.002894     let color = synIDattr(synIDtrans(hlID(a:group)), a:what, g:airline_gui_mode)
  400              0.000376   endif
  400              0.001404   if empty(color) || color == -1
                                " should always exists
  138              0.002022     let color = synIDattr(synIDtrans(hlID('Normal')), a:what, g:airline_gui_mode)
                                " however, just in case
  138              0.000661     if empty(color) || color == -1
                                  let color = 'NONE'
  138              0.000126     endif
  400              0.000315   endif
  400              0.000783   return color

FUNCTION  <SNR>50_PlayItCool()
    Defined: ~/.local/share/nvim/plugged/vim-cool/plugin/cool.vim:95
Called 1 time
Total time:   0.000082
 Self time:   0.000082

count  total (s)   self (s)
    1              0.000004     if a:old == 0 && a:new == 1
                                    " nohls --> hls
                                    "   set up coolness
    1              0.000019         noremap <silent> <Plug>(StopHL) :<C-U>nohlsearch<cr>
    1              0.000005         if !exists('*execute')
                                        noremap! <expr> <Plug>(StopHL) <SID>AuNohlsearch()
    1              0.000001         else
    1              0.000014             noremap! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]
    1              0.000001         endif
                            
    1              0.000007         autocmd Cool CursorMoved * call <SID>StartHL()
    1              0.000006         autocmd Cool InsertEnter * call <SID>StopHL()
                                elseif a:old == 1 && a:new == 0
                                    " hls --> nohls
                                    "   tear down coolness
                                    nunmap <Plug>(StopHL)
                                    unmap! <expr> <Plug>(StopHL)
                            
                                    autocmd! Cool CursorMoved
                                    autocmd! Cool InsertEnter
                                else
                                    " nohls --> nohls
                                    "   do nothing
                                    return
    1              0.000001     endif

FUNCTION  <SNR>41_Map()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:498
Called 2 times
Total time:   0.000494
 Self time:   0.000494

count  total (s)   self (s)
    4              0.000029   for mode in split(a:mode, '\zs')
    2              0.000022     let flags = (a:0 ? a:1 : '') . (a:rhs =~# '<Plug>' ? '' : '<script>')
    2              0.000006     let head = a:lhs
    2              0.000004     let tail = ''
    2              0.000013     let keys = get(g:, mode.'remap', {})
    2              0.000009     if type(keys) == type([])
                                  return
    2              0.000002     endif
    6              0.000019     while !empty(head)
    4              0.000015       if has_key(keys, head)
                                    let head = keys[head]
                                    if empty(head)
                                      return
                                    endif
                                    break
    4              0.000004       endif
    4              0.000064       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail
    4              0.000046       let head = substitute(head, '<[^<>]*>$\|.$', '', '')
    6              0.000008     endwhile
    2              0.000017     if flags !~# '<unique>' || empty(mapcheck(head.tail, mode))
    2              0.000053       exe mode.'map' s:nowait flags head.tail a:rhs
    2              0.000002     endif
    4              0.000007   endfor

FUNCTION  airline#parts#spell()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:67
Called 47 times
Total time:   0.002140
 Self time:   0.002140

count  total (s)   self (s)
   47              0.001000   let spelllang = g:airline_detect_spelllang ? printf(" [%s]", toupper(substitute(&spelllang, ',', '/', 'g'))) : ''
   47              0.000123   if g:airline_detect_spell && &spell
                                let winwidth = airline#util#winwidth()
                                if winwidth >= 90
                                  return g:airline_symbols.spell . spelllang
                                elseif winwidth >= 70
                                  return g:airline_symbols.spell
                                else
                                  return split(g:airline_symbols.spell, '\zs')[0]
                                endif
   47              0.000038   endif
   47              0.000071   return ''

FUNCTION  <SNR>3_lazy()
    Defined: ~/.config/nvim/autoload/plug.vim:196
Called 87 times
Total time:   0.004141
 Self time:   0.002024

count  total (s)   self (s)
   87   0.004059   0.001941   return has_key(a:plug, a:opt) && (empty(s:to_a(a:plug[a:opt]))         ||  !isdirectory(a:plug.dir)             ||  len(s:glob(s:rtp(a:plug), 'plugin')) ||  len(s:glob(s:rtp(a:plug), 'after/plugin')))

FUNCTION  <SNR>44_default_highlight()
    Defined: ~/.local/share/nvim/plugged/vim-highlightedyank/plugin/highlightedyank.vim:14
Called 1 time
Total time:   0.000026
 Self time:   0.000026

count  total (s)   self (s)
    1              0.000025   highlight default link HighlightedyankRegion IncSearch

FUNCTION  remote#define#AutocmdOnChannel()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:122
Called 1 time
Total time:   0.000187
 Self time:   0.000100

count  total (s)   self (s)
    1              0.000010   let rpcargs = [a:channel, '"'.a:method.'"']
    1   0.000044   0.000020   call s:AddEval(rpcargs, a:opts)
                            
    1   0.000106   0.000042   let autocmd_def = s:GetAutocmdPrefix(a:name, a:opts) . ' call '.s:GetRpcFunction(a:sync).'('.join(rpcargs, ', ').')'
    1              0.000026   exe autocmd_def

FUNCTION  coc#client#create()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:17
Called 1 time
Total time:   0.000070
 Self time:   0.000070

count  total (s)   self (s)
    1              0.000004   let client = {}
    1              0.000006   let client['command'] = a:command
    1              0.000003   let client['name'] = a:name
    1              0.000004   let client['running'] = 0
    1              0.000003   let client['async_req_id'] = 1
    1              0.000004   let client['async_callbacks'] = {}
                              " vim only
    1              0.000004   let client['channel'] = v:null
                              " neovim only
    1              0.000003   let client['chan_id'] = 0
    1              0.000007   let client['start'] = function('s:start', [], client)
    1              0.000005   let client['request'] = function('s:request', [], client)
    1              0.000004   let client['notify'] = function('s:notify', [], client)
    1              0.000005   let client['request_async'] = function('s:request_async', [], client)
    1              0.000009   let client['on_async_response'] = function('s:on_async_response', [], client)
    1              0.000003   let s:clients[a:name] = client
    1              0.000002   return client

FUNCTION  airline#parts#define_empty()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:43
Called 1 time
Total time:   0.001088
 Self time:   0.000315

count  total (s)   self (s)
   21              0.000040   for key in a:keys
   20   0.001015   0.000242     call airline#parts#define_raw(key, '')
   21              0.000024   endfor

FUNCTION  <SNR>96_coc_git_enabled()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:18
Called 1 time
Total time:   0.149057
 Self time:   0.000043

count  total (s)   self (s)
    1              0.000004   if !exists("*CocAction")
                                return 0
    1              0.000001   endif
    1              0.000004   if exists("s:airline_coc_git_enabled")
                                return s:airline_coc_git_enabled
    1              0.000001   endif
    1   0.149030   0.000016   let extensions=CocAction('extensionStats')
    1              0.000008   if type(extensions) != type([])
                                " not yet initialized? Assume it is available...
    1              0.000003     return 1
                              endif
                              let coc_git=filter(extensions, 'v:val.id is# "coc-git" && v:val.state is# "activated"')
                              if !empty(coc_git)
                                let s:airline_coc_git_enabled = 1
                              else
                                let s:airline_coc_git_enabled = 0
                              endif
                              return s:airline_coc_git_enabled

FUNCTION  airline#parts#crypt()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:59
Called 47 times
Total time:   0.000370
 Self time:   0.000370

count  total (s)   self (s)
   47              0.000320   return g:airline_detect_crypt && exists("+key") && !empty(&key) ? g:airline_symbols.crypt : ''

FUNCTION  remote#define#AutocmdBootstrap()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:107
Called 1 time
Total time:   0.187831
 Self time:   0.000459

count  total (s)   self (s)
    1   0.186749   0.000026   let channel = remote#host#Require(a:host)
                            
    1              0.000336   exe 'autocmd! '.a:opts.group
    1              0.000003   if channel
    1   0.000237   0.000050     call remote#define#AutocmdOnChannel(channel, a:method, a:sync, a:name, a:opts)
    1   0.000493   0.000032     exe eval(a:forward)
                              else
                                exe 'augroup! '.a:opts.group
                                echoerr 'Host "'a:host.'" for "'.a:name.'" autocmd is not available'
    1              0.000001   endif

FUNCTION  <SNR>62_ChangeToRootDirectory()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:139
Called 2 times
Total time:   0.001160
 Self time:   0.000236

count  total (s)   self (s)
                              " A directory will always have a trailing path separator.
    2              0.000044   let s:fd = expand('%:p')
                            
    2              0.000006   if empty(s:fd)
    2              0.000011     let s:fd = getcwd()
    2              0.000002   endif
                            
    2              0.000005   if g:rooter_resolve_links
                                let s:fd = resolve(s:fd)
    2              0.000002   endif
                            
    2   0.000078   0.000031   if !s:ChangeDirectoryForBuffer()
                                return
    2              0.000002   endif
                            
    2   0.000857   0.000031   let root_dir = s:RootDirectory()
    2              0.000005   if empty(root_dir)
                                " Test against 1 for backwards compatibility
                                if g:rooter_change_directory_for_non_project_files == 1 || g:rooter_change_directory_for_non_project_files ==? 'current'
                                  if expand('%') != ''
                                    call s:ChangeDirectory(fnamemodify(s:fd, ':h'))
                                  endif
                                elseif g:rooter_change_directory_for_non_project_files ==? 'home'
                                  call s:ChangeDirectory($HOME)
                                endif
    2              0.000002   else
    2   0.000078   0.000028     call s:ChangeDirectory(root_dir)
    2              0.000002   endif

FUNCTION  <SNR>82_GetNextAutocmdGroup()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:217
Called 9 times
Total time:   0.000222
 Self time:   0.000222

count  total (s)   self (s)
    9              0.000026   let gid = s:next_gid
    9              0.000026   let s:next_gid += 1
                            
    9              0.000042   let group_name = 'RPC_DEFINE_AUTOCMD_GROUP_'.gid
                              " Ensure the group is defined
    9              0.000079   exe 'augroup '.group_name.' | augroup END'
    9              0.000021   return group_name

FUNCTION  <SNR>107_section_is_empty()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:185
Called 18 times
Total time:   0.000420
 Self time:   0.000420

count  total (s)   self (s)
   18              0.000049   let start=1
                            
                              " do not check for inactive windows or the tabline
   18              0.000047   if a:self._context.active == 0
                                return 0
   18              0.000073   elseif get(a:self._context, 'tabline', 0)
                                return 0
   18              0.000015   endif
                            
                              " only check, if airline#skip_empty_sections == 1
   18              0.000084   if get(g:, 'airline_skip_empty_sections', 0) == 0
   18              0.000024     return 0
                              endif
                            
                              " only check, if airline#skip_empty_sections == 1
                              if get(w:, 'airline_skip_empty_sections', -1) == 0
                                return 0
                              endif
                              " assume accents sections to be never empty
                              " (avoides, that on startup the mode message becomes empty)
                              if match(a:content, '%#__accent_[^#]*#.*__restore__#') > -1
                                return 0
                              endif
                              if empty(a:content)
                                return 1
                              endif
                              let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              if empty(list)
                                return 0 " no function in statusline text
                              endif
                              while len(list) > 0
                                let expr = list[0]
                                try
                                  " catch all exceptions, just in case
                                  if !empty(eval(expr))
                                    return 0
                                  endif
                                catch
                                  return 0
                                endtry
                                let start += 1
                                let list=matchlist(a:content, '%{\zs.\{-}\ze}', 1, start)
                              endw
                              return 1

FUNCTION  <SNR>42_InitVariable()
    Defined: ~/.local/share/nvim/plugged/nerdcommenter/plugin/NERD_commenter.vim:36
Called 18 times
Total time:   0.000259
 Self time:   0.000259

count  total (s)   self (s)
   18              0.000070     if !exists(a:var)
   12              0.000108         execute 'let ' . a:var . ' = ' . "'" . a:value . "'"
   12              0.000019         return 1
    6              0.000006     endif
    6              0.000010     return 0

FUNCTION  airline#extensions#branch#head()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:239
Called 47 times
Total time:   0.112269
 Self time:   0.002578

count  total (s)   self (s)
   47              0.000229   if !exists('b:buffer_vcs_config')
    1   0.000063   0.000014     call s:init_buffer()
   47              0.000042   endif
                            
   47   0.108783   0.000622   call s:update_branch()
   47   0.002078   0.000699   call s:update_untracked()
                            
   47              0.000287   if exists('b:airline_head') && !empty(b:airline_head)
   46              0.000108     return b:airline_head
    1              0.000001   endif
                            
    1              0.000003   let b:airline_head = ''
    1              0.000008   let vcs_priority = get(g:, "airline#extensions#branch#vcs_priority", ["git", "mercurial"])
                            
    1              0.000003   let heads = []
    3              0.000008   for vcs in vcs_priority
    2              0.000009     if !empty(b:buffer_vcs_config[vcs].branch)
    1              0.000005       let heads += [vcs]
    2              0.000002     endif
    3              0.000004   endfor
                            
    2              0.000004   for vcs in heads
    1              0.000003     if !empty(b:airline_head)
                                  let b:airline_head .= ' | '
    1              0.000001     endif
    1              0.000003     if len(heads) > 1
                                  let b:airline_head .= s:vcs_config[vcs].exe .':'
    1              0.000001     endif
    1   0.000128   0.000025     let b:airline_head .= s:format_name({s:vcs_config[vcs].display_branch}())
    1              0.000004     let additional = b:buffer_vcs_config[vcs].untracked
    1              0.000010     if empty(additional) && has_key(b:buffer_vcs_config[vcs], 'dirty') && b:buffer_vcs_config[vcs].dirty
                                  let additional = g:airline_symbols['dirty']
    1              0.000001     endif
    1              0.000003     let b:airline_head .= additional
    2              0.000002   endfor
                            
    1              0.000002   if empty(heads)
                                if airline#util#has_vcscommand()
                                  noa call VCSCommandEnableBufferSetup()
                                  if exists('b:VCSCommandBufferInfo')
                                    let b:airline_head = s:format_name(get(b:VCSCommandBufferInfo, 0, ''))
                                  endif
                                endif
    1              0.000001   endif
                            
    1              0.000003   if empty(heads)
                                if airline#util#has_custom_scm()
                                  try
                                    let Fn = function(g:airline#extensions#branch#custom_head)
                                    let b:airline_head = Fn()
                                  endtry
                                endif
    1              0.000001   endif
                            
    1              0.000006   if exists("g:airline#extensions#branch#displayed_head_limit")
                                let w:displayed_head_limit = g:airline#extensions#branch#displayed_head_limit
                                if strwidth(b:airline_head) > w:displayed_head_limit - 1
                                  let b:airline_head = airline#util#strcharpart(b:airline_head, 0, w:displayed_head_limit - 1) . (&encoding ==? 'utf-8' ?  '…' : '.')
                                endif
    1              0.000001   endif
                            
    1              0.000003   return b:airline_head

FUNCTION  airline#extensions#load_theme()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:130
Called 1 time
Total time:   0.000039
 Self time:   0.000025

count  total (s)   self (s)
    1   0.000038   0.000023   call airline#util#exec_funcrefs(s:ext._theme_funcrefs, g:airline#themes#{g:airline_theme}#palette)

FUNCTION  WebDevIconsGetFileFormatSymbol()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:533
Called 47 times
Total time:   0.112245
 Self time:   0.013497

count  total (s)   self (s)
   47              0.000188   let fileformat = ''
   47              0.000097   let bomb = ''
                            
   47              0.000207   if (&bomb && g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol !=? '')
                                let bomb = g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol . ' '
   47              0.000047   endif
                            
   47              0.000142   if &fileformat ==? 'dos'
                                let fileformat = ''
   47              0.000122   elseif &fileformat ==? 'unix'
   47   0.019031   0.010282     if s:isDarwin()
                                  let fileformat = ''
   47              0.000054     else
   47   0.089949   0.000608       let fileformat = s:getDistro()
   47              0.000055     endif
                              elseif &fileformat ==? 'mac'
                                let fileformat = ''
   47              0.000044   endif
                            
   47   0.001343   0.000684   let artifactFix = s:DevIconsGetArtifactFix()
                            
   47              0.000196   return bomb . fileformat . artifactFix

FUNCTION  airline#parts#mode()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:55
Called 47 times
Total time:   0.003216
 Self time:   0.000829

count  total (s)   self (s)
   47   0.003162   0.000775   return airline#util#shorten(get(w:, 'airline_current_mode', ''), 79, 1)

FUNCTION  <SNR>45_persistCache()
    Defined: ~/.local/share/nvim/plugged/semantic-highlight.vim/plugin/semhl.vim:75
Called 1 time
Total time:   0.000183
 Self time:   0.000087

count  total (s)   self (s)
    1              0.000010 	let l:cacheList = []
    1   0.000121   0.000024 	let l:mergedCache = extend(s:readCache(), s:cache)
    1              0.000006 	for [match,color] in items(l:mergedCache)
                            		call add(l:cacheList, string([match, color]))
                            		unlet match color
    1              0.000001 	endfor
    1              0.000035 	call writefile(l:cacheList, g:semanticPersistCacheLocation)

FUNCTION  coc#util#get_bufoptions()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:299
Called 1 time
Total time:   0.000304
 Self time:   0.000073

count  total (s)   self (s)
    1              0.000008   if !bufloaded(a:bufnr) | return v:null | endif
    1              0.000004   let bufname = bufname(a:bufnr)
    1   0.000289   0.000058   return { 'bufname': bufname, 'size': getfsize(bufname), 'eol': getbufvar(a:bufnr, '&eol'), 'variables': s:variables(a:bufnr), 'fullpath': empty(bufname) ? '' : fnamemodify(bufname, ':p'), 'buftype': getbufvar(a:bufnr, '&buftype'), 'filetype': getbufvar(a:bufnr, '&filetype'), 'iskeyword': getbufvar(a:bufnr, '&iskeyword'), 'changedtick': getbufvar(a:bufnr, 'changedtick'),}

FUNCTION  airline#extensions#quickfix#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/quickfix.vim:14
Called 2 times
Total time:   0.000031
 Self time:   0.000031

count  total (s)   self (s)
    2              0.000009   if &buftype == 'quickfix'
                                let w:airline_section_a = airline#extensions#quickfix#get_type()
                                let w:airline_section_b = '%{get(w:, "quickfix_title", "")}'
                                let w:airline_section_c = ''
                                let w:airline_section_x = ''
    2              0.000002   endif

FUNCTION  colorizer#ColorHighlight()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:349
Called 2 times
Total time:   0.001999
 Self time:   0.000855

count  total (s)   self (s)
    2              0.000010   if exists('w:colormatches')
    1              0.000002     if !a:update
                                  return
    1              0.000001     endif
    1   0.000042   0.000013     call s:ClearMatches()
    2              0.000003   endif
    2              0.000011   if (g:colorizer_maxlines > 0) && (g:colorizer_maxlines <= line('$'))
                                return
    2              0.000002   end
    2              0.000010   let w:colormatches = {}
    2              0.000014   if g:colorizer_fgcontrast != s:saved_fgcontrast || (exists("a:1") && a:1 == '!')
                                let s:force_group_update = 1
    2              0.000002   endif
    4              0.000017   for i in range(1, line("$"))
    2   0.001151   0.000035     call s:PreviewColorInLine(i)
    4              0.000005   endfor
    2              0.000006   let s:force_group_update = 0
    2              0.000008   let s:saved_fgcontrast = g:colorizer_fgcontrast
    2              0.000007   augroup Colorizer
    2              0.000536     au!
    2              0.000012     if exists('##TextChanged')
    2              0.000027       autocmd TextChanged * silent call s:TextChanged()
    2              0.000010       if v:version > 704 || v:version == 704 && has('patch143')
    2              0.000015         autocmd TextChangedI * silent call s:TextChanged()
                                  else
                                    " TextChangedI does not work as expected
                                    autocmd CursorMovedI * silent call s:CursorMoved()
    2              0.000002       endif
                                else
                                  autocmd CursorMoved,CursorMovedI * silent call s:CursorMoved()
    2              0.000002     endif
                                " rgba handles differently, so need updating
    2              0.000013     autocmd GUIEnter * silent call colorizer#ColorHighlight(1)
    2              0.000010     autocmd BufEnter * silent call colorizer#ColorHighlight(1)
    2              0.000012     autocmd WinEnter * silent call colorizer#ColorHighlight(1)
    2              0.000015     autocmd ColorScheme * let s:force_group_update=1 | silent call colorizer#ColorHighlight(1)
    2              0.000003   augroup END

FUNCTION  <SNR>65_SyncAutocmd()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:166
Called 2 times
Total time:   0.023516
 Self time:   0.000070

count  total (s)   self (s)
    2              0.000011   if !get(g:,'coc_workspace_initialized', 0)
                                return
    2              0.000002   endif
    2              0.000007   if get(g:, 'coc_service_initialized', 0)
    2   0.023473   0.000027     call coc#rpc#request('CocAutocmd', a:000)
                              else
                                call coc#rpc#notify('CocAutocmd', a:000)
    2              0.000002   endif

FUNCTION  <SNR>97_update_branch()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:173
Called 47 times
Total time:   0.108162
 Self time:   0.004741

count  total (s)   self (s)
  141              0.000534   for vcs in keys(s:vcs_config)
   94   0.105479   0.002059     call {s:vcs_config[vcs].update_branch}()
   94              0.000631     if b:buffer_vcs_config[vcs].branch != s:vcs_config[vcs].branch
    1              0.000006       let b:buffer_vcs_config[vcs].branch = s:vcs_config[vcs].branch
    1              0.000003       unlet! b:airline_head
   94              0.000094     endif
  141              0.000190   endfor

FUNCTION  fugitive#Find()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/autoload/fugitive.vim:918
Called 47 times
Total time:   0.037305
 Self time:   0.027192

count  total (s)   self (s)
   47              0.000236   if type(a:object) == type(0)
                                let name = bufname(a:object)
                                return FugitiveVimPath(name =~# '^$\|^/\|^\a\+:' ? name : getcwd() . '/' . name)
   47              0.000419   elseif a:object =~# '^[~$]'
                                let prefix = matchstr(a:object, '^[~$]\i*')
                                let owner = expand(prefix)
                                return FugitiveVimPath((len(owner) ? owner : prefix) . strpart(a:object, len(prefix)))
   47   0.007239   0.006659   elseif s:Slash(a:object) =~# '^$\|^/\|^\%(\a\a\+:\).*\%(//\|::\)' . (has('win32') ? '\|^\a:/' : '')
                                return FugitiveVimPath(a:object)
   47   0.001428   0.000915   elseif s:Slash(a:object) =~# '^\.\.\=\%(/\|$\)'
                                return FugitiveVimPath(simplify(getcwd() . '/' . a:object))
   47              0.000044   endif
   47              0.000237   let dir = a:0 ? a:1 : s:Dir()
   47              0.000137   if empty(dir)
                                let file = matchstr(a:object, '^\%(:\d:\|[^:]*:\)\zs.*', '', '')
                                let dir = FugitiveExtractGitDir(file)
                                if empty(dir)
                                  return fnamemodify(FugitiveVimPath(len(file) ? file : a:object), ':p')
                                endif
   47              0.000038   endif
   47   0.001038   0.000536   let rev = s:Slash(a:object)
   47   0.006079   0.000527   let tree = s:Tree(dir)
   47              0.000237   let base = len(tree) ? tree : 'fugitive://' . dir . '//0'
   47              0.000100   if rev ==# '.git'
                                let f = len(tree) ? tree . '/.git' : dir
   47              0.000337   elseif rev =~# '^\.git/'
   47              0.000461     let f = substitute(rev, '^\.git', '', '')
   47   0.002738   0.000636     let cdir = fugitive#CommonDir(dir)
   47              0.000365     if f =~# '^/\.\./\.\.\%(/\|$\)'
                                  let f = simplify(len(tree) ? tree . f[3:-1] : dir . f)
   47              0.000277     elseif f =~# '^/\.\.\%(/\|$\)'
                                  let f = base . f[3:-1]
   47              0.000445     elseif cdir !=# dir && ( f =~# '^/\%(config\|hooks\|info\|logs/refs\|objects\|refs\|worktrees\)\%(/\|$\)' || f !~# '^/\%(index$\|index\.lock$\|\w*MSG$\|\w*HEAD$\|logs/\w*HEAD$\|logs$\|rebase-\w\+\)\%(/\|$\)' && getftime(FugitiveVimPath(dir . f)) < 0 && getftime(FugitiveVimPath(cdir . f)) >= 0)
                                  let f = simplify(cdir . f)
   47              0.000046     else
   47              0.000262       let f = simplify(dir . f)
   47              0.000046     endif
                              elseif rev ==# ':/'
                                let f = base
                              elseif rev =~# '^\.\%(/\|$\)'
                                let f = base . rev[1:-1]
                              elseif rev =~# '^::\%(/\|\a\+\:\)'
                                let f = rev[2:-1]
                              elseif rev =~# '^::\.\.\=\%(/\|$\)'
                                let f = simplify(getcwd() . '/' . rev[2:-1])
                              elseif rev =~# '^::'
                                let f = base . '/' . rev[2:-1]
                              elseif rev =~# '^:\%([0-3]:\)\=\.\.\=\%(/\|$\)\|^:[0-3]:\%(/\|\a\+:\)'
                                let f = rev =~# '^:\%([0-3]:\)\=\.' ? simplify(getcwd() . '/' . matchstr(rev, '\..*')) : rev[3:-1]
                                if s:cpath(base . '/', (f . '/')[0 : len(base)])
                                  let f = 'fugitive://' . dir . '//' . +matchstr(rev, '^:\zs\d\ze:') . '/' . strpart(f, len(base) + 1)
                                else
                                  let altdir = FugitiveExtractGitDir(f)
                                  if len(altdir) && !s:cpath(dir, altdir)
                                    return fugitive#Find(a:object, altdir)
                                  endif
                                endif
                              elseif rev =~# '^:[0-3]:'
                                let f = 'fugitive://' . dir . '//' . rev[1] . '/' . rev[3:-1]
                              elseif rev ==# ':'
                                if $GIT_INDEX_FILE =~# '/[^/]*index[^/]*\.lock$' && s:cpath(fnamemodify($GIT_INDEX_FILE,':p')[0:strlen(dir)]) ==# s:cpath(dir . '/') && filereadable($GIT_INDEX_FILE)
                                  let f = fnamemodify($GIT_INDEX_FILE, ':p')
                                else
                                  let f = fugitive#Find('.git/index', dir)
                                endif
                              elseif rev =~# '^:(\%(top\|top,literal\|literal,top\|literal\))'
                                let f = matchstr(rev, ')\zs.*')
                                if f=~# '^\.\.\=\%(/\|$\)'
                                  let f = simplify(getcwd() . '/' . f)
                                elseif f !~# '^/\|^\%(\a\a\+:\).*\%(//\|::\)' . (has('win32') ? '\|^\a:/' : '')
                                  let f = base . '/' . f
                                endif
                              elseif rev =~# '^:/\@!'
                                let f = 'fugitive://' . dir . '//0/' . rev[1:-1]
                              else
                                if !exists('f')
                                  let commit = substitute(matchstr(rev, '^\%([^:.-]\|\.\.[^/:]\)[^:]*\|^:.*'), '^@\%($\|[~^]\|@{\)\@=', 'HEAD', '')
                                  let file = substitute(matchstr(rev, '^\%([^:.-]\|\.\.[^/:]\)[^:]*\zs:.*'), '^:', '/', '')
                                  if file =~# '^/\.\.\=\%(/\|$\)\|^//\|^/\a\+:'
                                    let file = file =~# '^/\.' ? simplify(getcwd() . file) : file[1:-1]
                                    if s:cpath(base . '/', (file . '/')[0 : len(base)])
                                      let file = '/' . strpart(file, len(base) + 1)
                                    else
                                      let altdir = FugitiveExtractGitDir(file)
                                      if len(altdir) && !s:cpath(dir, altdir)
                                        return fugitive#Find(a:object, altdir)
                                      endif
                                      return file
                                    endif
                                  endif
                                  let commits = split(commit, '\.\.\.-\@!', 1)
                                  if len(commits) == 2
                                    call map(commits, 'empty(v:val) || v:val ==# "@" ? "HEAD" : v:val')
                                    let commit = matchstr(s:ChompDefault('', [dir, 'merge-base'] + commits + ['--']), '\<[0-9a-f]\{40,\}\>')
                                  endif
                                  if commit !~# '^[0-9a-f]\{40,\}$'
                                    let commit = matchstr(s:ChompDefault('', [dir, 'rev-parse', '--verify', commit . (len(file) ? '^{}' : ''), '--']), '\<[0-9a-f]\{40,\}\>')
                                  endif
                                  if len(commit)
                                    let f = 'fugitive://' . dir . '//' . commit . file
                                  else
                                    let f = base . '/' . substitute(rev, '^:/:\=\|^[^:]\+:', '', '')
                                  endif
                                endif
   47              0.000042   endif
   47   0.001420   0.000556   return FugitiveVimPath(f)

FUNCTION  <SNR>82_GetRpcFunction()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:175
Called 1 time
Total time:   0.000011
 Self time:   0.000011

count  total (s)   self (s)
    1              0.000003   if a:sync ==# 'urgent'
                                return 'rpcnotify'
    1              0.000002   elseif a:sync
    1              0.000003     return 'remote#define#request'
                              endif
                              return 'remote#define#notify'

FUNCTION  airline#parts#define()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/parts.vim:10
Called 52 times
Total time:   0.001553
 Self time:   0.001553

count  total (s)   self (s)
   52              0.000383   let s:parts[a:key] = get(s:parts, a:key, {})
   52              0.000230   if exists('g:airline#init#bootstrapping')
   41              0.000280     call extend(s:parts[a:key], a:config, 'keep')
   11              0.000015   else
   11              0.000121     call extend(s:parts[a:key], a:config, 'force')
   52              0.000207   endif

FUNCTION  airline#extensions#hunks#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:137
Called 1 time
Total time:   0.000069
 Self time:   0.000018

count  total (s)   self (s)
    1   0.000068   0.000017   call airline#parts#define_function('hunks', 'airline#extensions#hunks#get_hunks')

FUNCTION  CocAction()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:24
Called 1 time
Total time:   0.149014
 Self time:   0.000015

count  total (s)   self (s)
    1   0.149013   0.000014   return coc#rpc#request('CocAction', a:000)

FUNCTION  <SNR>3_esc()
    Defined: ~/.config/nvim/autoload/plug.vim:383
Called 16 times
Total time:   0.000125
 Self time:   0.000125

count  total (s)   self (s)
   16              0.000110   return escape(a:path, ' ')

FUNCTION  airline#extensions#fugitiveline#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim:43
Called 1 time
Total time:   0.000093
 Self time:   0.000044

count  total (s)   self (s)
    1              0.000007   if exists("+autochdir") && &autochdir
                                " if 'acd' is set, vim-airline uses the path section, so we need to redefine this here as well
                                call airline#parts#define_raw('path', '%<%{airline#extensions#fugitiveline#bufname()}%m')
    1              0.000001   else
    1   0.000063   0.000014     call airline#parts#define_raw('file', '%<%{airline#extensions#fugitiveline#bufname()}%m')
    1              0.000001   endif
    1              0.000008   autocmd ShellCmdPost,CmdwinLeave * unlet! b:fugitive_name
    1              0.000004   autocmd User AirlineBeforeRefresh unlet! b:fugitive_name

FUNCTION  airline#add_inactive_statusline_func()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:35
Called 2 times
Total time:   0.000015
 Self time:   0.000015

count  total (s)   self (s)
    2              0.000014   call add(s:inactive_funcrefs, function(a:name))

FUNCTION  search_pulse#PulseFirst()
    Defined: ~/.local/share/nvim/plugged/vim-search-pulse/autoload/search_pulse.vim:62
Called 1 time
Total time:   0.000029
 Self time:   0.000029

count  total (s)   self (s)
    1              0.000010   let t = getcmdtype()
                            
    1              0.000007   if t == '/' || t == '?'
                                return "\<cr>:call search_pulse#Pulse()\<cr>"
    1              0.000002   endif
                            
    1              0.000003   return "\<cr>"

FUNCTION  <SNR>82_GetAutocmdPrefix()
    Defined: /usr/share/nvim/runtime/autoload/remote/define.vim:228
Called 2 times
Total time:   0.000102
 Self time:   0.000102

count  total (s)   self (s)
    2              0.000009   if has_key(a:opts, 'group')
    2              0.000007     let group = a:opts.group
                              else
                                let group = s:GetNextAutocmdGroup()
    2              0.000002   endif
    2              0.000010   let rv = ['autocmd!', group, a:name]
                            
    2              0.000008   if has_key(a:opts, 'pattern')
    2              0.000010     call add(rv, a:opts.pattern)
                              else
                                call add(rv, '*')
    2              0.000002   endif
                            
    2              0.000008   if has_key(a:opts, 'nested') && a:opts.nested
                                call add(rv, 'nested')
    2              0.000002   endif
                            
    2              0.000014   return join(rv, ' ')

FUNCTION  <SNR>65_Enable()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:177
Called 1 time
Total time:   0.000677
 Self time:   0.000671

count  total (s)   self (s)
    1              0.000007   if get(g:, 'coc_enabled', 0) == 1
                                return
    1              0.000001   endif
    1              0.000005   let g:coc_enabled = 1
                            
    1              0.000007   augroup coc_nvim
    1              0.000290     autocmd!
                            
    1              0.000008     if exists('##MenuPopupChanged') && exists('*nvim_open_win')
                                  autocmd MenuPopupChanged *   call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)
    1              0.000001     endif
    1              0.000003     if exists('##CompleteChanged')
    1              0.000013       autocmd CompleteChanged *   call s:Autocmd('MenuPopupChanged', get(v:, 'event', {}), win_screenpos(winnr())[0] + winline() - 2)
    1              0.000001     endif
    1              0.000006     if exists('##MenuPopupChanged') || exists('##CompleteChanged')
    1              0.000009       autocmd CompleteDone      * call coc#util#close_popup()
    1              0.000001     endif
                            
    1   0.000024   0.000018     if coc#rpc#started()
    1              0.000008       autocmd VimEnter            * call coc#rpc#notify('VimEnter', [])
                                elseif get(g:, 'coc_start_at_startup', 1)
                                  autocmd VimEnter            * call coc#rpc#start_server()
    1              0.000001     endif
    1              0.000002     if s:is_vim
                                  if exists('##DirChanged')
                                    autocmd DirChanged        * call s:Autocmd('DirChanged', expand('<afile>'))
                                  endif
                                  if exists('##TerminalOpen')
                                    autocmd TerminalOpen      * call s:Autocmd('TermOpen', +expand('<abuf>'))
                                  endif
    1              0.000001     else
    1              0.000006       autocmd DirChanged        * call s:Autocmd('DirChanged', get(v:event, 'cwd', ''))
    1              0.000007       autocmd TermOpen          * call s:Autocmd('TermOpen', +expand('<abuf>'))
    1              0.000007       autocmd TermClose         * call s:Autocmd('TermClose', +expand('<abuf>'))
    1              0.000001     endif
    1              0.000009     autocmd WinLeave            * call coc#util#clearmatches(get(w:, 'coc_matchids', []))
    1              0.000007     autocmd BufWinLeave         * call s:Autocmd('BufWinLeave', +expand('<abuf>'), win_getid())
    1              0.000008     autocmd BufWinEnter         * call s:Autocmd('BufWinEnter', +expand('<abuf>'), win_getid())
    1              0.000007     autocmd FileType            * call s:Autocmd('FileType', expand('<amatch>'), +expand('<abuf>'))
    1              0.000005     autocmd CompleteDone        * call s:Autocmd('CompleteDone', get(v:, 'completed_item', {}))
    1              0.000007     autocmd InsertCharPre       * call s:Autocmd('InsertCharPre', v:char)
    1              0.000005     if exists('##TextChangedP')
    1              0.000008       autocmd TextChangedP        * call s:Autocmd('TextChangedP', +expand('<abuf>'))
    1              0.000001     endif
    1              0.000009     autocmd TextChangedI        * call s:Autocmd('TextChangedI', +expand('<abuf>'))
    1              0.000007     autocmd InsertLeave         * call s:Autocmd('InsertLeave', +expand('<abuf>'))
    1              0.000008     autocmd InsertEnter         * call s:Autocmd('InsertEnter', +expand('<abuf>'))
    1              0.000005     autocmd BufHidden           * call s:Autocmd('BufHidden', +expand('<abuf>'))
    1              0.000007     autocmd BufEnter            * call s:Autocmd('BufEnter', +expand('<abuf>'))
    1              0.000009     autocmd TextChanged         * call s:Autocmd('TextChanged', +expand('<abuf>'), getbufvar(+expand('<abuf>'), 'changedtick'))
    1              0.000006     autocmd BufWritePost        * call s:Autocmd('BufWritePost', +expand('<abuf>'))
    1              0.000007     autocmd CursorMoved         * call s:Autocmd('CursorMoved', +expand('<abuf>'), [line('.'), col('.')])
    1              0.000007     autocmd CursorMovedI        * call s:Autocmd('CursorMovedI', +expand('<abuf>'), [line('.'), col('.')])
    1              0.000008     autocmd CursorHold          * call s:Autocmd('CursorHold', +expand('<abuf>'))
    1              0.000006     autocmd CursorHoldI         * call s:Autocmd('CursorHoldI', +expand('<abuf>'))
    1              0.000011     autocmd BufNewFile,BufReadPost * call s:Autocmd('BufCreate', +expand('<abuf>'))
    1              0.000007     autocmd BufUnload           * call s:SyncAutocmd('BufUnload', +expand('<abuf>'))
    1              0.000006     autocmd BufWritePre         * call s:SyncAutocmd('BufWritePre', +expand('<abuf>'))
    1              0.000008     autocmd FocusGained         * if mode() !~# '^c' | call s:Autocmd('FocusGained') | endif
    1              0.000009     autocmd VimResized          * call s:Autocmd('VimResized', &columns, &lines)
    1              0.000006     autocmd VimLeavePre         * let g:coc_vim_leaving = 1
    1              0.000008     autocmd VimLeave            * call s:SyncAutocmd('VimLeave')
    1              0.000030     autocmd BufReadCmd,FileReadCmd,SourceCmd list://* call coc#list#setup(expand('<amatch>'))
    1              0.000011     autocmd BufWriteCmd __coc_refactor__* :call coc#rpc#notify('saveRefactor', [+expand('<abuf>')])
    1              0.000001   augroup end

FUNCTION  <SNR>68_notify()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:155
Called 4 times
Total time:   0.000452
 Self time:   0.000408

count  total (s)   self (s)
    4   0.000103   0.000059   let channel = coc#client#get_channel(self)
    4              0.000012   if empty(channel)
                                return ''
    4              0.000004   endif
    4              0.000006   try
    4              0.000007     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
    4              0.000005     else
    4              0.000100       call call('rpcnotify', [channel, a:method] + a:args)
    4              0.000006     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
    4              0.000008   endtry

FUNCTION  coc#util#version()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:146
Called 1 time
Total time:   0.003387
 Self time:   0.003387

count  total (s)   self (s)
    1              0.000002   if s:is_vim
                                return string(v:versionlong)
    1              0.000001   endif
    1              0.003331   let c = execute('silent version')
    1              0.000042   let lines = split(matchstr(c,  'NVIM v\zs[^\n-]*'))
    1              0.000005   return lines[0]

FUNCTION  remote#host#RegisterPlugin()
    Defined: /usr/share/nvim/runtime/autoload/remote/host.vim:69
Called 2 times
Total time:   0.003068
 Self time:   0.001413

count  total (s)   self (s)
    2   0.000078   0.000041   let plugins = remote#host#PluginsForHost(a:host)
                            
    2              0.000007   for plugin in plugins
                                if plugin.path == a:path
                                  throw 'Plugin "'.a:path.'" is already registered'
                                endif
    2              0.000004   endfor
                            
    2   0.000055   0.000029   if has_key(s:hosts, a:host) && remote#host#IsRunning(a:host)
                                " For now we won't allow registration of plugins when the host is already
                                " running.
                                throw 'Host "'.a:host.'" is already running'
    2              0.000002   endif
                            
   12              0.000024   for spec in a:specs
   10              0.000041     let type = spec.type
   10              0.000023     let name = spec.name
   10              0.000022     let sync = spec.sync
   10              0.000022     let opts = spec.opts
   10              0.000027     let rpc_method = a:path
   10              0.000026     if type == 'command'
    1              0.000005       let rpc_method .= ':command:'.name
    1   0.000390   0.000023       call remote#define#CommandOnHost(a:host, rpc_method, sync, name, opts)
    9              0.000021     elseif type == 'autocmd'
                                  " Since multiple handlers can be attached to the same autocmd event by a
                                  " single plugin, we need a way to uniquely identify the rpc method to
                                  " call.  The solution is to append the autocmd pattern to the method
                                  " name(This still has a limit: one handler per event/pattern combo, but
                                  " there's no need to allow plugins define multiple handlers in that case)
    1              0.000009       let rpc_method .= ':autocmd:'.name.':'.get(opts, 'pattern', '*')
    1   0.000190   0.000018       call remote#define#AutocmdOnHost(a:host, rpc_method, sync, name, opts)
    8              0.000020     elseif type == 'function'
    8              0.000037       let rpc_method .= ':function:'.name
    8   0.001667   0.000615       call remote#define#FunctionOnHost(a:host, rpc_method, sync, name, opts)
                                else
                                  echoerr 'Invalid declaration type: '.type
   10              0.000010     endif
   12              0.000015   endfor
                            
    2              0.000018   call add(plugins, {'path': a:path, 'specs': a:specs})

FUNCTION  <SNR>97_update_git_branch()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:87
Called 47 times
Total time:   0.096843
 Self time:   0.013604

count  total (s)   self (s)
   47   0.001354   0.000680   call airline#util#ignore_next_focusgain()
   47   0.001141   0.000580   if !airline#util#has_fugitive() && !airline#util#has_gina()
                                let s:vcs_config['git'].branch = ''
                                return
   47              0.000038   endif
   47   0.000978   0.000486   if airline#util#has_fugitive()
   47   0.081554   0.000875     let s:vcs_config['git'].branch = exists("*FugitiveHead") ? FugitiveHead(s:sha1size) : fugitive#head(s:sha1size)
   47   0.010340   0.009507     if s:vcs_config['git'].branch is# 'master' && airline#util#winwidth() < 81
                                  " Shorten default a bit
                                  let s:vcs_config['git'].branch='mas'
   47              0.000046     endif
                              else
                                try
                                  let g:gina#component#repo#commit_length = s:sha1size
                                  let s:vcs_config['git'].branch = gina#component#repo#branch()
                                catch
                                endtry
                                if s:vcs_config['git'].branch is# 'master' && airline#util#winwidth() < 81
                                  " Shorten default a bit
                                  let s:vcs_config['git'].branch='mas'
                                endif
   47              0.000042   endif

FUNCTION  airline#statusline()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline.vim:190
Called 47 times
Total time:   0.001497
 Self time:   0.001497

count  total (s)   self (s)
   47              0.000589   if has_key(s:contexts, a:winnr)
   47              0.000765     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
                              endif
                              " in rare circumstances this happens...see #276
                              return ''

FUNCTION  <SNR>52_do_vim_enter()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:50
Called 1 time
Total time:   0.000109
 Self time:   0.000035

count  total (s)   self (s)
                              " Needed for the Vista extension #2009
    1              0.000012   if get(g:, 'airline#extensions#vista#enabled', 1) && exists(':Vista')
                                call vista#RunForNearestMethodOrFunction()
    1              0.000001   endif
    1   0.000090   0.000016   call <sid>on_window_changed('VimEnter')

FUNCTION  <SNR>3_parse_options()
    Defined: ~/.config/nvim/autoload/plug.vim:569
Called 23 times
Total time:   0.001345
 Self time:   0.001328

count  total (s)   self (s)
   23              0.000123   let opts = copy(s:base_spec)
   23              0.000104   let type = type(a:arg)
   23              0.000063   if type == s:TYPE.string
                                let opts.tag = a:arg
   23              0.000055   elseif type == s:TYPE.dict
   23              0.000149     call extend(opts, a:arg)
   23              0.000083     if has_key(opts, 'dir')
    1   0.000401   0.000383       let opts.dir = s:dirpath(expand(opts.dir))
   23              0.000024     endif
                              else
                                throw 'Invalid argument type (expected: string or dictionary)'
   23              0.000022   endif
   23              0.000047   return opts

FUNCTION  <SNR>58_PreviewColorInLine()
    Defined: ~/.local/share/nvim/plugged/colorizer/autoload/colorizer.vim:316
Called 2 times
Total time:   0.001115
 Self time:   0.000221

count  total (s)   self (s)
    2              0.000011   let line = getline(a:where)
    8              0.000025   for Func in s:ColorFinder
    6   0.000994   0.000100     let ret = Func(line, a:where)
                                " returned a list of a list: color as #rrggbb, text pattern to highlight
    6              0.000013     for r in ret
                                  call s:SetMatcher(r[0], r[1])
    6              0.000007     endfor
    8              0.000011   endfor

FUNCTION  <SNR>108_add_section()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/default.vim:47
Called 16 times
Total time:   0.002898
 Self time:   0.001072

count  total (s)   self (s)
   16              0.000115     let condition = (a:key is# "warning" || a:key is# "error") && (v:version == 704 && !has("patch1511"))
                                " i have no idea why the warning section needs special treatment, but it's
                                " needed to prevent separators from showing up
   16   0.000509   0.000145     if ((a:key == 'error' || a:key == 'warning') && empty(s:get_section(a:context.winnr, a:key)))
                                  return
   16              0.000013     endif
   16              0.000023     if condition
                                  call a:builder.add_raw('%(')
   16              0.000012     endif
   16   0.001826   0.000365     call a:builder.add_section('airline_'.a:key, s:get_section(a:context.winnr, a:key))
   16              0.000026     if condition
                                  call a:builder.add_raw('%)')
   16              0.000014     endif

FUNCTION  <SNR>89_Filter()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:286
Called 2 times
Total time:   0.000098
 Self time:   0.000098

count  total (s)   self (s)
    2              0.000015     if index(g:indentLine_fileTypeExclude, &filetype) != -1
                                    return 0
    2              0.000002     endif
                            
    2              0.000012     if index(g:indentLine_bufTypeExclude, &buftype) != -1
                                    return 0
    2              0.000002     endif
                            
    2              0.000012     if len(g:indentLine_fileType) != 0 && index(g:indentLine_fileType, &filetype) == -1
                                    return 0
    2              0.000002     endif
                            
    2              0.000008     for name in g:indentLine_bufNameExclude
                                    if matchstr(bufname(''), name) == bufname('')
                                        return 0
                                    endif
    2              0.000003     endfor
                            
    2              0.000003     return 1

FUNCTION  airline#extensions#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions.vim:70
Called 2 times
Total time:   0.000354
 Self time:   0.000196

count  total (s)   self (s)
    2              0.000014   let filetype_overrides = get(s:, 'filetype_overrides', {})
    2              0.000021   call extend(filetype_overrides, get(g:, 'airline_filetype_overrides', {}), 'force')
                            
    2   0.000183   0.000025   if s:is_excluded_window()
                                return -1
    2              0.000001   endif
                            
    2              0.000005   if &buftype == 'terminal'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
    2              0.000002   endif
                            
    2              0.000009   if &previewwindow && empty(get(w:, 'airline_section_a', ''))
                                let w:airline_section_a = 'Preview'
                                let w:airline_section_b = ''
                                let w:airline_section_c = bufname(winbufnr(winnr()))
    2              0.000002   endif
                            
    2              0.000021   if has_key(filetype_overrides, &ft) && ((&filetype == 'help' && &buftype == 'help') || &filetype !~ 'help')
                                " for help files only override it, if the buftype is also of type 'help',
                                " else it would trigger when editing Vim help files
                                let args = filetype_overrides[&ft]
                                call airline#extensions#apply_left_override(args[0], args[1])
    2              0.000002   endif
                            
    2              0.000005   if &buftype == 'help'
                                let w:airline_section_x = ''
                                let w:airline_section_y = ''
                                let w:airline_render_right = 1
    2              0.000001   endif
                            
    2              0.000011   for item in items(s:filetype_regex_overrides)
                                if match(&ft, item[0]) >= 0
                                  call airline#extensions#apply_left_override(item[1][0], item[1][1])
                                endif
    2              0.000002   endfor

FUNCTION  <SNR>60_isDarwin()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:122
Called 47 times
Total time:   0.008749
 Self time:   0.000580

count  total (s)   self (s)
   47              0.000252   if exists('s:is_darwin')
   46              0.000121     return s:is_darwin
    1              0.000001   endif
                            
    1              0.000003   if exists('g:WebDevIconsOS')
                                let s:is_darwin = g:WebDevIconsOS ==? 'Darwin'
                                return s:is_darwin
    1              0.000001   endif
                            
    1              0.000006   if has('macunix')
                                let s:is_darwin = 1
                                return s:is_darwin
    1              0.000001   endif
                            
    1              0.000003   if ! has('unix')
                                let s:is_darwin = 0
                                return s:is_darwin
    1              0.000001   endif
                            
    1   0.008215   0.000046   if system('uname -s') ==# "Darwin\n"
                                let s:is_darwin = 1
    1              0.000003   else
    1              0.000014     let s:is_darwin = 0
    1              0.000002   endif
                            
    1              0.000009   return s:is_darwin

FUNCTION  <SNR>60_initialize()
    Defined: ~/.local/share/nvim/plugged/vim-devicons/plugin/webdevicons.vim:424
Called 1 time
Total time:   0.002854
 Self time:   0.000111

count  total (s)   self (s)
    1   0.002636   0.000014   call s:setDictionaries()
    1   0.000129   0.000024   call s:setSyntax()
    1   0.000032   0.000016   call s:setCursorHold()
                            
    1              0.000009   if exists('g:loaded_flagship') | call devicons#plugins#flagship#init() | endif
    1              0.000008   if exists('g:loaded_unite') && g:webdevicons_enable_unite | call devicons#plugins#unite#init() | endif
    1              0.000007   if exists('g:loaded_denite') && g:webdevicons_enable_denite | call devicons#plugins#denite#init() | endif
    1              0.000014   if exists('g:loaded_vimfiler') && g:webdevicons_enable_vimfiler | call devicons#plugins#vimfiler#init() | endif
    1              0.000008   if exists('g:loaded_ctrlp') && g:webdevicons_enable_ctrlp | call devicons#plugins#ctrlp#init() | endif
    1              0.000007   if exists('g:loaded_startify') && g:webdevicons_enable_startify | call devicons#plugins#startify#init() | endif

FUNCTION  coc#util#vim_info()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:658
Called 1 time
Total time:   0.003692
 Self time:   0.000187

count  total (s)   self (s)
    1   0.003687   0.000182   return { 'mode': mode(), 'floating': has('nvim') && exists('*nvim_open_win') ? v:true : v:false, 'extensionRoot': coc#util#extension_root(), 'watchExtensions': get(g:, 'coc_watch_extensions', []), 'globalExtensions': get(g:, 'coc_global_extensions', []), 'config': get(g:, 'coc_user_config', {}), 'pid': coc#util#getpid(), 'columns': &columns, 'lines': &lines, 'cmdheight': &cmdheight, 'filetypeMap': get(g:, 'coc_filetype_map', {}), 'version': coc#util#version(), 'completeOpt': &completeopt, 'pumevent': exists('##MenuPopupChanged') || exists('##CompleteChanged'), 'isVim': has('nvim') ? v:false : v:true, 'isCygwin': has('win32unix') ? v:true : v:false, 'isMacvim': has('gui_macvim') ? v:true : v:false, 'isiTerm': $TERM_PROGRAM ==# "iTerm.app", 'colorscheme': get(g:, 'colors_name', ''), 'workspaceFolders': get(g:, 'WorkspaceFolders', v:null), 'background': &background, 'runtimepath': &runtimepath, 'locationlist': get(g:,'coc_enable_locationlist', 1), 'progpath': v:progpath, 'guicursor': &guicursor, 'textprop': has('textprop') && has('patch-8.1.1522') && !has('nvim') ? v:true : v:false,}

FUNCTION  <SNR>107_get_transitioned_seperator()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:143
Called 12 times
Total time:   0.040694
 Self time:   0.000761

count  total (s)   self (s)
   12              0.000028   let line = ''
   12              0.000079   if get(a:self._context, 'tabline', 0) && get(g:, 'airline#extensions#tabline#alt_sep', 0) && a:group ==# 'airline_tabsel' && a:side
                                call airline#highlighter#add_separator(a:prev_group, a:group, 0)
                                let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
                                let line .=  a:self._context.right_sep.'%#'.a:group.'#'
   12              0.000011   else
   12   0.040132   0.000199     call airline#highlighter#add_separator(a:prev_group, a:group, a:side)
   12              0.000084     let line .= '%#'.a:prev_group.'_to_'.a:group.'#'
   12              0.000072     let line .= a:side ? a:self._context.left_sep : a:self._context.right_sep
   12              0.000094     let line .= '%#'.a:group.'#'
   12              0.000010   endif
   12              0.000025   return line

FUNCTION  <SNR>52_on_window_changed()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:59
Called 3 times
Total time:   0.288407
 Self time:   0.000291

count  total (s)   self (s)
                              " don't trigger for Vim popup windows
    3              0.000014   if &buftype is# 'popup'
                                return
    3              0.000003   endif
                            
    3              0.000013   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
                                " do not trigger for previewwindows
                                return
    3              0.000003   endif
    3              0.000014   let s:active_winnr = winnr()
                              " Handle each window only once, since we might come here several times for
                              " different autocommands.
    3              0.000055   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
    3              0.000077   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
                                " fugitive is special, it changes names and filetypes several times,
                                " make sure the caching does not get into its way
    2              0.000003     return
    1              0.000001   endif
    1              0.000004   let g:airline_last_window_changed = l:key
    1   0.274036   0.000043   call s:init()
    1   0.014149   0.000025   call airline#update_statusline()

FUNCTION  <SNR>96_get_hunks_coc()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:47
Called 47 times
Total time:   0.000553
 Self time:   0.000553

count  total (s)   self (s)
   47              0.000253   let hunks = get(b:, 'coc_git_status', '')
   47              0.000133   if empty(hunks)
   47              0.000086     return []
                              endif
                              let result = [0, 0, 0]
                              for val in split(hunks)
                                if val[0] is# '+'
                                 let result[0] = val[1:] + 0
                                elseif val[0] is# '~'
                                 let result[1] = val[1:] + 0
                                elseif val[0] is# '-'
                                  let result[2] = val[1:] + 0
                                endif
                              endfor
                              return result

FUNCTION  airline#extensions#po#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/po.vim:85
Called 1 time
Total time:   0.000081
 Self time:   0.000014

count  total (s)   self (s)
    1   0.000080   0.000012     call a:ext.add_statusline_func('airline#extensions#po#apply')

FUNCTION  airline#util#has_lawrencium()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:158
Called 47 times
Total time:   0.000588
 Self time:   0.000588

count  total (s)   self (s)
   47              0.000224   if !exists("s:has_lawrencium")
    1              0.000007     let s:has_lawrencium  = exists('*lawrencium#statusline')
   47              0.000047   endif
   47              0.000109   return s:has_lawrencium

FUNCTION  airline#highlighter#get_highlight()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:67
Called 173 times
Total time:   0.041594
 Self time:   0.021818

count  total (s)   self (s)
  173              0.004350   let reverse = get(g:, 'airline_gui_mode', '') ==# 'gui' ? synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'gui') : synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'cterm')|| synIDattr(synIDtrans(hlID(a:group)), 'reverse', 'term')
  173              0.001054   if get(g:, 'airline_highlighting_cache', 0) && has_key(s:hl_groups, a:group)
                                let res = s:hl_groups[a:group]
                                return reverse ? [ res[1], res[0], res[3], res[2], res[4] ] : res
  173              0.000168   else
  173   0.013537   0.004740     let fg = s:get_syn(a:group, 'fg')
  173   0.010910   0.002474     let bg = s:get_syn(a:group, 'bg')
  173              0.001575     let bold = synIDattr(synIDtrans(hlID(a:group)), 'bold')
  173              0.000287     if reverse
    1   0.000032   0.000016       let res = s:get_array(bg, fg, bold ? ['bold'] : a:000)
  172              0.000167     else
  172   0.005397   0.002870       let res = s:get_array(fg, bg, bold ? ['bold'] : a:000)
  173              0.000171     endif
  173              0.000130   endif
  173              0.000866   let s:hl_groups[a:group] = res
  173              0.000294   return res

FUNCTION  airline#extensions#coc#get_status()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/coc.vim:45
Called 47 times
Total time:   0.002937
 Self time:   0.000781

count  total (s)   self (s)
                              " Shorten text for windows < 91 characters
   47   0.002837   0.000680   return airline#util#shorten(get(g:, 'coc_status', ''), 91, 9)

FUNCTION  airline#util#shorten()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:28
Called 188 times
Total time:   0.009455
 Self time:   0.006376

count  total (s)   self (s)
  188   0.006052   0.002974   if airline#util#winwidth() < a:winwidth && len(split(a:text, '\zs')) > a:minwidth
                                if get(a:000, 0, 0)
                                  " shorten from tail
                                  return '…'.matchstr(a:text, '.\{'.a:minwidth.'}$')
                                else
                                  " shorten from beginning of string
                                  return matchstr(a:text, '^.\{'.a:minwidth.'}').'…'
                                endif
  188              0.000159   else
  188              0.000376     return a:text
                              endif

FUNCTION  <SNR>97_update_untracked()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:192
Called 47 times
Total time:   0.001379
 Self time:   0.001379

count  total (s)   self (s)
   47              0.000949   let file = expand("%:p")
   47              0.000276   if empty(file) || isdirectory(file) || !empty(&buftype)
   47              0.000076     return
                              endif
                            
                              let needs_update = 1
                              let vcs_checks   = get(g:, "airline#extensions#branch#vcs_checks", ["untracked", "dirty"])
                              for vcs in keys(s:vcs_config)
                                if file =~ s:vcs_config[vcs].exclude
                                  " Skip check for files that live in the exclude directory
                                  let needs_update = 0
                                endif
                                if has_key(s:vcs_config[vcs].untracked, file)
                                  let needs_update = 0
                                  call airline#extensions#branch#update_untracked_config(file, vcs)
                                endif
                              endfor
                            
                              if !needs_update
                                return
                              endif
                            
                              for vcs in keys(s:vcs_config)
                                " only check, for git, if fugitive is installed
                                " and for 'hg' if lawrencium is installed, else skip
                                if vcs is# 'git' && (!airline#util#has_fugitive() && !airline#util#has_gina())
                                  continue
                                elseif vcs is# 'mercurial' && !airline#util#has_lawrencium()
                                  continue
                                endif
                                let config = s:vcs_config[vcs]
                                " Note that asynchronous update updates s:vcs_config only, and only
                                " s:update_untracked updates b:buffer_vcs_config. If s:vcs_config is
                                " invalidated again before s:update_untracked is called, then we lose the
                                " result of the previous call, i.e. the head string is not updated. It
                                " doesn't happen often in practice, so we let it be.
                                if index(vcs_checks, 'untracked') > -1
                                  call airline#async#vcs_untracked(config, file, vcs)
                                endif
                                " Check clean state of repo
                                if index(vcs_checks, 'dirty') > -1
                                  call airline#async#vcs_clean(config.dirty, file, vcs)
                                endif
                              endfor

FUNCTION  airline#util#ignore_next_focusgain()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:195
Called 48 times
Total time:   0.000688
 Self time:   0.000688

count  total (s)   self (s)
   48              0.000368   if has('win32')
                                " Setup an ignore for platforms that trigger FocusLost on calls to
                                " system(). macvim (gui and terminal) and Linux terminal vim do not.
                                let s:focusgained_ignore_time = localtime()
   48              0.000044   endif

FUNCTION  coc#util#set_buf_var()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:981
Called 1 time
Total time:   0.000033
 Self time:   0.000033

count  total (s)   self (s)
    1              0.000018   if !bufloaded(a:bufnr) | return | endif
    1              0.000011   call setbufvar(a:bufnr, a:name, a:val)

FUNCTION  airline#extensions#branch#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:342
Called 1 time
Total time:   0.000118
 Self time:   0.000068

count  total (s)   self (s)
    1   0.000067   0.000016   call airline#parts#define_function('branch', 'airline#extensions#branch#get_head')
                            
    1              0.000023   autocmd ShellCmdPost,CmdwinLeave * unlet! b:airline_head b:airline_do_mq_check
    1              0.000013   autocmd User AirlineBeforeRefresh unlet! b:airline_head b:airline_do_mq_check
    1              0.000006   autocmd BufWritePost * call s:reset_untracked_cache(0)
    1              0.000005   autocmd ShellCmdPost * call s:reset_untracked_cache(1)

FUNCTION  airline#highlighter#highlight_modified_inactive()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:229
Called 2 times
Total time:   0.001370
 Self time:   0.000113

count  total (s)   self (s)
    2              0.000013   if getbufvar(a:bufnr, '&modified')
                                let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive_modified.airline_c : []
    2              0.000002   else
    2              0.000028     let colors = exists('g:airline#themes#{g:airline_theme}#palette.inactive.airline_c') ? g:airline#themes#{g:airline_theme}#palette.inactive.airline_c : []
    2              0.000002   endif
                            
    2              0.000006   if !empty(colors)
    2   0.001299   0.000042     call airline#highlighter#exec('airline_c'.(a:bufnr).'_inactive', colors)
    2              0.000002   endif

FUNCTION  <SNR>113_import_module()
    Defined: /usr/share/nvim/runtime/autoload/provider/pythonx.vim:67
Called 1 time
Total time:   0.046174
 Self time:   0.000144

count  total (s)   self (s)
    1   0.046148   0.000118   let prog_version = system([a:prog, '-c' , printf( 'import sys; ' . 'sys.path = list(filter(lambda x: x != "", sys.path)); ' . 'sys.stdout.write(str(sys.version_info[0]) + "." + str(sys.version_info[1])); ' . 'import pkgutil; ' . 'exit(2*int(pkgutil.get_loader("%s") is None))', a:module)])
    1              0.000018   return [v:shell_error, prog_version]

FUNCTION  airline#init#gui_mode()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/init.vim:185
Called 1 time
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    1              0.000013   return has('gui_running') || (has("termguicolors") && &termguicolors == 1) ?  'gui' : 'cterm'

FUNCTION  airline#extensions#branch#get_head()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/branch.vim:308
Called 47 times
Total time:   0.118892
 Self time:   0.004028

count  total (s)   self (s)
   47   0.112889   0.000619   let head = airline#extensions#branch#head()
   47   0.001035   0.000687   let winwidth = get(airline#parts#get('branch'), 'minwidth', 120)
   47              0.000989   let minwidth = empty(get(b:, 'airline_hunks', '')) ? 14 : 7
   47   0.002927   0.000679   let head = airline#util#shorten(head, winwidth, minwidth)
   47              0.000320   let symbol = get(g:, 'airline#extensions#branch#symbol', g:airline_symbols.branch)
   47              0.000595   return empty(head) ? get(g:, 'airline#extensions#branch#empty_message', '') : printf('%s%s', empty(symbol) ? '' : symbol.(g:airline_symbols.space), head)

FUNCTION  <SNR>3_trim()
    Defined: ~/.config/nvim/autoload/plug.vim:311
Called 45 times
Total time:   0.000630
 Self time:   0.000630

count  total (s)   self (s)
   45              0.000598   return substitute(a:str, '[\/]\+$', '', '')

FUNCTION  <SNR>65_AsyncRequest()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/plugin/coc.vim:62
Called 1 time
Total time:   0.000259
 Self time:   0.000060

count  total (s)   self (s)
    1              0.000015   let Cb = a:args[len(a:args) - 1]
    1              0.000007   if type(Cb) == 2
                                if !coc#rpc#ready()
                                  call Cb('service not started', v:null)
                                else
                                  call coc#rpc#request_async(a:name, a:args[0:-2], Cb)
                                endif
                                return ''
    1              0.000001   endif
    1   0.000215   0.000016   call coc#rpc#notify(a:name, a:args)
    1              0.000002   return ''

FUNCTION  coc#util#cursor()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/util.vim:90
Called 1 time
Total time:   0.000028
 Self time:   0.000028

count  total (s)   self (s)
    1              0.000011   let pos = getcurpos()
    1              0.000009   let content = pos[2] == 1 ? '' : getline('.')[0: pos[2] - 2]
    1              0.000007   return [pos[1] - 1, strchars(content)]

FUNCTION  coc#rpc#notify()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/rpc.vim:99
Called 4 times
Total time:   0.000659
 Self time:   0.000133

count  total (s)   self (s)
    4   0.000114   0.000041   if !coc#rpc#ready()
                                return ''
    4              0.000004   endif
    4   0.000521   0.000069   call s:client['notify'](a:method, a:args)
    4              0.000008   return ''

FUNCTION  airline#themes#generate_color_map()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/themes.vim:7
Called 18 times
Total time:   0.001583
 Self time:   0.001583

count  total (s)   self (s)
   18              0.000535   let palette = { 'airline_a': [ a:sect1[0] , a:sect1[1] , a:sect1[2] , a:sect1[3] , get(a:sect1 , 4 , '') ] , 'airline_b': [ a:sect2[0] , a:sect2[1] , a:sect2[2] , a:sect2[3] , get(a:sect2 , 4 , '') ] , 'airline_c': [ a:sect3[0] , a:sect3[1] , a:sect3[2] , a:sect3[3] , get(a:sect3 , 4 , '') ] , }
                            
   18              0.000045   if a:0 > 0
    6              0.000205     call extend(palette, { 'airline_x': [ a:1[0] , a:1[1] , a:1[2] , a:1[3] , get(a:1 , 4 , '' ) ] , 'airline_y': [ a:2[0] , a:2[1] , a:2[2] , a:2[3] , get(a:2 , 4 , '' ) ] , 'airline_z': [ a:3[0] , a:3[1] , a:3[2] , a:3[3] , get(a:3 , 4 , '' ) ] , })
   12              0.000014   else
   12              0.000345     call extend(palette, { 'airline_x': [ a:sect3[0] , a:sect3[1] , a:sect3[2] , a:sect3[3] , '' ] , 'airline_y': [ a:sect2[0] , a:sect2[1] , a:sect2[2] , a:sect2[3] , '' ] , 'airline_z': [ a:sect1[0] , a:sect1[1] , a:sect1[2] , a:sect1[3] , '' ] , })
   18              0.000025   endif
                            
   18              0.000044   return palette

FUNCTION  airline#extensions#hunks#get_hunks()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/hunks.vim:105
Called 47 times
Total time:   0.159931
 Self time:   0.005834

count  total (s)   self (s)
   47              0.000220   if !get(w:, 'airline_active', 0)
                                return ''
   47              0.000043   endif
                              " Cache values, so that it isn't called too often
   47   0.002368   0.001664   if exists("b:airline_hunks") && get(b:,  'airline_changenr', 0) == b:changedtick && airline#util#winwidth() == get(s:, 'airline_winwidth', 0) && get(b:, 'source_func', '') isnot# 's:get_hunks_signify' && get(b:, 'source_func', '') isnot# 's:get_hunks_gitgutter' && get(b:, 'source_func', '') isnot# 's:get_hunks_empty' && get(b:, 'source_func', '') isnot# 's:get_hunks_changes' && get(b:, 'source_func', '') isnot# 's:get_hunks_coc'
                                return b:airline_hunks
   47              0.000040   endif
   47   0.152809   0.000711   let hunks = airline#extensions#hunks#get_raw_hunks()
   47              0.000101   let string = ''
   47   0.000981   0.000653   let winwidth = get(airline#parts#get('hunks'), 'minwidth', 100)
   47              0.000134   if !empty(hunks)
                                " hunks should contain [added, changed, deleted]
                                for i in [0, 1, 2]
                                  if (s:non_zero_only == 0 && airline#util#winwidth() > winwidth) || hunks[i] > 0
                                    let string .= printf('%s%s ', s:hunk_symbols[i], hunks[i])
                                  endif
                                endfor
   47              0.000044   endif
   47              0.000166   let b:airline_hunks = string
   47              0.000153   let b:airline_changenr = b:changedtick
   47   0.001519   0.000553   let s:airline_winwidth = airline#util#winwidth()
   47              0.000094   return string

FUNCTION  airline#extensions#netrw#apply()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim:11
Called 2 times
Total time:   0.000066
 Self time:   0.000066

count  total (s)   self (s)
    2              0.000016   if &ft == 'netrw'
                                let spc = g:airline_symbols.space
                            
                                call a:1.add_section('airline_a', spc.'netrw'.spc)
                                if exists('*airline#extensions#branch#get_head')
                                  call a:1.add_section('airline_b', spc.'%{airline#extensions#branch#get_head()}'.spc)
                                endif
                                call a:1.add_section('airline_c', spc.'%f'.spc)
                                call a:1.split()
                                call a:1.add_section('airline_y', spc.'%{airline#extensions#netrw#sortstring()}'.spc)
                                return 1
    2              0.000002   endif

FUNCTION  <SNR>94_create()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/section.vim:17
Called 9 times
Total time:   0.018274
 Self time:   0.007720

count  total (s)   self (s)
    9              0.000025   let _ = ''
   50              0.000141   for idx in range(len(a:parts))
   41   0.000825   0.000560     let part = airline#parts#get(a:parts[idx])
   41              0.000098     let val = ''
   41              0.000179     let add_sep = get(l:, 'add_sep', 0)
                            
   41              0.000174     if exists('part.function')
   16              0.000059       let func = (part.function).'()'
   25              0.000083     elseif exists('part.text')
    6              0.000023       let func = '"'.(part.text).'"'
   19              0.000021     else
   19              0.000050       if a:append > 0 && idx != 0
                                    let val .= s:spc.g:airline_left_alt_sep.s:spc
   19              0.000019       endif
   19              0.000045       if a:append < 0 && idx != 0
    2              0.000004         let t = ''
    2              0.000004         if !add_sep
                                      let t = s:spc.g:airline_right_alt_sep.s:spc
    2              0.000002         endif
    2              0.000006         let val = t.val
   19              0.000018       endif
   19              0.000065       if exists('part.raw')
   16   0.009134   0.000251         let _ .= s:wrap_accent(part, val.(part.raw))
   16              0.000024         continue
    3              0.000003       else
    3   0.000094   0.000048         let _ .= s:wrap_accent(part, val.a:parts[idx])
    3              0.000004         continue
                                  endif
   22              0.000022     endif
                            
   22              0.000105     let minwidth = get(part, 'minwidth', 0)
                            
   22              0.000061     if a:append > 0 && idx != 0
    8              0.000058       let partval = printf('%%{airline#util#append(%s,%s)}', func, minwidth)
                                  " will add an extra separator, if minwidth is zero
    8              0.000024       let add_sep = (minwidth == 0)
   14              0.000060     elseif a:append < 0 && idx != len(a:parts) - 1
    3              0.000024       let partval = printf('%%{airline#util#prepend(%s,%s)}', func, minwidth)
                                  " will add an extra separator, if minwidth is zero
    3              0.000010       let add_sep = (minwidth == 0)
   11              0.000011     else
   11              0.000088       let partval = printf('%%{airline#util#wrap(%s,%s)}', func, minwidth)
   11              0.000024       let add_sep = 0
   22              0.000023     endif
                            
   22              0.000077     if exists('part.condition')
                                  let partval = substitute(partval, '{', '\="{".(part.condition)." ? "', '')
                                  let partval = substitute(partval, '}', ' : ""}', '')
   22              0.000023     endif
                            
   22   0.001689   0.000328     let val .= s:wrap_accent(part, partval)
   22              0.000081     let _ .= val
   31              0.000059   endfor
    9              0.000045   return _

FUNCTION  <SNR>95_GetHiCmd()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/highlighter.vim:164
Called 62 times
Total time:   0.012872
 Self time:   0.012872

count  total (s)   self (s)
                              " a:list needs to have 5 items!
   62              0.000137   let res = ''
   62              0.000181   let i = -1
  372              0.000615   while i < 4
  310              0.000606     let i += 1
  310              0.001217     let item = get(a:list, i, '')
  310              0.000586     if item is ''
  115              0.000151       continue
  195              0.001900     endif
  195              0.000281     if i == 0
   12              0.000050       let res .= ' guifg='.item
  183              0.000273     elseif i == 1
   32              0.000133       let res .= ' guibg='.item
  151              0.000232     elseif i == 2
   62              0.000255       let res .= ' ctermfg='.item
   89              0.000120     elseif i == 3
   62              0.000215       let res .= ' ctermbg='.item
   27              0.000036     elseif i == 4
   27              0.000197       let res .= printf(' gui=%s cterm=%s term=%s', item, item, item)
  195              0.000163     endif
  257              0.000635   endwhile
   62              0.000142   return res

FUNCTION  <SNR>100_check_mixed_indent_file()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/whitespace.vim:32
Called 2 times
Total time:   0.000114
 Self time:   0.000114

count  total (s)   self (s)
    2              0.000022   let c_like_langs = get(g:, 'airline#extensions#c_like_langs', [ 'arduino', 'c', 'cpp', 'cuda', 'go', 'javascript', 'ld', 'php' ])
    2              0.000018   if index(c_like_langs, &ft) > -1
                                " for C-like languages: allow /** */ comment style with one space before the '*'
                                let head_spc = '\v(^ +\*@!)'
    2              0.000002   else
    2              0.000005     let head_spc = '\v(^ +)'
    2              0.000002   endif
    2              0.000017   let indent_tabs = search('\v(^\t+)', 'nw')
    2              0.000016   let indent_spc  = search(head_spc, 'nw')
    2              0.000006   if indent_tabs > 0 && indent_spc > 0
                                return printf("%d:%d", indent_tabs, indent_spc)
    2              0.000002   else
    2              0.000003     return ''
                              endif

FUNCTION  FugitiveParse()
    Defined: ~/.local/share/nvim/plugged/vim-fugitive/plugin/fugitive.vim:71
Called 1 time
Total time:   0.000028
 Self time:   0.000018

count  total (s)   self (s)
    1   0.000019   0.000010   let path = s:Slash(a:0 ? a:1 : @%)
    1              0.000005   if path !~# '^fugitive:'
    1              0.000002     return ['', '']
                              endif
                              let vals = matchlist(path, '\c^fugitive:\%(//\)\=\(.\{-\}\)\%(//\|::\)\(\x\{40,\}\|[0-3]\)\(/.*\)\=$')
                              if len(vals)
                                return [(vals[2] =~# '^.$' ? ':' : '') . vals[2] . substitute(vals[3], '^/', ':', ''), vals[1]]
                              endif
                              let v:errmsg = 'fugitive: invalid Fugitive URL ' . path
                              throw v:errmsg

FUNCTION  <SNR>68_start()
    Defined: ~/.local/share/nvim/plugged/coc.nvim/autoload/coc/client.vim:37
Called 1 time
Total time:   0.006610
 Self time:   0.006610

count  total (s)   self (s)
    1              0.000003   if self.running | return | endif
    1              0.000001   if s:is_vim
                                let options = { 'in_mode': 'json', 'out_mode': 'json', 'err_mode': 'nl', 'err_cb': {channel, message -> s:on_stderr(self.name, split(message, "\n"))}, 'exit_cb': {channel, code -> s:on_exit(self.name, code)},}
                                if has("patch-8.1.350")
                                  let options['noblock'] = 1
                                endif
                                if has("patch-8.0.0902")
                                  let options['env'] = { 'VIM_NODE_RPC': '1', 'COC_NVIM': '1', 'COC_CHANNEL_TIMEOUT': get(g:, 'coc_channel_timeout', 30), }
                                else
                                  let $VIM_NODE_RPC = 1
                                  let $COC_NVIM = 1
                                  let $COC_CHANNEL_TIMEOUT = get(g:, 'coc_channel_timeout', 30)
                                endif
                                let job = job_start(self.command, options)
                                let status = job_status(job)
                                if status !=# 'run'
                                  let self.running = 0
                                  echohl Error | echom 'Failed to start '.self.name.' service' | echohl None
                                  return
                                endif
                                let self['running'] = 1
                                let self['channel'] = job_getchannel(job)
    1              0.000001   else
    1              0.006530     let chan_id = jobstart(self.command, { 'rpc': 1, 'on_stderr': {channel, msgs -> s:on_stderr(self.name, msgs)}, 'on_exit': {channel, code -> s:on_exit(self.name, code)}, 'env': {   'COC_CHANNEL_TIMEOUT': get(g:, 'coc_channel_timeout', 30)  }})
    1              0.000008     if chan_id <= 0
                                  echohl Error | echom 'Failed to start '.self.name.' service' | echohl None
                                  return
    1              0.000001     endif
    1              0.000005     let self['chan_id'] = chan_id
    1              0.000003     let self['running'] = 1
    1              0.000001   endif

FUNCTION  <SNR>62_SearchForRootDirectory()
    Defined: ~/.local/share/nvim/plugged/vim-rooter/plugin/rooter.vim:118
Called 1 time
Total time:   0.000761
 Self time:   0.000058

count  total (s)   self (s)
    2              0.000007   for pattern in g:rooter_patterns
    2   0.000738   0.000035     let result = s:FindAncestor(pattern)
    2              0.000006     if !empty(result)
    1              0.000002       return result
    1              0.000001     endif
    1              0.000001   endfor
                              return ''

FUNCTION  airline#util#prepend()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:63
Called 141 times
Total time:   0.001735
 Self time:   0.001735

count  total (s)   self (s)
  141              0.000559   if a:minwidth > 0 && airline#util#winwidth() < a:minwidth
                                return ''
  141              0.000131   endif
  141              0.000663   return empty(a:text) ? '' : a:text.s:spc.g:airline_right_alt_sep.s:spc

FUNCTION  airline#extensions#netrw#init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/extensions/netrw.vim:26
Called 1 time
Total time:   0.000080
 Self time:   0.000018

count  total (s)   self (s)
    1              0.000006   let g:netrw_force_overwrite_statusline = 0
    1   0.000072   0.000010   call a:ext.add_statusline_func('airline#extensions#netrw#apply')

FUNCTION  airline#util#getbufvar()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/util.vim:71
Called 5 times
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
    5              0.000026     return getbufvar(a:bufnr, a:key, a:def)

FUNCTION  <SNR>52_init()
    Defined: ~/.local/share/nvim/plugged/vim-airline/plugin/airline.vim:15
Called 1 time
Total time:   0.273992
 Self time:   0.000693

count  total (s)   self (s)
    1              0.000002   if s:airline_initialized
                                return
    1              0.000001   endif
    1              0.000005   let s:airline_initialized = 1
                            
    1   0.047996   0.000268   call airline#extensions#load()
    1   0.017401   0.000029   call airline#init#sections()
                            
    1              0.000008   let s:theme_in_vimrc = exists('g:airline_theme')
    1              0.000003   if s:theme_in_vimrc
    1              0.000002     try
    1              0.000003       if g:airline_theme is# 'random'
                                    let g:airline_theme=s:random_theme()
    1              0.000001       endif
    1   0.005570   0.000264       let palette = g:airline#themes#{g:airline_theme}#palette
                                catch
                                  call airline#util#warning(printf('Could not resolve airline theme "%s". Themes have been migrated to github.com/vim-airline/vim-airline-themes.', g:airline_theme))
                                  let g:airline_theme = 'dark'
    1              0.000003     endtry
    1              0.000002     try
    1   0.202913   0.000040       silent call airline#switch_theme(g:airline_theme)
                                catch
                                  call airline#util#warning(printf('Could not find airline theme "%s".', g:airline_theme))
                                  let g:airline_theme = 'dark'
                                  silent call airline#switch_theme(g:airline_theme)
    1              0.000002     endtry
                              else
                                let g:airline_theme = 'dark'
                                silent call s:on_colorscheme_changed()
    1              0.000001   endif
                            
    1   0.000036   0.000016   call airline#util#doautocmd('AirlineAfterInit')

FUNCTION  <SNR>89_VimEnter()
    Defined: ~/.local/share/nvim/plugged/indentLine/after/plugin/indentLine.vim:131
Called 1 time
Total time:   0.000081
 Self time:   0.000069

count  total (s)   self (s)
    1              0.000004     let init_winnr = winnr()
    1   0.000053   0.000042     noautocmd windo call s:DisableOnDiff()
    1              0.000022     noautocmd exec init_winnr . "wincmd w"

FUNCTION  plug#end()
    Defined: ~/.config/nvim/autoload/plug.vim:204
Called 1 time
Total time:   0.060983
 Self time:   0.005536

count  total (s)   self (s)
    1              0.000004   if !exists('g:plugs')
                                return s:err('Call plug#begin() first')
    1              0.000001   endif
                            
    1              0.000005   if exists('#PlugLOD')
                                augroup PlugLOD
                                  autocmd!
                                augroup END
                                augroup! PlugLOD
    1              0.000001   endif
    1              0.000011   let lod = { 'ft': {}, 'map': {}, 'cmd': {} }
                            
    1              0.000006   if exists('g:did_load_filetypes')
                                filetype off
    1              0.000001   endif
   45              0.000089   for name in g:plugs_order
   44              0.000167     if !has_key(g:plugs, name)
                                  continue
   44              0.000042     endif
   44              0.000147     let plug = g:plugs[name]
   44   0.005011   0.000871     if get(s:loaded, name, 0) || !s:lazy(plug, 'on') && !s:lazy(plug, 'for')
   34              0.000123       let s:loaded[name] = 1
   34              0.000045       continue
   10              0.000010     endif
                            
   10              0.000035     if has_key(plug, 'on')
    1              0.000008       let s:triggers[name] = { 'map': [], 'cmd': [] }
    2   0.000019   0.000013       for cmd in s:to_a(plug.on)
    1              0.000007         if cmd =~? '^<Plug>.\+'
                                      if empty(mapcheck(cmd)) && empty(mapcheck(cmd, 'i'))
                                        call s:assoc(lod.map, cmd, name)
                                      endif
                                      call add(s:triggers[name].map, cmd)
    1              0.000006         elseif cmd =~# '^[A-Z]'
    1              0.000011           let cmd = substitute(cmd, '!*$', '', '')
    1              0.000006           if exists(':'.cmd) != 2
    1   0.000022   0.000012             call s:assoc(lod.cmd, cmd, name)
    1              0.000001           endif
    1              0.000006           call add(s:triggers[name].cmd, cmd)
                                    else
                                      call s:err('Invalid `on` option: '.cmd. '. Should start with an uppercase letter or `<Plug>`.')
    1              0.000001         endif
    2              0.000003       endfor
   10              0.000010     endif
                            
   10              0.000102     if has_key(plug, 'for')
    9   0.000167   0.000110       let types = s:to_a(plug.for)
    9              0.000027       if !empty(types)
    9              0.000019         augroup filetypedetect
    9   0.007013   0.000190         call s:source(s:rtp(plug), 'ftdetect/**/*.vim', 'after/ftdetect/**/*.vim')
    9              0.000012         augroup END
    9              0.000010       endif
   27              0.000056       for type in types
   18   0.000401   0.000216         call s:assoc(lod.ft, type, name)
   27              0.000030       endfor
   10              0.000010     endif
   11              0.000013   endfor
                            
    2              0.000010   for [cmd, names] in items(lod.cmd)
    1              0.000047     execute printf( 'command! -nargs=* -range -bang -complete=file %s call s:lod_cmd(%s, "<bang>", <line1>, <line2>, <q-args>, %s)', cmd, string(cmd), string(names))
    2              0.000003   endfor
                            
    1              0.000004   for [map, names] in items(lod.map)
                                for [mode, map_prefix, key_prefix] in [['i', '<C-O>', ''], ['n', '', ''], ['v', '', 'gv'], ['o', '', '']]
                                  execute printf( '%snoremap <silent> %s %s:<C-U>call <SID>lod_map(%s, %s, %s, "%s")<CR>', mode, map, map_prefix, string(map), string(names), mode != 'i', key_prefix)
                                endfor
    1              0.000001   endfor
                            
    9              0.000095   for [ft, names] in items(lod.ft)
    8              0.000012     augroup PlugLOD
    8              0.000157       execute printf('autocmd FileType %s call <SID>lod_ft(%s, %s)', ft, string(ft), string(names))
    8              0.000010     augroup END
    9              0.000009   endfor
                            
    1   0.002568   0.000026   call s:reorg_rtp()
    1   0.023898   0.001488   filetype plugin indent on
    1              0.000007   if has('vim_starting')
    1              0.000007     if has('syntax') && !exists('g:syntax_on')
    1   0.019313   0.000041       syntax enable
    1              0.000002     end
                              else
                                call s:reload_plugins()
    1              0.000001   endif

FUNCTION  <SNR>3_is_local_plug()
    Defined: ~/.config/nvim/autoload/plug.vim:366
Called 44 times
Total time:   0.000326
 Self time:   0.000326

count  total (s)   self (s)
   44              0.000289     return a:repo[0] =~ '[/$~]'

FUNCTION  airline#builder#new()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/builder.vim:232
Called 2 times
Total time:   0.000088
 Self time:   0.000088

count  total (s)   self (s)
    2              0.000022   let builder = copy(s:prototype)
    2              0.000007   let builder._context = a:context
    2              0.000005   let builder._sections = []
                            
    2              0.000044   call extend(builder._context, { 'left_sep': g:airline_left_sep, 'left_alt_sep': g:airline_left_alt_sep, 'right_sep': g:airline_right_sep, 'right_alt_sep': g:airline_right_alt_sep, }, 'keep')
    2              0.000005   return builder

FUNCTION  airline#init#bootstrap()
    Defined: ~/.local/share/nvim/plugged/vim-airline/autoload/airline/init.vim:13
Called 3 times
Total time:   0.003417
 Self time:   0.001000

count  total (s)   self (s)
    3              0.000012   if s:loaded
    2              0.000005     return
    1              0.000001   endif
    1              0.000003   let s:loaded = 1
                            
    1              0.000012   let g:airline#init#bootstrapping = 1
                            
    1              0.000016   let g:airline#init#vim_async = (v:version >= 800 && has('job'))
    1              0.000014   let g:airline#init#is_windows = has('win32') || has('win64')
                            
    1   0.000049   0.000018   call s:check_defined('g:airline_detect_modified', 1)
    1   0.000023   0.000014   call s:check_defined('g:airline_detect_paste', 1)
    1   0.000019   0.000011   call s:check_defined('g:airline_detect_crypt', 1)
    1   0.000019   0.000011   call s:check_defined('g:airline_detect_spell', 1)
    1   0.000026   0.000012   call s:check_defined('g:airline_detect_spelllang', 1)
    1   0.000026   0.000012   call s:check_defined('g:airline_detect_iminsert', 0)
    1   0.000026   0.000012   call s:check_defined('g:airline_inactive_collapse', 1)
    1   0.000030   0.000014   call s:check_defined('g:airline_exclude_filenames', ['DebuggerWatch','DebuggerStack','DebuggerStatus'])
    1   0.000026   0.000012   call s:check_defined('g:airline_exclude_filetypes', [])
    1   0.000020   0.000012   call s:check_defined('g:airline_exclude_preview', 0)
    1   0.000049   0.000021   call s:check_defined('g:airline_gui_mode', airline#init#gui_mode())
                            
    1   0.000026   0.000013   call s:check_defined('g:airline_mode_map', {})
    1              0.000046   call extend(g:airline_mode_map, { '__' : '------', 'c'  : 'COMMAND', 'i'  : 'INSERT', 'ic' : 'INSERT COMPL', 'ix' : 'INSERT COMPL', 'multi' : 'MULTI', 'n'  : 'NORMAL', 'ni' : '(INSERT)', 'no' : 'OP PENDING', 'R'  : 'REPLACE', 'Rv' : 'V REPLACE', 's'  : 'SELECT', 'S'  : 'S-LINE', '' : 'S-BLOCK', 't'  : 'TERMINAL', 'v'  : 'VISUAL', 'V'  : 'V-LINE', '' : 'V-BLOCK', }, 'keep')
                            
    1   0.000046   0.000016   call s:check_defined('g:airline_theme_map', {})
    1              0.000026   call extend(g:airline_theme_map, { 'default': 'dark', '\CTomorrow': 'tomorrow', 'base16': 'base16', 'mo[l|n]okai': 'molokai', 'wombat': 'wombat', 'zenburn': 'zenburn', 'solarized': 'solarized', 'flattened': 'solarized', '\CNeoSolarized': 'solarized', }, 'keep')
                            
    1   0.000027   0.000013   call s:check_defined('g:airline_symbols', {})
                              " First define the symbols,
                              " that are common in Powerline/Unicode/ASCII mode,
                              " then add specific symbols for either mode
    1              0.000017   call extend(g:airline_symbols, { 'paste': 'PASTE', 'spell': 'SPELL', 'modified': '+', 'space': ' ', 'keymap': 'Keymap:', 'ellipsis': '...'  }, 'keep')
                            
    1              0.000005   if get(g:, 'airline_powerline_fonts', 0)
                                " Symbols for Powerline terminals
    1   0.000028   0.000014     call s:check_defined('g:airline_left_sep', "\ue0b0")      " 
    1   0.000027   0.000012     call s:check_defined('g:airline_left_alt_sep', "\ue0b1")  " 
    1   0.000026   0.000013     call s:check_defined('g:airline_right_sep', "\ue0b2")     " 
    1   0.000026   0.000012     call s:check_defined('g:airline_right_alt_sep', "\ue0b3") " 
                                " ro=, ws=☲, lnr=☰, mlnr=, br=, nx=Ɇ, crypt=🔒, dirty=⚡
    1              0.000026     call extend(g:airline_symbols, { 'readonly': "\ue0a2", 'whitespace': "\u2632", 'linenr': "\u2630 ", 'maxlinenr': " \ue0a1", 'branch': "\ue0a0", 'notexists': "\u0246", 'dirty': "\u26a1", 'crypt': nr2char(0x1F512), }, 'keep')
                              elseif &encoding==?'utf-8' && !get(g:, "airline_symbols_ascii", 0)
                                " Symbols for Unicode terminals
                                call s:check_defined('g:airline_left_sep', "")
                                call s:check_defined('g:airline_left_alt_sep', "")
                                call s:check_defined('g:airline_right_sep', "")
                                call s:check_defined('g:airline_right_alt_sep', "")
                                " ro=⊝, ws=☲, lnr=☰, mlnr=㏑, br=ᚠ, nx=Ɇ, crypt=🔒
                                call extend(g:airline_symbols, { 'readonly': "\u229D", 'whitespace': "\u2632", 'linenr': "\u2630 ", 'maxlinenr': " \u33D1", 'branch': "\u16A0", 'notexists': "\u0246", 'crypt': nr2char(0x1F512), 'dirty': '!', }, 'keep')
                              else
                                " Symbols for ASCII terminals
                                call s:check_defined('g:airline_left_sep', "")
                                call s:check_defined('g:airline_left_alt_sep', "")
                                call s:check_defined('g:airline_right_sep', "")
                                call s:check_defined('g:airline_right_alt_sep', "")
                                call extend(g:airline_symbols, { 'readonly': 'RO', 'whitespace': '!', 'linenr': 'ln ', 'maxlinenr': ' :', 'branch': '', 'notexists': '?', 'crypt': 'cr', 'dirty': '!', }, 'keep')
    1              0.000001   endif
                            
    1   0.000386   0.000177   call airline#parts#define('mode', { 'function': 'airline#parts#mode', 'accent': 'bold', })
    1   0.000063   0.000016   call airline#parts#define_function('iminsert', 'airline#parts#iminsert')
    1   0.000054   0.000014   call airline#parts#define_function('paste', 'airline#parts#paste')
    1   0.000051   0.000013   call airline#parts#define_function('crypt', 'airline#parts#crypt')
    1   0.000052   0.000015   call airline#parts#define_function('spell', 'airline#parts#spell')
    1   0.000051   0.000013   call airline#parts#define_function('filetype', 'airline#parts#filetype')
    1   0.000039   0.000015   call airline#parts#define('readonly', { 'function': 'airline#parts#readonly', 'accent': 'red', })
    1   0.000051   0.000013   call airline#parts#define_raw('file', '%f%m')
    1   0.000049   0.000012   call airline#parts#define_raw('path', '%F%m')
    1   0.000039   0.000015   call airline#parts#define('linenr', { 'raw': '%{g:airline_symbols.linenr}%4l', 'accent': 'bold'})
    1   0.000039   0.000014   call airline#parts#define('maxlinenr', { 'raw': '/%L%{g:airline_symbols.maxlinenr}', 'accent': 'bold'})
    1   0.000051   0.000013   call airline#parts#define_function('ffenc', 'airline#parts#ffenc')
    1   0.000038   0.000014   call airline#parts#define('hunks', { 'raw': '', 'minwidth': 100})
    1   0.000039   0.000015   call airline#parts#define('branch', { 'raw': '', 'minwidth': 80})
    1   0.000038   0.000013   call airline#parts#define('coc_status', { 'raw': '', 'accent': 'bold' })
    1   0.001123   0.000034   call airline#parts#define_empty(['obsession', 'tagbar', 'syntastic-warn', 'syntastic-err', 'eclim', 'whitespace','windowswap', 'ycm_error_count', 'ycm_warning_count', 'neomake_error_count', 'neomake_warning_count', 'ale_error_count', 'ale_warning_count', 'lsp_error_count', 'lsp_warning_count', 'languageclient_error_count', 'languageclient_warning_count', 'coc_warning_count', 'coc_error_count', 'vista'])
    1   0.000052   0.000014   call airline#parts#define_text('bookmark', '')
    1   0.000049   0.000012   call airline#parts#define_text('capslock', '')
    1   0.000048   0.000012   call airline#parts#define_text('gutentags', '')
    1   0.000048   0.000012   call airline#parts#define_text('grepper', '')
    1   0.000048   0.000011   call airline#parts#define_text('xkblayout', '')
    1   0.000208   0.000011   call airline#parts#define_text('keymap', '')
                            
    1              0.000014   unlet g:airline#init#bootstrapping

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    2   0.338135   0.000175  remote#host#Require()
    2   0.337960   0.000711  provider#pythonx#Require()
    2   0.336729             provider#Poll()
    3   0.288407   0.000291  <SNR>52_on_window_changed()
    1   0.273992   0.000693  <SNR>52_init()
    1   0.202873   0.000758  airline#switch_theme()
    1   0.187831   0.000459  remote#define#AutocmdBootstrap()
    4   0.174630   0.000136  coc#rpc#request()
    4   0.174439   0.174350  <SNR>68_request()
   47   0.159931   0.005834  airline#extensions#hunks#get_hunks()
    1   0.157807   0.006395  provider#python3#Call()
    1   0.152789   0.000124  airline#load_theme()
   47   0.152099   0.002489  airline#extensions#hunks#get_raw_hunks()
    1   0.149057   0.000043  <SNR>96_coc_git_enabled()
    1   0.149014   0.000015  CocAction()
  101   0.134920   0.092393  airline#highlighter#exec()
    4   0.120106   0.010282  airline#highlighter#highlight()
   47   0.118892   0.004028  airline#extensions#branch#get_head()
   47   0.112269   0.002578  airline#extensions#branch#head()
   47   0.112245   0.013497  WebDevIconsGetFileFormatSymbol()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    2              0.336729  provider#Poll()
    4   0.174439   0.174350  <SNR>68_request()
  101   0.134920   0.092393  airline#highlighter#exec()
  184              0.047203  Base16hi()
   47   0.037305   0.027192  fugitive#Find()
    1   0.046864   0.025415  airline#extensions#load()
    1              0.024475  airline#util#themes()
  173   0.041594   0.021818  airline#highlighter#get_highlight()
  400              0.020796  <SNR>95_get_syn()
   18              0.017332  <SNR>42_CreateMaps()
   47   0.015024   0.014320  WebDevIconsGetFileTypeSymbol()
   47   0.096843   0.013604  <SNR>97_update_git_branch()
   47   0.112245   0.013497  WebDevIconsGetFileFormatSymbol()
   62              0.012872  <SNR>95_GetHiCmd()
   47   0.018085   0.012478  FugitiveExtractGitDir()
    1              0.010894  <SNR>65_AddAnsiGroups()
   47   0.048139   0.010833  fugitive#Head()
    4   0.120106   0.010282  airline#highlighter#highlight()
   47   0.013202   0.010203  airline#extensions#whitespace#check()
   48   0.030511   0.009592  airline#check_mode()

